<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>git-hooks</title>
      <link href="/git-hooks/"/>
      <url>/git-hooks/</url>
      
        <content type="html"><![CDATA[<h1 id="git-hooks"><a href="#git-hooks" class="headerlink" title="git hooks"></a>git hooks</h1><p>现在代码一般都会使用git来进行管理, 其中git hooks(git钩子)是git提供的在代码管理的生命周期中会被触发的一个阶段, 如同react里面组件的生命周期一样, 随着组件的状态的改变, 一些生命周期函数会被触发, 然后可以在触发的时候进行自定义的操作, git 也是如此, 例如我们可以在代码被提交(<code>git commit</code>)前进行代码的自动检查, 通过了检查才允许提交, 否则提交失败, 然后还有常见的自动化部署也是利用了 git hooks, 当新代码被提交到服务端(<code>git push</code>)的时候触发git hooks, 然后服务器自动进行重新部署.</p><a id="more"></a><p>我目前的使用来说用到了上面提供的两个钩子<code>pre-commit</code>(<code>git commit</code>时触发)和<code>post-update</code>(<code>git push</code>时触发)</p><p>一个是在本地提交js代码的时候使用eslint先对代码进行lint, lint通过后才允许提交, 否则提交失败, 修正不合约的语法之后再次进行提交, 这样强制性的代码lint可以一定程度保证团队协作时代码的风格和质量.</p><p>另一个是我博客的搜索服务是部署在阿里云ECS的docker里面的, 每次我对搜索相关的代码改动的时候, 就会推送到我的服务器里, 然后服务器上通过<code>post-update</code>钩子接收到新的提交时就会执行我写好的脚本, 自动使用最新代码进行docker的重新构建和运行, 很是方便</p><p>每一个git仓库在初始化的时候都会在项目的<code>.git/hooks</code>目录下初始化默认的钩子脚本<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入项目根目录后查看默认的钩子脚本</span></span><br><span class="line"><span class="built_in">cd</span> .git/hooks &amp;&amp; ls</span><br><span class="line"><span class="comment"># 有如下默认的钩子脚本</span></span><br><span class="line">applypatch-msg.sample     pre-applypatch.sample     pre-receive.sample</span><br><span class="line">commit-msg.sample         pre-commit.sample         prepare-commit-msg.sample</span><br><span class="line">fsmonitor-watchman.sample pre-push.sample           update.sample</span><br><span class="line">post-update.sample        pre-rebase.sample</span><br></pre></td></tr></table></figure><p></p><p>每个脚本后都带有<code>.sample</code>后缀, 这是因为这些钩子脚本默认都是不执行的, 如果需要使用哪个钩子, 那么就把后缀去掉, 然后就可以执行了</p><p>关于各个钩子的调用时机可以查看<a href="https://git-scm.com/docs/githooks#_hooks" target="_blank" rel="noopener">HOOKS</a></p><p>不过需要注意的是<code>.git</code>目录下的内容是不在git的版本管理里面的, 所以你如果更改了本地的钩子脚本, 那么默认情况下是不会被提交的, 如果需要这些内容也能够像其他代码一样在团队之间保持一致的话, 可以把这些钩子文件移出<code>.git</code>目录, 这样提交代码的时候就会提交这部分内容, 然后每一次代码更新以后再把这些脚本复制回<code>.git/hooks</code>目录中(复制的过程也可以通过钩子来自动完成, 不用手动复制, 钩子脚本里面加上拷贝文件的命令就可以了)</p><h2 id="pre-commit"><a href="#pre-commit" class="headerlink" title="pre-commit"></a><code>pre-commit</code></h2><p><code>pre-commit</code>是客户端钩子, 在键入提交信息前在本地运行, 它用于检查即将提交的快照, 如果该钩子以非零值退出，Git 将放弃此次提交，不过你可以用<code>git commit --no-verify</code>来绕过这个环节</p><p>例如对本次提交的<code>js</code>和<code>jsx</code>文件进行eslint检查, 如果有文件无法通过检查, 那么将会退出此次提交<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep <span class="string">".jsx\&#123;0,1\&#125;$"</span>)</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$STAGED_FILES</span>"</span> = <span class="string">""</span> ]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">PASS=<span class="literal">true</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\nValidating Javascript:\n"</span></span><br><span class="line"><span class="comment"># Check for eslint</span></span><br><span class="line"><span class="built_in">which</span> eslint &amp;&gt; /dev/null</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"$?"</span> == 1 ]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\t\033[41mPlease install ESlint\033[0m"</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">for</span> FILE <span class="keyword">in</span> <span class="variable">$STAGED_FILES</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">eslint <span class="string">"<span class="variable">$FILE</span>"</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"$?"</span> == 0 ]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\t\033[32mESLint Passed: <span class="variable">$FILE</span>\033[0m"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\t\033[41mESLint Failed: <span class="variable">$FILE</span>\033[0m"</span></span><br><span class="line">PASS=<span class="literal">false</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\nJavascript validation completed!\n"</span></span><br><span class="line"><span class="keyword">if</span> ! <span class="variable">$PASS</span>; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\033[41mCOMMIT FAILED:\033[0m Your commit contains files that should pass ESLint but do not. Please fix the ESLint errors and try again.\n"</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\033[42mCOMMIT SUCCEEDED\033[0m\n"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">exit</span> $?</span><br></pre></td></tr></table></figure><p></p><h2 id="post-update"><a href="#post-update" class="headerlink" title="post-update"></a><code>post-update</code></h2><p><code>post-update</code>是服务端钩子, 在服务器收到新的代码推送(<code>git push</code>)的时候运行, 自动化部署就利用这个钩子, 每次向服务器推送代码, 就触发该钩子然后服务器开始部署新代码</p><p>例如我的博客的搜索目前就是采用这种方式, 搜索使用的是<a href="https://koa.bootcss.com/" target="_blank" rel="noopener"><code>koa</code>框架</a>来做服务端, 代码其实很简单, 只有一个文件, 就是连接我的es, 然后依据查询参数到es中查询文章数据, 然后返回去, 不过中间复杂一点的是使用了<code>nginx</code>来代理(后期还打算通过<code>nginx</code>把被墙的<code>Disqus</code>接进来作为博客的评论系统, 这是后话了), 我的node端是运行在docker里面的, 所以还写了一个<code>Dockerfile</code>来每次拉新代码以后就重新构建docker镜像, 然后使用新的镜像来生成一个搜索容器, 这一套流程还是比较麻烦的, 不过使用自动化的话就能省不少事</p><p>服务端配置钩子也还是很方便的, 主要就是新建一个git裸仓, git裸仓一般也被作为远程的中心仓库, 这个仓库无法直接作为工作区, 也就是说在这个仓库里是不能进行<code>git commit</code>等操作的, 里面也没有项目源文件而是包含着文件版本历史, 一般是作为共享区来使用, 命名一般为<code>xxx.git</code>的形式, 例如你经常<code>clone</code>的git仓库就是这样的. 我们可以使用<code>git push</code>来向裸仓中提交版本记录, 也可以使用<code>git pull</code>从裸仓中拉取最新的版本</p><p>新建一个本地仓库的命令是<code>git init</code>, 而新建一个裸仓的命令是<code>git init --bare</code></p><p>例如我在服务器上新建一个裸仓用来接受我本地向它提交代码<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个目录用来存放裸仓</span></span><br><span class="line">mkdir ks.git &amp;&amp; <span class="built_in">cd</span> ks.git</span><br><span class="line"><span class="comment"># 初始化裸仓</span></span><br><span class="line">git init --bare</span><br></pre></td></tr></table></figure><p></p><p>一个裸仓就建好了</p><p>我的目的是之后向这个裸仓中提交代码时就触发自动部署流程, 所以我要编辑裸仓中的<code>post-update</code>钩子<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hooks</span><br><span class="line"><span class="comment"># 使用cp来拷贝并重命名钩子文件</span></span><br><span class="line">cp post-update.sample post-update</span><br><span class="line">vi post-update</span><br></pre></td></tr></table></figure><p></p><p>然后开始写脚本了<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 环境变量GIT_DIR会被设置为服务端当前目录, 我们需要更新另一个git里面的文件, 所以要先重置环境变量</span></span><br><span class="line"><span class="built_in">unset</span> GIT_DIR</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定一个目录用来作为代码文件夹, 这里面存放的是要运行的代码</span></span><br><span class="line">WORK_DIR=/workspace/ks/server</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORK_DIR</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化该目录为git工作仓库</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment"># 指定该仓库的远程仓库地址就是我们之前建立的那个裸仓, 因为我们提交代码是提交到裸仓中的, 所以这个仓库可以从裸仓中拉取最新代码, </span></span><br><span class="line">git remote add origin /workspace/ks/ks.git</span><br><span class="line"><span class="comment"># 清除未在版本控制里面的冗余文件, 比如编译后的一些文件等等, 保证工作目录的干净</span></span><br><span class="line">git clean -df</span><br><span class="line"><span class="comment"># 拉取最新代码到工作目录中</span></span><br><span class="line">git pull origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在最新的代码已经到工作目录中了, 之后可已使用 pm2 restart xxx 来重启我们的node服务</span></span><br><span class="line"><span class="comment"># 对于我来说现在可以按照新代码来重新构建镜像了, 当然了, 建新的之前先把旧的都清除掉</span></span><br><span class="line"><span class="comment"># 停止正在运行的搜索服务容器</span></span><br><span class="line">docker stop ks</span><br><span class="line"><span class="comment"># 删除这个已停止的搜索服务容器</span></span><br><span class="line">docker container rm ks</span><br><span class="line"><span class="comment"># 删除旧的搜索服务镜像</span></span><br><span class="line">docker image rm ks</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据项目根目录的 Dockerfile 来构建新镜像</span></span><br><span class="line">docker build -t ks .</span><br><span class="line"><span class="comment"># 然后使用新镜像来生成并运行新的搜索服务容器</span></span><br><span class="line">docker run -d --name ks -p 3000:3000 ks</span><br></pre></td></tr></table></figure><p></p><p>注意: 如果<code>post-update</code>执行权限不足的话可以使用<code>chmod +x post-update</code>来赋予执行权限</p><p>以上服务器端就配置完成了, 那么本地代码如何提交到服务器呢, 按照如下步骤</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果本地已经是一个 git 仓库了, 就不用 git init 初始化了</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加刚刚配置的服务器的裸仓为本地仓库的其中一个 remote 主机</span></span><br><span class="line"><span class="comment"># 我这里给远程主机配置的名字是 server , 因为我已经把 github 上的仓库配置成 origin 了</span></span><br><span class="line"><span class="comment"># user_name 和 server_ip 是你使用 ssh 方式连接服务器时的用户名和服务器地址, : 后面的是裸仓的路径</span></span><br><span class="line">git remote add server user_name:server_ip:/worksapce/ks/ks.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 之后如果有新的代码需要推送到服务器上, 然后命令可以看到 服务器返回的一些日志信息, 表明 post-update 已被成功调用, 开始自动部署了</span></span><br><span class="line">git push server master</span><br></pre></td></tr></table></figure><p>以上脚本内容实现了如下自动化过程:</p><p>本地<code>git push</code>代码到服务器 =&gt; 服务器部署新代码 =&gt; 服务器停止并删除旧的docker里面的搜索服务 =&gt; 根据新代码生成新的docker镜像并运行新的搜索服务</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://aotu.io/notes/2017/04/10/githooks/index.html" target="_blank" rel="noopener">用 Git 钩子进行简单自动部署</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>elasticsearch</title>
      <link href="/elasticsearch/"/>
      <url>/elasticsearch/</url>
      
        <content type="html"><![CDATA[<h1 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h1><p>我的博客之前的搜索都是使用的<a href="https://github.com/alexbruno/hexo-generator-json-content" target="_blank" rel="noopener"><code>hexo-generator-json-content</code></a>这个插件来生成的静态json文件, 在搜索的时候会去请求这个json文件, 里面是整个博客站点的文章数据, 随着博客的数量变多, 这个文件也越来越大, 导致第一次搜索的时候下载这个文件就会出现很长时间的等待, 所以也一直想要优化博客的搜索.</p><p>之前做爬虫的时候使用过<a href="https://www.elastic.co/cn/" target="_blank" rel="noopener"><code>elasticsearch</code></a>这个全文检索库, 感觉检索非常方便和快速, 所以这次有时间了就把博客的搜索完全迁移到了es上, 另外还顺带写了一个自动同步 hexo 博客数据到 es 里面的插件<a href="https://www.npmjs.com/package/hexo-elasticsearch" target="_blank" rel="noopener"><code>hexo-elasticsearch</code></a></p><a id="more"></a><p>我有一个阿里云的ECS服务器, 不过内存很小只有1G, 我把node端和es都使用docker的方式部署在了这个服务器上, 然后给es分配了300多M的内存, 虽然官方建议分配内存是2G, 但是我这小水管服务器实在是没那么多, 内存给的太多了服务器直接就会挂掉, 好在目前我的博客数据也没那么多, 分配的内存暂时够用. 部署过程可以看我这篇博客<a href="/docker/">docker学习笔记</a>.</p><h2 id="关于elasticsearch"><a href="#关于elasticsearch" class="headerlink" title="关于elasticsearch"></a>关于elasticsearch</h2><p>有部分想法借鉴了屈屈的博客<a href="https://imququ.com/post/elasticsearch.html" target="_blank" rel="noopener">使用 Elasticsearch 实现博客站内搜索</a></p><p>elasticsearch是一个基于lucene的全文检索库, 向外提供了简洁易用的restful api, 同时在Python, java 和 js 等语言中都有对应的实现, 使用起来很方便. 我现在主要做前端开发, 所以服务端使用的是轻量的 nodejs, 然后引用的<a href="https://www.npmjs.com/package/elasticsearch" target="_blank" rel="noopener"><code>elasticsearch</code></a>这个npm包来实现对 es 的操作.</p><p>我使用到的也只是es比较简单的一部分功能, 已经完全可以满足我博客的搜索需求.</p><blockquote><p>Elasticsearch 集群可以包含多个索引（Index），每个索引可以包含多个类型（Type），每个类型可以包含多个文档（Document），每个文档可以包含多个字段（Field）。以下是 MySQL 和 Elasticsearch 的术语类比图，帮助理解：</p><table><thead><tr><th style="text-align:center">MySQL</th><th style="text-align:center">Elasticsearch</th></tr></thead><tbody><tr><td style="text-align:center">Database</td><td style="text-align:center">Index</td></tr><tr><td style="text-align:center">Table</td><td style="text-align:center">Type</td></tr><tr><td style="text-align:center">Row</td><td style="text-align:center">Document</td></tr><tr><td style="text-align:center">Column</td><td style="text-align:center">Field</td></tr><tr><td style="text-align:center">Schema</td><td style="text-align:center">Mapping</td></tr><tr><td style="text-align:center">Index</td><td style="text-align:center">Everything Indexed by default</td></tr><tr><td style="text-align:center">SQL</td><td style="text-align:center">Query DSL</td></tr></tbody></table><p>–<a href="https://imququ.com/post/elasticsearch.html" target="_blank" rel="noopener">使用 Elasticsearch 实现博客站内搜索</a></p></blockquote><h2 id="相关api"><a href="#相关api" class="headerlink" title="相关api"></a>相关api</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html" target="_blank" rel="noopener">API Reference</a><br><a href="https://qbox.io/blog/integrating-elasticsearch-into-node-js-application" target="_blank" rel="noopener">How to Integrate Elasticsearch into Your Node.js Application</a><br><a href="https://juejin.im/post/5b799dcb6fb9a019be279bd7" target="_blank" rel="noopener">Elasticsearch 6.x Mapping设置</a></p><ul><li><p><code>new elasticsearch.Client()</code><br>第一步是新建一个es连接</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> es = <span class="built_in">require</span>(<span class="string">'elasticsearch'</span>);</span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> es.Client(&#123;</span><br><span class="line">  <span class="comment">// es 的连接地址及ip</span></span><br><span class="line">  host: <span class="string">'your_es_host:port'</span>,</span><br><span class="line">  <span class="comment">// 日志, 如果配置了的话每次操作es都会在控制输出相关信息</span></span><br><span class="line">  log: <span class="string">'trace'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>client.info()</code><br>连接之后可以通过<code>info</code>api查看es的相关信息, 检查是否连接成功, 也可使用<code>client.ping()</code>来测试连接</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">client.info(&#123;&#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">info</span> =&gt;</span> <span class="built_in">console</span>.log(info))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.error(error))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用 ping 来查看连接是否正常</span></span><br><span class="line">client.ping(&#123;</span><br><span class="line">  requestTimeout: <span class="number">30000</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">success</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(success) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'es connected!'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'es connect error!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>client.indices.create([params] [, options] [, callback])</code><br>创建索引, 存储数据之前一般都要先创建一个索引, 之后所有的数据都会存储在这个索引中</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">client.indices.create(&#123;</span><br><span class="line">  <span class="comment">// index_name 就是索引的名字</span></span><br><span class="line">  index: <span class="string">'index_name'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'index success'</span>, res))</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.warn(<span class="string">'index fail'</span>, err))</span><br></pre></td></tr></table></figure></li><li><p><code>client.indices.putMapping([params] [, options] [, callback])</code><br>在有了索引之后, 我们可以创建一个<code>Type</code>, 然后定义<code>Type</code>里面的各自字段的结构和索引信息, 也就是创建<code>Mapping</code>, 和MySQL不同的是在M有SQL里面要先定义好表结构(scheme)然后才能往表里插入数据, 但是在es中我们可以不用先定义<code>Mapping</code>直接就插入数据, es会自动根据数据的类型建立索引, 并且数据字段也可以动态增长, 这是es非常灵活的一点, 但是我仍然先定义<code>Mapping</code>再插入数据, 主要是因为这一步可以定义好各个字段的索引规则</p></li></ul><p>对于一个字段首先指定该字段的<code>type</code>(数据类型), 可以查看<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html" target="_blank" rel="noopener">Mapping</a>里面的可用字段类型, 比较常用的有</p><ul><li><code>text</code>: text 类型数据会被分词器拆分开来检索, 例如<code>我的名字</code>会被拆分成<code>我</code>, <code>我的</code>, <code>名字</code>和<code>我的名字</code>一般用于一段文字内容的检索, 如果不需要分词可以配置<code>index</code>项为<code>false</code>, 但是如果不需要分词的话就推荐使用<code>keyword</code>类型, <code>keyword</code>类型默认就是不进行分词的</li><li><code>keyword</code>: keyword 类型数据不会被拆分, 只能作为整体进行匹配, 例如<code>我的名字</code>就只能搜索<code>我的名字</code>才能搜索到, 一般用于关键词之类的检索</li><li><code>date</code>: 日期类型</li><li><code>long</code>: 长整型数据</li><li><code>double</code>: 浮点数数据</li><li><code>boolean</code>: 布尔值</li><li><code>ip</code>: ip地址</li></ul><p>然后是<code>term_vector</code>(词条向量), 这个配置项代表对该字段的各个term的统计信息, 如果某个词出现的位置和频率等, 具体可以查看这里<a href="https://blog.csdn.net/wangmaohong0717/article/details/80712978" target="_blank" rel="noopener">ElasticSearch之termvector介绍</a></p><p><code>analyzer</code>配置指定该字段使用的分词器, 如果不指定, 那么使用的就是默认分词器(standard analyzer), 我这里安装了对中文分词友好<a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener"><code>elasticsearch-analysis-ik</code></a>插件, 使用的是该插件提供的分词器, ik 提供了<code>ik_max_word</code>和<code>ik_smart</code>两个分词器, 前者会将文本做最细粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合，适合 Term Query; 后者会做最粗粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”，适合 Phrase 查询.</p><p><code>search_analyzer</code>配置搜索时使用的分词器, 默认和<code>analyzer</code>保持一致</p><p>我的博客的<code>Mapping</code>如下<br></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">client.indices.putMapping(&#123;</span><br><span class="line">  index: <span class="string">'blog'</span>,</span><br><span class="line">  type: <span class="string">'article'</span>,</span><br><span class="line">  body: &#123;</span><br><span class="line">    properties: &#123;</span><br><span class="line">      title: &#123;</span><br><span class="line">        type: <span class="string">'text'</span>,</span><br><span class="line">        term_vector: <span class="string">'with_positions_offsets'</span>,</span><br><span class="line">        analyzer: <span class="string">'ik_max_word'</span>,</span><br><span class="line">        search_analyzer: <span class="string">'ik_max_word'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      subtitle: &#123;</span><br><span class="line">        type: <span class="string">'text'</span>,</span><br><span class="line">        term_vector: <span class="string">'with_positions_offsets'</span>,</span><br><span class="line">        analyzer: <span class="string">'ik_max_word'</span>,</span><br><span class="line">        search_analyzer: <span class="string">'ik_max_word'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      content: &#123;</span><br><span class="line">        type: <span class="string">'text'</span>,</span><br><span class="line">        term_vector: <span class="string">'with_positions_offsets'</span>,</span><br><span class="line">        analyzer: <span class="string">'ik_max_word'</span>,</span><br><span class="line">        search_analyzer: <span class="string">'ik_max_word'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      link: &#123;</span><br><span class="line">        type: <span class="string">'keyword'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      author: &#123;</span><br><span class="line">        type: <span class="string">'keyword'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      categories: &#123;</span><br><span class="line">        type: <span class="string">'keyword'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      tags: &#123;</span><br><span class="line">        type: <span class="string">'keyword'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      create_date: &#123;</span><br><span class="line">        type: <span class="string">'date'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      update_date: &#123;</span><br><span class="line">        type: <span class="string">'date'</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><ul><li><p><code>client.index([params] [, options] [, callback])</code><br>像某个<code>Type</code>中插入数据, 这个接口只能一次插入一条数据</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">client.index(&#123;</span><br><span class="line">  <span class="comment">// 要插入到哪个 index 中</span></span><br><span class="line">  index: <span class="string">'blog'</span>,</span><br><span class="line">  <span class="comment">// 要插入到哪个 Type 中</span></span><br><span class="line">  type: <span class="string">'article'</span>,</span><br><span class="line">  <span class="comment">// 本次插入的数据的id, 可以不配置, 默认也会生成一个id</span></span><br><span class="line">  id: <span class="string">'input-event/'</span>,</span><br><span class="line">  <span class="comment">// body 内容就是本次插入的数据的各自字段内容</span></span><br><span class="line">  body: &#123;</span><br><span class="line">    title: <span class="string">'input event'</span>,</span><br><span class="line">    subtitle: <span class="string">'input 元素的事件顺序'</span>,</span><br><span class="line">    author: <span class="string">'kricsleo'</span>,</span><br><span class="line">    tags: [<span class="string">'js'</span>, <span class="string">'h5'</span>],</span><br><span class="line">    categories: [<span class="string">'front-end'</span>],</span><br><span class="line">    content: <span class="string">'如果是组合输入(比如中文日文等)输入的话就会出现括号中组合输入事件, 详细来说是当开始输入中文的时候就会触发`compositionstart`事件, 此时`input`事件和`keyup`事件拿到的输入框的值是不完整的(一般包含你输入的拼音和拼音之间的分号), 当中文输入结束的时候会触发`compositionend`事件, 此时可以取到该输入框的完整的输入中文后的值(一般而言这个值是我们所需要的)'</span>,</span><br><span class="line">    create_date: <span class="string">'2015-12-15T13:05:55Z'</span>,</span><br><span class="line">    update_date: <span class="string">'2015-12-15T13:05:55Z'</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>client.bulk([params] [, options] [, callback])</code><br>如果需要批量操作的话就需要使用<code>bulk</code>接口, 给<code>bulk</code>可以一次传入多种多样的操作, 比如<code>index</code>(新增), <code>update</code>(更新)和<code>delete</code>删除等等</p></li></ul><p>比如我博客生成的json数据里面的一个数组, 每一项都是一篇文章数据, 我需要一次性插入所有文章到es中. 我的做法是每次插入前先清除之前的文章数据, 因为文章里面的内容可能会被更新, 但是博客和es本身是相互独立的, 博客里面是没有记录该文章数据在es中的对应的数据id的, 所以没法去更新es里面的文章数据, 只能先全部清除, 然后再将最新的文章数据全部写入<br></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> es = <span class="built_in">require</span>(<span class="string">'elasticsearch'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> es.Client(&#123;</span><br><span class="line">  host: <span class="string">'your_es_host:port'</span>,</span><br><span class="line">  <span class="comment">// log: 'trace'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// json file path</span></span><br><span class="line"><span class="keyword">const</span> JSON_PATH = <span class="string">'../../public/content.json'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// generate docs by post data</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertPosts2Docs</span>(<span class="params">posts</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> posts.map(<span class="function"><span class="params">post</span> =&gt;</span> (&#123;</span><br><span class="line">    index: <span class="string">'blog'</span>,</span><br><span class="line">    type: <span class="string">'article'</span>,</span><br><span class="line">    id: post.title,</span><br><span class="line">    body: &#123;</span><br><span class="line">      title: post.title,</span><br><span class="line">      subtitle: post.subtitle || post.title,</span><br><span class="line">      link: <span class="string">`/<span class="subst">$&#123;post.path&#125;</span>`</span>,</span><br><span class="line">      content: post.text,</span><br><span class="line">      create_date: post.date,</span><br><span class="line">      update_date: post.updated</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// generate bulk body by post</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildBody</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    body: &#123;</span><br><span class="line">      title: post.title,</span><br><span class="line">      subtitle: post.subtitle || post.title,</span><br><span class="line">      link: <span class="string">`/<span class="subst">$&#123;post.path&#125;</span>`</span>,</span><br><span class="line">      content: post.text,</span><br><span class="line">      create_date: post.date,</span><br><span class="line">      update_date: post.updated</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// generate bulk by index, type, posts</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildBulk</span>(<span class="params">index, type, posts</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> bulk = [];</span><br><span class="line">  posts.forEach(<span class="function"><span class="params">post</span> =&gt;</span> &#123;</span><br><span class="line">    bulk.push(&#123;</span><br><span class="line">      index: &#123;</span><br><span class="line">        _index: index,</span><br><span class="line">        _type: type,</span><br><span class="line">        _id: post.title,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    bulk.push(buildBody(post));</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> bulk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// write json into es</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeJson</span>(<span class="params">jsonPath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> filePath = path.resolve(__dirname, jsonPath);</span><br><span class="line">  fs.readFile(filePath, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">`read file: <span class="subst">$&#123;filePath&#125;</span> failed!`</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> posts = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">    <span class="keyword">const</span> bulk = buildBulk(<span class="string">'blog'</span>, <span class="string">'article'</span>, posts);</span><br><span class="line">    client.bulk(&#123;</span><br><span class="line">      body: bulk</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> errorCount = <span class="number">0</span>;</span><br><span class="line">      res.items.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.index &amp;&amp; item.index.error) &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(<span class="string">`<span class="subst">$&#123;errorCount++&#125;</span> write failed: `</span>, item.index.error);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> total = res.items.length;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`write done: <span class="subst">$&#123;total - errorCount&#125;</span>/<span class="subst">$&#123;total&#125;</span> write successfully!`</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// clear all previous docs</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clearDocs</span>(<span class="params">index, type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> client.deleteByQuery(&#123;</span><br><span class="line">    index,</span><br><span class="line">    type,</span><br><span class="line">    body: &#123;</span><br><span class="line">      query: &#123;</span><br><span class="line">        match_all: &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`delete done: <span class="subst">$&#123;res.deleted&#125;</span>/<span class="subst">$&#123;res.total&#125;</span> delete successfully!`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clearDocs(<span class="string">'blog'</span>, <span class="string">'article'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> writeJson(JSON_PATH))</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(error))</span><br></pre></td></tr></table></figure><p></p><ul><li><code>client.search([params] [, options] [, callback])</code><br>根据 Query DSL 语句查询符合条件的数据</li></ul><p>一个最简单的搜索, 搜索后匹配的数据返回在<code>hits</code>字段中<br></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">client.search(&#123;</span><br><span class="line">  index: <span class="string">'blog'</span>,</span><br><span class="line">  type: <span class="string">'article'</span>,</span><br><span class="line">  q: <span class="string">'中文'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(err))</span><br></pre></td></tr></table></figure><p></p><p>目前我的博客使用的搜索语句参考了屈屈的博客里面的搜索语句</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> generateDSL = <span class="function">(<span class="params">q = <span class="string">''</span>, <span class="keyword">from</span> = <span class="number">0</span>, to = <span class="number">10</span></span>) =&gt;</span> (&#123;</span><br><span class="line">  index: <span class="string">'blog'</span>,</span><br><span class="line">  type: <span class="string">'article'</span>,</span><br><span class="line">  <span class="comment">// 搜索关键词</span></span><br><span class="line">  q,</span><br><span class="line">  <span class="comment">// 搜索条目起始位置</span></span><br><span class="line">  <span class="keyword">from</span>,</span><br><span class="line">  <span class="comment">// 搜索条目终止位置</span></span><br><span class="line">  to,</span><br><span class="line">  body: &#123;</span><br><span class="line">    query: &#123;</span><br><span class="line">      <span class="comment">// 使用 dis_max 会在最后计算文档的相关性算分的时候, 只会取queries中的相关性的最大值</span></span><br><span class="line">      <span class="comment">// 关于 dis_max 可以查看这里 [Elasticsearch的入门使用](https://juejin.im/post/5b9dbe645188255c865e0d0e#heading-84)</span></span><br><span class="line">      dis_max: &#123;</span><br><span class="line">        queries: [</span><br><span class="line">          &#123;</span><br><span class="line">            match: &#123;</span><br><span class="line">              <span class="comment">// 在哪个字段中进行搜索, 这里是 title 字段</span></span><br><span class="line">              title: &#123;</span><br><span class="line">                <span class="comment">// 要搜索的关键词</span></span><br><span class="line">                query: q,</span><br><span class="line">                <span class="comment">// 最小匹配数</span></span><br><span class="line">                minimum_should_match: <span class="string">'50%'</span>,</span><br><span class="line">                <span class="comment">// 设置查询语句的权重, 大于1权重增大, 0到1之间权重逐渐降低。匹配到权重越高的查询语句, 相关性算分越高</span></span><br><span class="line">                boost: <span class="number">4</span>,</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            match: &#123;</span><br><span class="line">              subtitle: &#123;</span><br><span class="line">                query: q,</span><br><span class="line">                minimum_should_match: <span class="string">'50%'</span>,</span><br><span class="line">                boost: <span class="number">4</span>,</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            match: &#123;</span><br><span class="line">              content: &#123;</span><br><span class="line">                query: q,</span><br><span class="line">                minimum_should_match: <span class="string">'75%'</span>,</span><br><span class="line">                boost: <span class="number">4</span>,</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            match: &#123;</span><br><span class="line">              tags: &#123;</span><br><span class="line">                query: q,</span><br><span class="line">                minimum_should_match: <span class="string">'100%'</span>,</span><br><span class="line">                boost: <span class="number">2</span>,</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            match: &#123;</span><br><span class="line">              categories: &#123;</span><br><span class="line">                query: q,</span><br><span class="line">                minimum_should_match: <span class="string">'100%'</span>,</span><br><span class="line">                boost: <span class="number">2</span>,</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 将其他匹配语句的评分也计算在内。将其他匹配语句的评分结果与tie_breaker相乘, 最后与最佳字段的评分求和得出文档的算分。</span></span><br><span class="line">        tie_breaker: <span class="number">0.3</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 会对检索的匹配的结果中，匹配的部分做出高亮的展示, 默认使用标签em包裹</span></span><br><span class="line">    highlight: &#123;</span><br><span class="line">      <span class="comment">// 指定高亮标签前标签</span></span><br><span class="line">      pre_tags: [<span class="string">'&lt;b&gt;'</span>],</span><br><span class="line">      <span class="comment">// 指定高亮标签后标签</span></span><br><span class="line">      post_tags: [<span class="string">'&lt;/b&gt;'</span>],</span><br><span class="line">      fields: &#123;</span><br><span class="line">        <span class="comment">// 返回的匹配结果中会列出title字段(数组)</span></span><br><span class="line">        title: &#123;&#125;,</span><br><span class="line">        <span class="comment">// 返回的匹配结果中会列出content字段(数组)</span></span><br><span class="line">        content: &#123;&#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>client.delete([params] [, options] [, callback])</code><br>删除指定的某条数据, 使用此api删除时必须至少指定<code>index</code>, <code>type</code>和<code>id</code>三个参数, 否则就会删除失败, 也就是说此api只能删除单条数据</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">client.delete(&#123;</span><br><span class="line">  index: <span class="string">'blog'</span>,</span><br><span class="line">  type: <span class="string">'article'</span>,</span><br><span class="line">  id: <span class="string">'data_id'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>client.deleteByQuery([params] [, options] [, callback])</code><br>删除符合条件的数据, 使用此api可以删除多条数据, 只要数据符合 query 的条件即可</li></ul><p>比如我每次同步博客数据的时候都会先删除之前的所有历史博客数据使用的就是这个api</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">client.deleteByQuery(&#123;</span><br><span class="line">  index: <span class="string">'blog'</span>,</span><br><span class="line">  type: <span class="string">'article'</span>,</span><br><span class="line">  body: &#123;</span><br><span class="line">    query: &#123;</span><br><span class="line">      <span class="comment">// 匹配所有文档</span></span><br><span class="line">      match_all: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="elaticsearch与hexo配合"><a href="#elaticsearch与hexo配合" class="headerlink" title="elaticsearch与hexo配合"></a><code>elaticsearch</code>与<code>hexo</code>配合</h2><p>折腾着写了个hexo的插件<a href="https://www.npmjs.com/package/hexo-elasticsearch" target="_blank" rel="noopener"><code>hexo-elasticsearch</code></a>, 在每次重新生成文章的时候都会自动把文章信息同步到自己的es库中, 不过如果真的要做到博客中使用es来进行搜索, 那么你还要做部署es和部署nodejs后端提供查询服务两个部分, 目前来说我就是这样实现的, 关于 es 的部署你可以查看我这篇博客: <a href="/docker">docker学习笔记</a></p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>toLocaleString</title>
      <link href="/toLocalString/"/>
      <url>/toLocalString/</url>
      
        <content type="html"><![CDATA[<h1 id="冷门的toLocaleSring"><a href="#冷门的toLocaleSring" class="headerlink" title="冷门的toLocaleSring"></a>冷门的<code>toLocaleSring</code></h1><p>js 里面除了我们日常使用的api以外, 其实还是有不少大多数人都不知道的很好用的api的, <code>toLocaleString</code>算一个, 也许你在面试题中看到过用正则来实现数字千位用逗号分隔的做法, 但是如果你能直接说出<code>toLocaleString</code>, 应该是出乎面试官的意料的, 而它的用法可不止于此.</p><p><code>toLocaleString</code>方法在<code>Numnber</code>和<code>Date</code>类型上都有部署, 实现的作用都是格式化数字或者日期, 返回格式化后的字符串.</p><a id="more"></a><h2 id="Number-prototype-toLocaleString"><a href="#Number-prototype-toLocaleString" class="headerlink" title="Number.prototype.toLocaleString"></a><code>Number.prototype.toLocaleString</code></h2><p>api: <code>toLocaleString([locales [, options]])</code></p><p><code>locales</code>指定地区, 默认是按照当前电脑环境的语言, 也可以指定不同的语言, 中文是<code>zh</code>, 英文是<code>en</code>, 其它可选项请查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation" target="_blank" rel="noopener">MDN</a>, 不区分大小写.</p><p>例如:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">-2345679.56789</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单纯的数字的格式化在 zh 和 en 是相同的</span></span><br><span class="line">a.toLocalString(); <span class="comment">// =&gt; "-2,345,679.568"</span></span><br><span class="line">a.toLocaleString(<span class="string">'zh'</span>); <span class="comment">// =&gt; "-2,345,679.568"</span></span><br><span class="line">a.toLocaleString(<span class="string">'en'</span>); <span class="comment">// =&gt; "-2,345,679.568"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 日期的格式化就能看出语言差异了</span></span><br><span class="line">b.toLocalString(); <span class="comment">// =&gt; "2019/4/25 上午10:27:15"</span></span><br><span class="line">b.toLocaleString(<span class="string">'zh'</span>); <span class="comment">// =&gt; "2019/4/25 上午10:27:15"</span></span><br><span class="line">b.toLocaleString(<span class="string">'en'</span>); <span class="comment">// =&gt; "4/25/2019, 10:27:15 AM"</span></span><br></pre></td></tr></table></figure><p><code>options</code>参数才是重头戏, 它可以定义更多的配置项, 但是一定要先指定<code>locales</code>参数, 才能使用<code>options</code>参数.</p><p><code>options</code>对象中的<code>style</code>表示格式化时使用的格式, 默认是<code>decimal</code>即纯数字, 另外还有<code>percent</code>百分比和<code>currency</code>货币形式, 需要注意的是如果指定<code>style</code>为<code>currency</code>, 那么必须接着指定<code>currency</code>属性才行, 因为<code>currency</code>没有默认值, 可选值有<code>CNY</code>人民币, <code>USD</code>美元, <code>EUR</code>欧元等, 更多请参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString" target="_blank" rel="noopener">MDN</a></p><p>指定了<code>style</code>为<code>currency</code>之后, 除了<code>currency</code>属性之外, 还有一个<code>currencyDisplay</code>属性可用, 默认值是<code>symbol</code>即货币符号, 另外两个可选值为<code>code</code>代码(如<code>CNY</code>)和<code>name</code>名称(如<code>人民币</code>)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> c = <span class="number">80909.89</span>;</span><br><span class="line">c.toLocaleString(<span class="string">'zh'</span>, &#123;<span class="attr">style</span>: <span class="string">'percent'</span>&#125;); <span class="comment">// =&gt; "8,090,989%" </span></span><br><span class="line">c.toLocaleString(<span class="string">'zh'</span>, &#123;<span class="attr">style</span>: <span class="string">'currency'</span>, <span class="attr">currency</span>: <span class="string">'CNY'</span>&#125;); <span class="comment">// =&gt; "￥80,909.89"</span></span><br><span class="line">c.toLocaleString(<span class="string">'zh'</span>, &#123;<span class="attr">style</span>: <span class="string">'currency'</span>, <span class="attr">currency</span>: <span class="string">'CNY'</span>, <span class="attr">currencyDisplay</span>: <span class="string">'name'</span>&#125;); <span class="comment">// =&gt; "80,909.89 人民币"</span></span><br></pre></td></tr></table></figure><p>接下来是<code>options</code>里面的两组不能同时使用的参数, 一组是<code>minimumIntegerDigits</code>, <code>minimumFractionDigits</code>和<code>maximumFractionDigits</code>, 另一组是<code>minimumSignificantDigits</code>和<code>maximumSignificantDigits</code></p><p>前一组是用来指定数字的最少整数位数, 最少小数位数和最多小数位数, 后一组用来指定最少数字位数和最多数字位数(包括整数和小数一起). 如果指定了后一组参数, 那么前一组参数就会被忽略掉. 指定位数的规则都是按照四舍五入, 是真正的数学上的四舍五入, 而不是像<code>toFixed</code>那样的按照银行家算法的伪四舍五入, 如果位数不足的话就会自动用<code>0</code>补齐. <strong>四舍五入</strong>, <strong>自动补齐</strong>, 想想就知道有多大潜力!</p><p>另外<code>style</code>里面还有一个<code>useGrouping</code>参数, 表示是否使用分组分隔符，如千位分隔符或千/万/亿分隔符, 默认为<code>true</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> d = <span class="number">892839.855</span>;</span><br><span class="line"></span><br><span class="line">d.toLocaleString(<span class="string">'zh'</span>, &#123; <span class="attr">style</span>: <span class="string">'currency'</span>, <span class="attr">currency</span>: <span class="string">'CNY'</span> ,<span class="attr">minimumFractionDigits</span>: <span class="number">2</span>, <span class="attr">maximumFractionDigits</span>:<span class="number">2</span> &#125;); <span class="comment">// =&gt; "￥892,839.86"</span></span><br><span class="line">d.toLocaleString(<span class="string">'zh'</span>, &#123; <span class="attr">style</span>: <span class="string">'currency'</span>, <span class="attr">currency</span>: <span class="string">'CNY'</span> ,<span class="attr">minimumFractionDigits</span>: <span class="number">2</span>, <span class="attr">maximumFractionDigits</span>:<span class="number">2</span>, <span class="attr">useGrouping</span>: <span class="literal">false</span> &#125;); <span class="comment">// =&gt; "￥892839.86"</span></span><br></pre></td></tr></table></figure><p>看看上面的金额格式化的示例, 只需要一行语句多简洁啊, 我之前还专门写了个函数来做金额的格式化显示, 跟这个一比差远了…</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: format money to standard string including prefix, separator and two decimal places</span></span><br><span class="line"><span class="comment"> * @param &#123;number | string&#125; currency</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; prefix prefix the output with the specified string</span></span><br><span class="line"><span class="comment"> * @return: &#123;string&#125; formated currency</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatCurrency</span>(<span class="params">currency = <span class="string">''</span>, prefix = <span class="string">''</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> split = currency.toString().split(<span class="string">'.'</span>);</span><br><span class="line">  <span class="keyword">let</span> integer = split[<span class="number">0</span>] || <span class="string">'0'</span>;</span><br><span class="line">  <span class="keyword">if</span> (integer.startsWith(<span class="string">'¥'</span>)) &#123;</span><br><span class="line">    integer = integer.slice(<span class="number">1</span>, integer.length);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> isNegative = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span>(integer.startsWith(<span class="string">'-'</span>)) &#123;</span><br><span class="line">    isNegative = <span class="literal">true</span>;</span><br><span class="line">    integer = integer.slice(<span class="number">1</span>, integer.length);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> decimal = split[<span class="number">1</span>] || <span class="string">'00'</span>;</span><br><span class="line">  <span class="keyword">let</span> output = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">while</span> (integer.length &gt; <span class="number">3</span>) &#123;</span><br><span class="line">    output = <span class="string">`,<span class="subst">$&#123;integer.slice(<span class="number">-3</span>)&#125;</span><span class="subst">$&#123;output&#125;</span>`</span>;</span><br><span class="line">    integer = integer.slice(<span class="number">0</span>, integer.length - <span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (integer) &#123;</span><br><span class="line">    output = integer + output;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (decimal.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    decimal = decimal + <span class="string">'0'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  output = <span class="string">`<span class="subst">$&#123;isNegative ? <span class="string">'-'</span> : <span class="string">''</span>&#125;</span><span class="subst">$&#123;prefix&#125;</span><span class="subst">$&#123;output&#125;</span>.<span class="subst">$&#123;decimal&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Date-prototype-toLocaleString"><a href="#Date-prototype-toLocaleString" class="headerlink" title="Date.prototype.toLocaleString"></a><code>Date.prototype.toLocaleString</code></h2><p>api: <code>toLocaleString([locales [, options]])</code></p><p><code>locales</code>参数与之前的一致, 也是指定语言, 默认是当前电脑环境语言</p><p><code>options</code>参数就不一样了, 里面的<code>hour12</code>表示使用十二小时制还是二十四小时制, 默认值根据当前环境变化而变化</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> e = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">e.toLocaleString(<span class="string">'zh'</span>, &#123;<span class="attr">hour12</span>: <span class="literal">true</span>&#125;); <span class="comment">// =&gt; "2019/4/25 下午11:07:32"</span></span><br><span class="line">e.toLocaleString(<span class="string">'zh'</span>, &#123;<span class="attr">hour12</span>: <span class="literal">false</span>&#125;); <span class="comment">// =&gt; "2019/4/25 23:07:32"</span></span><br></pre></td></tr></table></figure><p>然后是对年月日星期时分秒时区等的显示格式设置, 参数分别是<code>year</code>, <code>month</code>, <code>day</code>, <code>weekday</code>, <code>hour</code>, <code>minute</code>, <code>second</code>, <code>timeZoneName</code>.</p><p><code>weekday</code>可选值为<code>narrow</code>, <code>short</code>和<code>long</code>, 就是缩写的长度不同, 例如 Wednesday 依次显示为 W , Wed 和 Wednesday<br><code>timeZoneName</code>可选值为<code>short</code>和<code>long</code>, 例如 GMT+8 和 中国标准时间<br>其余的参数可选值为<code>numeric</code>和<code>2-digit</code>, 区别是<code>numeric</code>直接显示, <code>2-digit</code>会固定显示两位数, 例如 7 和 07<br><code>month</code>除了<code>numeric</code>和<code>2-digit</code>外还有<code>narrow</code>, <code>short</code>和<code>long</code>, 额外的这三个其实也是控制缩写的长度(设置<code>locales</code>为<code>en</code>能看出差别)</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString" target="_blank" rel="noopener">Number​.prototype​.toLocale​String()</a><br><a href="https://juejin.im/post/5ac7079f5188255c637b3233" target="_blank" rel="noopener">toLocaleString 了解一下</a></p>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> toLocaleString </tag>
            
            <tag> 国际化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>input-event</title>
      <link href="/input-event/"/>
      <url>/input-event/</url>
      
        <content type="html"><![CDATA[<h1 id="input-元素的事件顺序"><a href="#input-元素的事件顺序" class="headerlink" title="input 元素的事件顺序"></a>input 元素的事件顺序</h1><p>h5 的<code>&lt;input /&gt;</code>组件上有很多的事件, 这次来详细的探究一下它们的触发顺序和使用场景</p><a id="more"></a><p>我的测试是在 chrome 版本 73.0.3683.75（正式版本）（64 位）环境, 其它的浏览器可能有不同, 有时间再补充其它浏览器吧.</p><p>目前来说比较常用的有<code>focus</code>/<code>keydown</code>/<code>input</code>/<code>keyup</code>/<code>compositionstart</code>/<code>compositionupdate</code>/<code>compositionend</code>/<code>change</code></p><p>点击一个输入框开始输入触发的事件顺序依次是:</p><p><code>focus</code>=&gt;<code>keydown</code>(=&gt;<code>compositionstart</code>=&gt;<code>compositionupdate</code>)=&gt;<code>input</code>(=&gt;<code>compositionend</code>)=&gt;<code>keyup</code></p><p>如果是组合输入(比如中文日文等)输入的话就会出现括号中组合输入事件, 详细来说是当开始输入中文的时候就会触发<code>compositionstart</code>事件, 此时<code>input</code>事件和<code>keyup</code>事件拿到的输入框的值是不完整的(一般包含你输入的拼音和拼音之间的分号), 当中文输入结束的时候会触发<code>compositionend</code>事件, 此时可以取到该输入框的完整的输入中文后的值(一般而言这个值是我们所需要的)</p><p>(额外的一点是从<code>input</code>事件开始可以拿到最新输入的值, 前面的事件拿到的值都要落后一次, 少了最后一次输入的字符)</p><p><code>change</code>事件的触发需要<strong>两个条件</strong>, 一是<code>input</code>元素即将失焦, 事件顺序是<code>change</code>=&gt;<code>blur</code>, 二是本次失焦后的内容与前一次失焦后的内容不同(如果相同是不会触发该事件的),</p><p>最常用的场景之一是<code>input</code>用来搜索的时候, 我们的需求是输入变化的时候就去查询(当然有节流), 但是在中文输入的时候就不要查询, 直到中文输入结束之后再查询, 这样可以避免用一些明显无效的关键词如<code>文章n&#39;r</code>去查询, 等到完整中文输入后变成<code>文章内容</code>再去查询</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, minDelay, maxDelay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">let</span> startTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">let</span> curTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    <span class="keyword">if</span> (curTime - startTime &gt;= maxDelay) &#123;</span><br><span class="line">      fn.apply(context, args);</span><br><span class="line">      startTime = curTime;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        fn.apply(context, args);</span><br><span class="line">      &#125;, minDelay);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listenInput</span>(<span class="params">selector, cb, delay = <span class="number">150</span>, maxDelay = <span class="number">1000</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(selector);</span><br><span class="line">  <span class="keyword">if</span>(!el || !cb || <span class="keyword">typeof</span> cb !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> throttleCB = throttle(cb, delay, maxDelay);</span><br><span class="line">  <span class="keyword">let</span> isComposition = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">const</span> compositionstart = <span class="function"><span class="params">()</span> =&gt;</span> isComposition = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">const</span> compositionend = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    isComposition = <span class="literal">false</span>;</span><br><span class="line">    throttleCB(el.value);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> input = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(isComposition) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    throttleCB(el.value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  el.addEventListener(<span class="string">'compositionstart'</span>, compositionstart);</span><br><span class="line">  el.addEventListener(<span class="string">'compositionend'</span>, compositionend);</span><br><span class="line">  el.addEventListener(<span class="string">'input'</span>, input);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    el.removeEventListener(<span class="string">'compositionstart'</span>, compositionstart);</span><br><span class="line">    el.removeEventListener(<span class="string">'compositionend'</span>, compositionend);</span><br><span class="line">    el.removeEventListener(<span class="string">'input'</span>, input);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="comment">// 开始监听, 默认最小间隔时间是150ms, 最大间隔时间是1000ms</span></span><br><span class="line"><span class="keyword">const</span> removeListener = listenInput(<span class="string">'#inputId'</span>, value =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;, <span class="number">100</span>, <span class="number">1500</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消监听</span></span><br><span class="line">removeListener();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> h5 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>translate-you-might-not-need-redux</title>
      <link href="/translate-you-might-not-need-redux/"/>
      <url>/translate-you-might-not-need-redux/</url>
      
        <content type="html"><![CDATA[<h1 id="翻译《You-Might-Not-Need-Redux》"><a href="#翻译《You-Might-Not-Need-Redux》" class="headerlink" title="翻译《You Might Not Need Redux》"></a>翻译《You Might Not Need Redux》</h1><p>闲来无事, 翻译下我挺喜欢的一个程序员 <a href="https://overreacted.io/" target="_blank" rel="noopener">Dan Abromov</a> 的一篇文章<a href="https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367" target="_blank" rel="noopener">《You Might Not Need Redux》</a>, 因为我对于 redux 的用法也还很浅显, 里面也还存在着错误的用法, 多看看别人的一些优秀的工程, 慢慢会有更好的体会吧.</p><p>以下为翻译.</p><a id="more"></a><h2 id="你也许并不需要-Redux"><a href="#你也许并不需要-Redux" class="headerlink" title="你也许并不需要 Redux"></a>你也许并不需要 Redux</h2><p>许多人经常在他们真的需要 Redux 之前就在项目中引入了它. “如果我的应用因为缺少了它而无法满足后续的扩展怎么办?”, 但是在之后, 开发者又会对 Redux 给代码带来的迂回逻辑感到不满. “为什么我需要新建三个文件才能完成一个小小的功能?到底为什么?”</p><p>当人们遇到一些困难时会去抱怨 Redux, React, 函数式编程, 不可变数据和很多其他的事, 我也能理解他们. 把 Redux 和其它不需要”样板化”代码来更新应用状态的方式做比较然后得出 Redux 就是很繁琐的结论是很正常的事. 在某些方面来说确实如此, 设计的初衷就是这样.</p><p>Redux 提供了一些取舍. 它要求你:</p><ul><li><p>把应用的状态描述为普通对象和数组.</p></li><li><p>把应用中发生的变化描述为普通对象.</p></li><li><p>把应用变化的处理逻辑描述为纯函数.</p></li></ul><p>不论你是否在使用 React 构建一个应用, 上面的那些限制条件都不是必要的. 进一步来说这些限制条件是非常严格的, 在你把他们使用到应用中的哪怕一部分的时候都应该考虑清楚.</p><p>你是否有足够充足的理由去这样做?</p><p>这些限制条件对我来说是非常有吸引力的, 因为它们能帮助建立一个有着如下特性的应用:</p><ul><li><p>把应用的状态保存到本地存储中, 然后开箱即用</p></li><li><p>在服务端就把状态填充好, 然后把它在 HTML 中发送给客户端, 然后开箱即用</p></li><li><p>序列化用户操作并将其与状态快照一起附加到自动错误报告中，以便产品开发人员可以重播它们以重现错误</p></li><li><p>通过网络传递操作对象以实现协作环境，而不会对代码的编写方式进行重大更改</p></li><li><p>保留撤消历史记录或进行乐观突变，而不会对代码的编写方式进行重大更改</p></li><li><p>开发时在应用状态历史里实现时间旅行, 当代码变更时可以从历史变更记录里面重新计算出当前的的应用状态, 参考<a href="https://github.com/reduxjs/redux-devtools" target="_blank" rel="noopener">Redux DevTools</a></p></li><li><p>为开发者工具提供全面的检查和控制能力来让产品开发者们能够为他们的应用开发自定义的工具</p></li><li><p>在重用业务逻辑的同时提供换肤功能</p></li></ul><p>如果你正在开发一些可扩展的终端, JavaScript调试器或者其它的一些网页应用的话, 这是值得你去尝试一下的, 哪怕只是采用其中一部分的想法(顺带一说, 这些想法一直都存在)</p><p>然而, 如果你是刚开始学习 React 的初学者, 那么不要把 Redux 作为你的第一选择.</p><p>你要做的应该是按照 React 的思想去思考. 当你真的需要 Redux 或者你想尝试一些新鲜的东西时再来使用 Redux 吧. 但是在使用的时候要格外注意一些, 就像你使用其它带着强烈的主观意识的工具一样.</p><p>如果按照” Redux 的方式”的方式写代码让你感到很有压力, 那么这也许是在提醒你或者你的同事们把它看的太过重要了. 它毕竟只是你的工具箱中的其中一个工具而已, 一个略带疯狂的实验.</p><p>最后, 不要忘了你可以在不使用 Redux 的情况下采纳它提供的一些想法. 例如, 一个有着本地状态的 React 组件:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">value</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">  increment = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123;</span><br><span class="line">      value: prevState.value + <span class="number">1</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  decrement = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123;</span><br><span class="line">      value: prevState.value - <span class="number">1</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.state.value&#125;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.increment&#125;&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.decrement&#125;&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>这样就很完美了. 我是认真的, 它是经得起考验的.</p><p><strong>本地状态就足够了</strong></p><p>Redux提供的取舍方案是为了提供一种把”发生了什么”和”状态是如何变化的”解耦的间接解决方案</p><p>这种解耦始终都是正确的吗?并不是, 它是一种取舍.</p><p>比如说, 我们能够用如下方式把一个 reducer 从我们的组件中分离出去:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = <span class="function">(<span class="params">state = &#123; value: <span class="number">0</span> &#125;, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'INCREMENT'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">value</span>: state.value + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'DECREMENT'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">value</span>: state.value - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = counter(<span class="literal">undefined</span>, &#123;&#125;);</span><br><span class="line">  </span><br><span class="line">  dispatch(action) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> counter(prevState, action));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  increment = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.dispatch(&#123; <span class="attr">type</span>: <span class="string">'INCREMENT'</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  decrement = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.dispatch(&#123; <span class="attr">type</span>: <span class="string">'DECREMENT'</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.state.value&#125;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.increment&#125;&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.decrement&#125;&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>注意我们刚刚在上面的代码中做到了不使用<code>npm install</code>就能够使用 Redux. 哇哦!</p><p>你应该把这种做法使用到你的有状态的组件中吗? 大部分情况下不会的, 除非你计划能够从这种比较曲折的做法中获得收益. 在如今的开发中, 制定计划是很关键的事.</p><p>Redux 库本身只是一系列的工具, 能够帮助挂载 reducers 到一个单一的全局存储对象. 用多用少都随你意</p><p>但是如果你舍弃了某些东西, 请确保你能获取对应的回报.</p>]]></content>
      
      
      <categories>
          
          <category> translation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>web-load-performance</title>
      <link href="/web-load-performance/"/>
      <url>/web-load-performance/</url>
      
        <content type="html"><![CDATA[<h1 id="浏览器网页加载性能优化"><a href="#浏览器网页加载性能优化" class="headerlink" title="浏览器网页加载性能优化"></a>浏览器网页加载性能优化</h1><p>如何让一个页面加载的更快真是一个亘古不变的话题, 一般来说最主要的衡量点是首屏的展示时间, 或者说是页面从空白到有内容展示这中间的时间间隔, 前前后后研究了很多文章和做法, 其中最核心的一点是要弄清楚<code>html</code>, <code>css</code>和<code>js</code>是如何联合起来影响一个页面最终的呈现过程的.</p><a id="more"></a><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>相关的文章实在汗牛充栋, 这里记录一下一些写的不错的.</p><ul><li><a href="https://segmentfault.com/a/1190000015145466" target="_blank" rel="noopener">网页加载性能优化方法研究</a></li><li><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/analyzing-crp?hl=zh-cn" target="_blank" rel="noopener">分析关键渲染路径性能</a>, 这是 google 的开发者给出一个文章系列, 写的非常好, 强烈建议把这个系列看完</li></ul>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> optimize </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>toFixed</title>
      <link href="/toFixed/"/>
      <url>/toFixed/</url>
      
        <content type="html"><![CDATA[<h1 id="JS-中的-toFixed精度问题"><a href="#JS-中的-toFixed精度问题" class="headerlink" title="JS 中的 toFixed精度问题"></a>JS 中的 <code>toFixed</code>精度问题</h1><p>在关于金额的计算中经常会出现精确到两位小数的情况, 然后如果直接使用js的<code>number.toFixed()</code>方法其实会导致意想不到的问题, 比如你可以猜一下下面表达式的执行结果</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line"></span><br><span class="line">(<span class="number">1.555</span>).toFixed(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><p>第一个表达式结算结果是<code>0.30000000000000004</code>, 第二个表达式结果是<code>&quot;1.55&quot;</code>, 其实这是 js 的浮点数存储方式导致的, 具体的可以看github上的一个讨论:<a href="https://github.com/camsong/blog/issues/9" target="_blank" rel="noopener">JavaScript 浮点数陷阱及解法</a>, 简单来说就是 js 里面对于小数的存储是不精确的, 所以在涉及到小数的运算的时候就有可能因为精度问题出现意想不到的计算结果. 如果是一般的运算的话可以使用这个库来解决这个问题<a href="https://github.com/nefe/number-precision" target="_blank" rel="noopener">nefe/number-precision</a>.</p><p>关于<code>toFixed()</code>方式的说明在<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed" target="_blank" rel="noopener">MDN</a>上说是采取的<strong>四舍五入</strong>的规则, 但是实际测试并非如此, 比如你可以猜一下下面表达式的执行结果:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="number">1.15</span>).toFixed(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">(<span class="number">1.151</span>).toFixed(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">(<span class="number">1.25</span>).toFixed(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>这三个表达式的执行结果分别是<code>&quot;1.1&quot;</code>, <code>&quot;1.2&quot;</code>和<code>&quot;1.3&quot;</code>, 按照四舍五入根本说不通, 其实<code>toFixed()</code>真正的规则是<strong>银行家舍入算法</strong></p><h2 id="银行家舍入算法"><a href="#银行家舍入算法" class="headerlink" title="银行家舍入算法"></a>银行家舍入算法</h2><p>银行家舍入算法规则是<strong>四舍六入五考虑, 五后非零就进一, 五后为零看奇偶, 五前为偶应舍去, 五前为奇要进一</strong>, 之所以制定出这一套规则是因为在银行金额的计算中为了尽可能少的避免损失, 因为金额的舍去和进位总体来说要保持大致相同的概率, 这样最后计算出来的帐才会不盈不亏, 具体讨论可以看这里: <a href="https://blog.csdn.net/MAOZEXIJR/article/details/78563531" target="_blank" rel="noopener">为什么银行家舍入是合理的？</a>和<a href="https://www.zhihu.com/question/24580446" target="_blank" rel="noopener">知乎的讨论</a></p><p><strong>我不知道是不是chrome更新了的原因, 前几天刚测过的银行家算法来解释<code>toFixed()</code>是可以解释的通的, 但是写这篇笔记的时候我再次测试却又发现与之前的测试结果不一致了, 现在怎么都解释不通了</strong></p><p>例如, 按照银行家算法, <code>(1.555).toFixed(2)</code>的结果应该是<code>&quot;1.56&quot;</code>, 但是今天的执行结果变成了<code>&quot;1.55</code>, 虽然满足了<strong>五前为奇</strong>但是却并没有<strong>进一</strong>, WTF???</p><h2 id="如何修复toFixed-的舍入问题"><a href="#如何修复toFixed-的舍入问题" class="headerlink" title="如何修复toFixed()的舍入问题"></a>如何修复<code>toFixed()</code>的舍入问题</h2><p>不论怎样, 当日常编程中使用<code>toFixed()</code>碰到舍入的时候我们总希望能够按照我们所期望的真正的四舍五入那样返回结果, 所以只能手动的实现<code>toFixed()</code>方法.</p><p>我下面只是随便实现的一个, 把原数先放大一定倍数, 然后利用<code>Math.round()</code>来做真正的四舍五入, 最后然后再缩小相同倍数, 这样处理一次之后就能排除特殊的<strong>五后</strong>的情况, 然后就可以使用<code>Number.toFixed()</code>方法得到理想中的四舍五入后的值, 简单的写了几个测试, 也许有特例是我没有覆盖到的?</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toFixed</span>(<span class="params">value, digits</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> multiple = <span class="built_in">Math</span>.pow(<span class="number">10</span>, digits);</span><br><span class="line">  <span class="keyword">const</span> magnified = value * multiple;</span><br><span class="line">  <span class="keyword">const</span> roundedMagnified = <span class="built_in">Math</span>.round(magnified);</span><br><span class="line">  <span class="keyword">return</span> ( roundedMagnified / multiple ).toFixed(digits);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">describe, fn</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.group(describe);</span><br><span class="line">  <span class="keyword">typeof</span> fn === <span class="string">'function'</span> &amp;&amp; fn();</span><br><span class="line">  <span class="built_in">console</span>.groupEnd();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Expect = <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.result = result;</span><br><span class="line">  <span class="keyword">this</span>.tobe = <span class="function"><span class="params">expectResult</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(result === expectResult) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'passed'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">`failed: expect <span class="subst">$&#123;result&#125;</span> to be equal to <span class="subst">$&#123;expectResult&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">expect</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Expect(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line">test(<span class="string">'test toFixed'</span>, () =&gt; &#123;</span><br><span class="line">  expect(toFixed(<span class="number">1.55</span>, <span class="number">1</span>)).tobe(<span class="string">'1.6'</span>);</span><br><span class="line">  expect(toFixed(<span class="number">1.45</span>, <span class="number">1</span>)).tobe(<span class="string">'1.5'</span>);</span><br><span class="line">  expect(toFixed(<span class="number">1.550</span>, <span class="number">1</span>)).tobe(<span class="string">'1.6'</span>);</span><br><span class="line">  expect(toFixed(<span class="number">1.551</span>, <span class="number">1</span>)).tobe(<span class="string">'1.6'</span>);</span><br><span class="line">  expect(toFixed(<span class="number">1.552</span>, <span class="number">1</span>)).tobe(<span class="string">'1.6'</span>);</span><br><span class="line">  expect(toFixed(<span class="number">1.450</span>, <span class="number">1</span>)).tobe(<span class="string">'1.5'</span>);</span><br><span class="line">  expect(toFixed(<span class="number">1.451</span>, <span class="number">1</span>)).tobe(<span class="string">'1.5'</span>);</span><br><span class="line">  expect(toFixed(<span class="number">1.452</span>, <span class="number">1</span>)).tobe(<span class="string">'1.5'</span>);</span><br><span class="line"></span><br><span class="line">  expect(toFixed(<span class="number">1.55</span>, <span class="number">2</span>)).tobe(<span class="string">'1.55'</span>);</span><br><span class="line">  expect(toFixed(<span class="number">1.45</span>, <span class="number">2</span>)).tobe(<span class="string">'1.45'</span>);</span><br><span class="line">  expect(toFixed(<span class="number">1.550</span>, <span class="number">2</span>)).tobe(<span class="string">'1.55'</span>);</span><br><span class="line">  expect(toFixed(<span class="number">1.551</span>, <span class="number">2</span>)).tobe(<span class="string">'1.55'</span>);</span><br><span class="line">  expect(toFixed(<span class="number">1.552</span>, <span class="number">2</span>)).tobe(<span class="string">'1.55'</span>);</span><br><span class="line">  expect(toFixed(<span class="number">1.450</span>, <span class="number">2</span>)).tobe(<span class="string">'1.45'</span>);</span><br><span class="line">  expect(toFixed(<span class="number">1.451</span>, <span class="number">2</span>)).tobe(<span class="string">'1.45'</span>);</span><br><span class="line">  expect(toFixed(<span class="number">1.452</span>, <span class="number">2</span>)).tobe(<span class="string">'1.45'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js怪异事件录 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>constraint-validation</title>
      <link href="/constraint-validation/"/>
      <url>/constraint-validation/</url>
      
        <content type="html"><![CDATA[<h1 id="h5-原生表单校验api"><a href="#h5-原生表单校验api" class="headerlink" title="h5 原生表单校验api"></a>h5 原生表单校验api</h1><p>我们通常会对表单的 input 的做各种各样的校验, 比如长度, 大小, 格式等等, 其实在h5中为了方便这些校验原生就有不少的校验类型和方式, 只不过错误提示的样式由于各个浏览器不太一样, 而且无法自定义, 产品和设计一般都不会认可这样的表现, 所以目前还是比较少用到浏览器原生的校验, 不过了解一下还有没有坏处的.<br><a id="more"></a></p><p>这里我放一篇对 h5 原生的校验描述的比较不错的文章<a href="http://www.imooc.com/article/15355" target="_blank" rel="noopener">HTML5利用约束验证API来检查表单的输入数据</a></p><p>另外可以看一下 MDN 的资料<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5/Constraint_validation" target="_blank" rel="noopener">约束验证</a>, 目前可用的校验方式有: pattern, min, max, required, step, maxlength</p><p>input 目前支持的类型有传统的10种, 加上 h5 中新增的13种, 一共是23种.</p><p>传统的10种<br>| type | description |<br>| —- | —- |<br>| <code>text</code> | 文本 |<br>| <code>password</code> | 密码, 输入字符会被以*隐藏 |<br>| <code>file</code> | 点击上传文件 |<br>| <code>radio</code> | 单选 |<br>| <code>checkbox</code> | 多选 |<br>| <code>hidden</code> | 隐藏的字段 |<br>| <code>button</code> | 按钮 |<br>| <code>image</code> | 图像形式的提交按钮 |<br>| <code>image</code> | 文本 |<br>| <code>reset</code> | 重置表单输入框 |<br>| <code>submit</code> | 提交表单 |</p><p>h5 新增的13种<br>| type | description |<br>| —- | —- |<br>| <code>number</code> | 数字输入 |<br>| <code>tel</code> | 电话号码 |<br>| <code>email</code> | 邮件地址 |<br>| <code>url</code> | url |<br>| <code>range</code> | 一定范围的数字, 滑动选择形式 |<br>| <code>color</code> | 点击弹出颜色选择框 |<br>| <code>search</code> | 语义化, 表示搜索, 与 text 表现一直 |<br>| <code>date</code> | 选择年-月-日 |<br>| <code>month</code> | 选择年-月 |<br>| <code>week</code> | 选择年-周 |<br>| <code>time</code> | 选择时-分 |<br>| <code>datetime</code> | 选择年-月-日-时-分 UTC时间 |<br>| <code>datetimelocal</code> | 选择年-月-日-时-分 本地时间 |</p>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> h5 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BFC</title>
      <link href="/BFC/"/>
      <url>/BFC/</url>
      
        <content type="html"><![CDATA[<h1 id="BFC-BLOCK-FORMATTING-CONTEXT"><a href="#BFC-BLOCK-FORMATTING-CONTEXT" class="headerlink" title="BFC (BLOCK FORMATTING CONTEXT)"></a>BFC (BLOCK FORMATTING CONTEXT)</h1><p>关于 BFC (BLOCK FORMATTING CONTEXT: 块格式化上下文)这个专有名词可能听得不多, 但是在实际的页面布局中实际上却是会经常碰到的, 只是没有特意去注意这个现象而已, 这里记录一下它是如何影响我们的布局的.<br><a id="more"></a></p><h2 id="BFC-解释"><a href="#BFC-解释" class="headerlink" title="BFC 解释"></a>BFC 解释</h2><blockquote><p>9.4.1 Block formatting contexts<br>Floats, absolutely positioned elements, block containers (such as inline-blocks, table-cells, and table-captions) that are not block boxes, and block boxes with ‘overflow’ other than ‘visible’ (except when that value has been propagated to the viewport) establish new block formatting contexts for their contents.</p><p>In a block formatting context, boxes are laid out one after the other, vertically, beginning at the top of a containing block. The vertical distance between two sibling boxes is determined by the <a href="https://www.w3.org/TR/CSS2/box.html#propdef-margin" target="_blank" rel="noopener">‘margin’</a> properties. Vertical margins between adjacent block-level boxes in a block formatting context <a href="https://www.w3.org/TR/CSS2/box.html#collapsing-margins" target="_blank" rel="noopener">collapse</a>.</p><p>In a block formatting context, each box’s left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch). This is true even in the presence of floats (although a box’s line boxes may shrink due to the floats), unless the box establishes a new block formatting context (in which case the box itself <a href="https://www.w3.org/TR/CSS2/visuren.html#bfc-next-to-float" target="_blank" rel="noopener">may become narrower</a> due to the floats).</p><p>For information about page breaks in paged media, please consult the section on <a href="https://www.w3.org/TR/CSS2/page.html#allowed-page-breaks" target="_blank" rel="noopener">allowed page breaks</a>.</p><p>by - <a href="https://www.w3.org/TR/CSS2/visuren.html#block-formatting" target="_blank" rel="noopener">w3c: 9.4.1 Block formatting contexts</a></p></blockquote><h3 id="创建一个-BFC"><a href="#创建一个-BFC" class="headerlink" title="创建一个 BFC"></a>创建一个 BFC</h3><p>第一段在描述如何创建一个 BFC, 目前<a href="https://juejin.im/post/5b704f18e51d4566612667c2" target="_blank" rel="noopener">根据总结</a>有如下14种方法(别担心, 实际我们常用的并没有那么多)可以使得一个区域变成一个 BFC:</p><blockquote><ol><li>根元素或包含根元素的元素，这里我理解为body元素</li><li>浮动元素（元素的float不是none）</li><li>overflow值不为visible的块元素</li><li>绝对定位元素（元素的position为absolute或fixed）</li><li>行内块元素（元素的display为inline-block）</li><li>弹性元素（display为flex或inline-flex元素的直接子元素）</li><li>网格元素（display为grid或inline-grip元素的直接子元素）</li><li>表格单元格（元素的display为table-cell，html表格单元格默认为该值）</li><li>表格标题（元素的display为table-caption，html表格标题默认为该值）</li><li>匿名表格单元格元素（元素的display为table、table-row、table-row-group、table-header-group、table-footer-group（分别是html table、row、tbody、thead、tfoot的默认属性）或inline-table）</li><li>display值为flow-root的元素</li><li>contain值为layout、content或strict的元素</li><li>多列容器（元素的column-count或column-width不为auto，包括column-count为1）</li><li>column-span为all的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中</li></ol></blockquote><p>其中前六点是我们目前比较常碰到的情况, 尤其是第一点很容易忽略</p><h3 id="Margin-Collapse"><a href="#Margin-Collapse" class="headerlink" title="Margin Collapse"></a>Margin Collapse</h3><p>第二段在描述在一个 BFC 内部的子元素在垂直方向上会从顶部开始按照自上而下的顺序排布, 两个子元素 box 之间的距离由 margin 决定, <strong>相邻(含义见下面)</strong>的 box 之间的 margin (margin-bottom和margin-bottom) 会发生<strong>折叠[margin collapse]</strong>现象, <strong>折叠</strong>具体表现为如下三点:</p><ol><li>如果二者的 margin 都是正数或者负数, 那么最后二者之间的距离是二者中绝对值大的那一个</li><li>如果一个为正, 另一个为负, 那么最后二者之间的距离是二者相加的和</li></ol><p>同时要注意这样的折叠是有条件的, 除了满足上面说的要在同一个 BFC 中的相邻子元素之间, 还有如下条件:</p><ol><li>在定位规则为正常文档流中的块级盒(非float, 非绝对定位), 且在同一 BFC</li><li>是垂直方向上的 margin</li><li>两 margin 相邻, 中间无任何间隔包括包含 padding, boarder, line-box, clearance(clear属性), 意味着会发生折叠的两个 margin 是直接接触的, 没有被任何东西隔开</li></ol><p><strong>相邻</strong>的情况是指如下两种:</p><ol><li>兄弟: 两个子元素之间的 margin-bottom 和 margin-top</li><li>父子: 父容器的 margin-top 和第一个子元素的 margin-top之间, 父容器的 margin-bottom 和 最后一个子元素的 margin-bottom 之间</li></ol><h3 id="水平排布"><a href="#水平排布" class="headerlink" title="水平排布"></a>水平排布</h3><p>第三段内容简单一点, 是说在 BFC 内部的子元素的左边距会与 BFC 容器的左边对齐(从右到左布局的话那么就对齐到右边)(我目前没有发现用途).</p><h3 id="避免高度坍塌"><a href="#避免高度坍塌" class="headerlink" title="避免高度坍塌"></a>避免高度坍塌</h3><p>BFC 的另外一个特点就是可以避免父容器的高度坍塌, 在 float 布局中如果子元素浮动了, 那么父元素的高度在计算的时候就不会计算子元素的高度(父元素的宽度仍然会计算浮动子元素的宽度), 那么很容易出现父元素高度不高, 导致子元素在视觉上出现在父元素外面的情况, 而 BFC 的一个特点就是会包納内部的浮动元素, 所以如果使用<code>overflow: auto</code>或者其它的方式使得父容器变为一个 BFC 容器的话, 那么父元素就会包含浮动的子元素了, 也就不会出现高度坍塌了.</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://juejin.im/post/5b704f18e51d4566612667c2" target="_blank" rel="noopener">https://juejin.im/post/5b704f18e51d4566612667c2</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES6-map-set-symbol</title>
      <link href="/ES6-map-set-symbol/"/>
      <url>/ES6-map-set-symbol/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6中新的数据类型"><a href="#ES6中新的数据类型" class="headerlink" title="ES6中新的数据类型"></a>ES6中新的数据类型</h1><p>在ES6里面引入了一些新的数据类型, 包括 <code>Map</code> / <code>Set</code> / <code>Symbol</code> 等等, 这里了解一下他们的用法和使用场景.<br><a id="more"></a></p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a><code>Map</code></h2><p>我们之前存储键值对形式的数据使用的都是<code>{}</code>这样的<code>Object</code>对象, 但是很大的一个确定是键只能使用字符串, 即使传入的不是字符串内容, 内部也会将传入的值转换为字符串类型来存储, ES6中推出的<code>Map</code>可以解决这个局限性, <code>Map</code>中存储的键和值都可以是任意的类型, 是一种更完善的 Hash 结构实现.</p><h3 id="Map相关API"><a href="#Map相关API" class="headerlink" title="Map相关API"></a><code>Map</code>相关API</h3><ol><li><code>new Map()</code>构造函数</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者我们也可以传入数组作为构造函数的参数来生成一个 Map</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">'name'</span>, <span class="string">'krics'</span>],</span><br><span class="line">  [<span class="string">'gender'</span>, <span class="string">'male'</span>]</span><br><span class="line">]); <span class="comment">// =&gt; &#123;"name" =&gt; "krics", "gender" =&gt; "male"&#125;</span></span><br></pre></td></tr></table></figure><p>关于传入数组作为构造函数的参数然后生成 Map 时所发生的事情可以按照如下过程理解, 实际上会循环数组本身, 然后对每个子元素取出它的第一个值作为key, 第二个值作为value, 赋值到空的 Map 中, 注意是只会用到子元素的前两个值, 如果子元素中有更多的值, 那么并不会被赋值到 Map 中, 会被忽略掉.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  [<span class="string">'name'</span>, <span class="string">'krics'</span>],</span><br><span class="line">  [<span class="string">'gender'</span>, <span class="string">'male'</span>]</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> b.set(key, value));</span><br></pre></td></tr></table></figure><p>除了数组之外, 任何具有 Iterator 接口、且每个成员都是多个元素的数组的数据结构的都可以作为 Map 构造函数的参数. 例如使用 Set 类型数据作为参数:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([</span><br><span class="line">  [<span class="string">'name'</span>, <span class="string">'krics'</span>],</span><br><span class="line">  [<span class="string">'gender'</span>, <span class="string">'male'</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="built_in">Map</span>(set); <span class="comment">// =&gt; &#123;"name" =&gt; "krics", "gender" =&gt; "male"&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>Map.set(key, value)</code>添加值<br>参数<code>key</code>和<code>value</code>都可以是任意类型的, 并且执行后会返回当前<code>Map</code>对象, 所以可以链式调用<code>Map.set(key1, value1).set(key2, value2)</code>.<br><code>key</code>实际是和内存地址绑定的, 也就是说<code>Map.set({}, 1).set({}, 2)</code>会添加两个键值对到对象中, 因为两次使用的<code>{}</code>都会有各自的地址, 不是同一个对象, 如果对同一个键多次赋值, 最后一次会覆盖之前的值.<br>对于键值是否相同的判断可以大致理解为<code>===</code>判断, 唯一不同的是<code>===</code>认为<code>NaN</code>和<code>NaN</code>不等, 但是在<code>Map</code>中会被认为相同, 作为同一个键.</li><li><code>Map.get(key)</code>取值<br>返回对应的值, 如果<code>Map</code>对象中没有这个键, 则返回<code>undefined</code></li><li><code>Map.has(key)</code>判断是否有该键<br>有则返回<code>true</code>否则返回<code>false</code></li><li><code>Map.delete(key)</code>删除某个键值对<br>删除成功返回<code>true</code>否则返回<code>false</code></li><li><code>Map.clear()</code>清除所有的键值对<br>清除所有的键值对, 没有返回值</li><li><p><code>Map.size</code>当前键值对的数量<br>返回当前<code>Map</code>对象中的键值对数量</p></li><li><p>遍历<code>Map</code></p><ul><li><code>Map.keys()</code> 返回键名的遍历器</li><li><code>Map.values()</code> 返回键值的遍历器</li><li><code>Map.entries()</code> 返回所有成员的遍历器</li><li><code>Map.forEach()</code> 遍历 Map 的所有成员</li></ul><p>需要特别注意的是，Map 的遍历顺序就是插入顺序.</p></li></ol><h3 id="Map与其他数据类型的转换"><a href="#Map与其他数据类型的转换" class="headerlink" title="Map与其他数据类型的转换"></a><code>Map</code>与其他数据类型的转换</h3><p><code>Map</code>转为数组, 由于扩展运算符(<code>...</code>)底层实际调用的是数据结构的<code>Iterator</code>接口,因此只要具有<code>Iterator</code>接口的对象，都可以使用扩展运算符, <code>Map</code>也不例外.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里先使用一个数组生成了一个 map, 最后又使用生成的 map 转换得到了原来的数组</span></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">'name'</span>, <span class="string">'krics'</span>],</span><br><span class="line">  [<span class="string">'gender'</span>, <span class="string">'male'</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [...d]; <span class="comment">// =&gt; [ ["name", "krics"], ["gender", "male"] ]</span></span><br></pre></td></tr></table></figure><h3 id="弱化的WeakMap"><a href="#弱化的WeakMap" class="headerlink" title="弱化的WeakMap"></a>弱化的<code>WeakMap</code></h3><p><code>WeakMap</code>和<code>Map</code>的结构与用法基本相似, 不过存在一些比较重要的区别.</p><ul><li><code>WeakMap</code>只接受对象作为键名（<code>null</code>除外），不接受其他类型的值作为键名</li><li><code>WeakMap</code>不能遍历, 也就是没有<code>keys()</code>, <code>values()</code>, <code>entries()</code>方法, 并且也没有<code>size</code>属性和<code>clear()</code>方法, 它保留的只有四个方法<code>set()</code>, <code>get()</code>, <code>has()</code>和<code>delete()</code></li></ul><p>之所以特意设计<code>WeakMap</code>这个类型, 实际是为了解决浏览器的内存释放问题, 浏览器内存的垃圾回收机制中其中一种叫<code>引用计数法</code>, 当一个对象的被引用次数大于等于1的时候, 浏览器是不会去清除回收这个对象的, 在老旧的IE中经常出现代码中引用了某个<code>DOM</code>元素, 但是由于当时的底层机制, 这个引用无法被清除, 导致<code>DOM</code>对象一直留存在内存中, 最后可能就会拖垮浏览器(现代的浏览器不会这样了), 所以考虑到有时候我们并不需要一个对象一直被引用导致内存空间无法被回收, 然后设计了<code>WeakMap</code>这个类型.</p><p><code>WeakMap</code>中的键名所引用的对象是不会被<code>引用计数法</code>算作是引用的, 也就是说在内存回收的时候, 如果别的地方都没有使用这个对象了, 即使在<code>WeakMap</code>中有键名是在引用这个对象的, 那么浏览器也还是会回收这个对象, 释放掉它占用的内存. 需要注意的是这个弱化的过程只是弱化了键名的引用, 键值如果引用了某个对象, 那个对象是会被算做引用<code>+1</code>的.</p><p>一旦键名引用的对象被回收掉了, 那么<code>WeakMap</code>中对应的这一项也会被自动清除, 不需要我们手动<code>delete()</code>删除这一项. 一个典型应用场景是，在网页的<code>DOM</code>元素上添加数据，就可以使用<code>WeakMap</code>结构。当该<code>DOM</code>元素被清除，其所对应的<code>WeakMap</code>记录就会自动被移除. 更详细的例子可以查看<a href="http://es6.ruanyifeng.com/#docs/set-map" target="_blank" rel="noopener">这里</a>.</p><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a><code>Set</code></h2><p>ES6 为了改善之前一直使用<code>{}</code>来创建键值对形式的数据而新增了<code>Map</code>, 同样为了改善数组形式数据的使用而新增了<code>Set</code>, <code>Set</code>类似于数组, 但是其中的值都是唯一的, 不存在重复.(不会重复这一点可以用来去重或者交集并集等等)</p><h3 id="Set相关API"><a href="#Set相关API" class="headerlink" title="Set相关API"></a><code>Set</code>相关API</h3><ol><li><code>Set</code>本身是一个构造函数, 参数可以是数组或者其它有<code>iterable</code>接口的数据. 例如:</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>]); <span class="comment">// a =&gt; 1, 2, 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="string">'aabaa'</span>); <span class="comment">// c =&gt; a, b</span></span><br></pre></td></tr></table></figure><p><code>Array.from()</code>可以把<code>Set</code>转为普通数据.</p><ol start="2"><li>其它api</li></ol><p>2.1 <code>add()</code>: 添加数据<br>2.2 <code>delete()</code>: 删除数据<br>2.3 <code>clear()</code>: 删除所有数据<br>2.4 <code>has()</code>: 判断是否有某个数据<br>2.5 <code>size</code>: 返回数据数目<br>2.6 <code>keys()</code>: 遍历键(与值实际相等)<br>2.7 <code>values()</code>: 遍历值<br>2.8 <code>entries()</code> 遍历键值对(键与值相等)<br>2.9 <code>forEach()</code>: 遍历值</p><h3 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a><code>WeakSet</code></h3><p>ES6 同样也为<code>Set</code>提供了<code>WeakSet</code>类型, 与<code>WeakMap</code>十分相似, <code>WeakSet</code>中的值只能是对象, 不能是其他类型的值, 同样也是不计算引用次数的. 使用时可以用<code>new WeakSet()</code>来构建, 其他api与<code>Set</code>一致, 不过出于跟<code>WeakMap</code>相同的原因, 也是不能遍历的.</p>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Proxy</title>
      <link href="/Proxy/"/>
      <url>/Proxy/</url>
      
        <content type="html"><![CDATA[<h1 id="拥抱ES6中的新API–Proxy"><a href="#拥抱ES6中的新API–Proxy" class="headerlink" title="拥抱ES6中的新API–Proxy"></a>拥抱ES6中的新API–Proxy</h1><p>ES6带来了很多新的方便易用的API, Proxy(代理)就是其中之一, 意思可以理解为对象的代理, 实际上是一个构造函数, 通过这个构造函数我们可以对某个对象进行包装, 然后返回一个新的对象, 然后我们所有对原对象的操作都可以转移到这个新的对象上, 并且我们的操作过程是可以被拦截和过滤的, 这就类似于你请的律师一样, 他会为你处理你的事情, 并在处理的过程中进行一些你设定好的操作, 称为代理.<br><a id="more"></a></p><h2 id="它的产生"><a href="#它的产生" class="headerlink" title="它的产生"></a>它的产生</h2><p>我之前探索过<code>Object.defineProperty()</code>这个API, 这个API通过定义对象的属性的<code>get</code>和<code>set</code>存取描述符也可以在想要操作这个对象的时候捕捉到那些行为, 与 Proxy 非常类似, 不过 Proxy 可以认为是前者的升级版, 前者在ES5中就已经有了, 所以低版本的浏览器或者老旧的IE也可以使用, 其中Vue2.0及以下就是使用的<code>Object.defineProperty()</code>来实现的数据双向绑定, 所以可以兼容低版本的浏览器, 不过 Proxy 是在ES6中新引入的, 功能比前者更全面, 能够解决之前解决不了的部分属性变化的拦截问题, Vue作者本人尤雨溪在最近的一次演讲中表示, 今年下半年将会推出的Vue3.0中将使用 Proxy 来代替之前的<code>Object.defineProperty()</code>, 这样新的Vue3.0也就无法兼容低版本和IE浏览器(而且这个兼容性问题无法使用polyfill来弥补), 关于二者的详细区别, 也可以参考掘金的这篇文章<a href="https://juejin.im/post/5bf3e632e51d452baa5f7375" target="_blank" rel="noopener">vue3.0 尝鲜 – 摒弃 Object.defineProperty，基于 Proxy 的观察者机制探索</a>.</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>基本语法:</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br></pre></td></tr></table></figure><ul><li><p>参数说明:</p><ul><li><p>target: 用Proxy包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至是另一个代理.</p></li><li><p>handler: 一个对象，其属性是当执行一个操作时定义代理的行为的函数.</p></li></ul></li><li><p>使用示例:</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  get(target, prop) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`getting <span class="subst">$&#123;prop&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> prop <span class="keyword">in</span> target ? target[prop] : <span class="number">200</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  set(target, prop, value) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`setting <span class="subst">$&#123;prop&#125;</span> to <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">    target[prop] = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(t, handler);</span><br><span class="line"></span><br><span class="line">p.name = <span class="string">'krics'</span>; <span class="comment">// =&gt; setting name to krics</span></span><br><span class="line"></span><br><span class="line">p.name; <span class="comment">// =&gt; getting name</span></span><br><span class="line"></span><br><span class="line">t; <span class="comment">// =&gt; &#123;name: 'krics'&#125;</span></span><br></pre></td></tr></table></figure><ul><li>发生了什么</li></ul><p><code>p</code>是对<code>t</code>对象进行包装过后的代理对象, 当我们给<code>p</code>设置新属性的时候, 在代理对象内部会调用<code>handler</code>中的<code>set</code>函数, 将新属性设置给<code>t</code>对象, 当我们需要获取<code>p</code>的某个属性的时候, 就会调用<code>handler</code>中的<code>get</code>函数, 然后返回对应的值, 感觉起来就好像我们是在操作<code>t</code>对象一样, 这里面可以挖掘出更大的潜力的就是<code>console.log()</code>这段代码, 我们在实际情况中可以在这个地方进行任意的处理, 比如执行一个函数, 或者通知消息订阅者这里的数据发生了变化, 然后去更新视图等等.</p><ul><li>数据双向绑定示例</li></ul><p>我拿一个简单的输入框输入文字, 然后页面上同步显示出我输入的文字作为示例</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// html content</span></span><br><span class="line"><span class="comment">// &lt;input type="text" class="input" /&gt;</span></span><br><span class="line"><span class="comment">// &lt;p class="text"&gt;&lt;/p&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Text = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'text'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> Input = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'input'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  set(target, prop, value) &#123;</span><br><span class="line">    Text.innerHTML = value;</span><br><span class="line">    target[prop] = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Input.addEventListener(<span class="string">'input'</span>, e =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">target</span>: &#123; value &#125; &#125; = e;</span><br><span class="line">  p.text = value;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="关于Reflect"><a href="#关于Reflect" class="headerlink" title="关于Reflect"></a>关于<code>Reflect</code></h2><p>在看Proxy相关的内容的时候看到了<code>Reflect</code>这个同样在ES6中引入的对象, 而且在js之后的发展中这个对象上将会部署越来越多的方法, 比如</p><blockquote><p>将Object对象的一些明显属于语言内部的方法（比如Object.defineProperty），放到Reflect对象上。现阶段，某些方法同时在Object和Reflect对象上部署，未来的新方法将只部署在Reflect对象上。也就是说，从Reflect对象上可以拿到语言内部的方法。<br>修改某些Object方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而Reflect.defineProperty(obj, name, desc)则会返回false。<br>让Object操作都变成函数行为。某些Object操作是命令式，比如name in obj和delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成了函数行为。<br>Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。这就让Proxy对象可以方便地调用对应的Reflect方法，完成默认行为，作为修改行为的基础。也就是说，不管Proxy怎么修改默认行为，你总可以在Reflect上获取默认行为。<br>更详细的内容可以参考<a href="http://es6.ruanyifeng.com/?search=proxy&amp;x=0&amp;y=0#docs/reflect" target="_blank" rel="noopener">这里</a></p></blockquote><p>之所以在这里说起这个新的对象, 是因为<code>Reflect</code>和Proxy搭配起来使用非常方便(例如上面说的第四点)</p><p>我们可以把之前写过的Proxy使用的代码里面的<code>handler</code>部分改一点东西, 让它更加合理</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  get(target, prop, receiver) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`getting <span class="subst">$&#123;prop&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, prop, receiver);</span><br><span class="line">  &#125;,</span><br><span class="line">  set(target, prop, value, receiver) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`setting <span class="subst">$&#123;prop&#125;</span> to <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, prop, value, receiver);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>与之前的代码的区别是我们不再自己实现获取属性的值或者设置属性的值的方法, 转而调用原生的默认的<code>get</code>和<code>set</code>来完成操作, 更加可靠.<br>关于<code>Reflect</code>的API, 可以参见下面.</p><p>需要说明的是关于上面使用的<code>Reflect.get</code>和<code>Reflect.set</code>中的第三个参数<code>receiver</code>, 这个参数是一个可选项, 代表<code>this</code>的指向(即上下文), 传入一个对象之后, 内部的操作如果用到<code>this</code>, 那么将会使用传入的<code>receiver</code>对象.</p><h3 id="Reflect上已经部署的方法"><a href="#Reflect上已经部署的方法" class="headerlink" title="Reflect上已经部署的方法"></a><code>Reflect</code>上已经部署的方法</h3><p>目前已经部署了13个, 未来会有更多.</p><ul><li>Reflect.apply(target, thisArg, args)</li><li>Reflect.construct(target, args)</li><li>Reflect.get(target, name, receiver)</li><li>Reflect.set(target, name, value, receiver)</li><li>Reflect.defineProperty(target, name, desc)</li><li>Reflect.deleteProperty(target, name)</li><li>Reflect.has(target, name)</li><li>Reflect.ownKeys(target)</li><li>Reflect.isExtensible(target)</li><li>Reflect.preventExtensions(target)</li><li>Reflect.getOwnPropertyDescriptor(target, name)</li><li>Reflect.getPrototypeOf(target)</li><li>Reflect.setPrototypeOf(target, prototype)</li></ul><h3 id="对比Object-defineProperty"><a href="#对比Object-defineProperty" class="headerlink" title="对比Object.defineProperty()"></a>对比<code>Object.defineProperty()</code></h3><p><code>Object.defineProperty()</code>每次只能劫持一个属性, 如果一个对象里面有多个属性需要劫持, 那么就需要不断的循环来重复处理所有需要劫持的属性, 另外如果对象后期新增了属性, 那么新增的属性是不会被自动劫持的, 这也就是为什么在<code>Vue</code>中我们需要把进行双向绑定的属性提前定义好, 因为后面新写入的属性, <code>Vue</code>是没法自动去进行劫持绑定的(需要手动调用<code>Vue</code>提供的函数进行处理), 但是<code>Proxy</code>就没有这些缺点, 因为他是一次劫持整个对象, 那么对象中的属性自然也会被一次性都劫持, 而且对于新增的属性, 因为也同样属于这个对象, 那么也自然会被劫持, 使用起来方便了很多. <code>Proxy</code>的缺点目前来说很明显, 就是无法磨平的兼容性.</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://juejin.im/post/5bf3e632e51d452baa5f7375" target="_blank" rel="noopener">vue3.0 尝鲜 – 摒弃 Object.defineProperty，基于 Proxy 的观察者机制探索</a></li><li><a href="https://juejin.im/post/5acd0c8a6fb9a028da7cdfaf" target="_blank" rel="noopener">面试官: 实现双向绑定Proxy比defineproperty优劣如何?</a></li><li><a href="https://segmentfault.com/a/1190000015783546" target="_blank" rel="noopener">记一次思否问答的问题思考：Vue为什么不能检测数组变动</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noopener">Proxy</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect" target="_blank" rel="noopener">MDN-Reflect</a></li><li><a href="http://es6.ruanyifeng.com/?search=proxy&amp;x=0&amp;y=0#docs/reflect" target="_blank" rel="noopener">ECMAScript 6 入门-Reflect</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>todo</title>
      <link href="/todo/"/>
      <url>/todo/</url>
      
        <content type="html"><![CDATA[<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>日常TODO<br><a id="more"></a></p><ul><li style="list-style:none"><input type="checkbox" checked> ssh + github 工作原理 文章</li><li style="list-style:none"><input type="checkbox" checked> base64</li><li style="list-style:none"><input type="checkbox" checked> IIFE</li><li style="list-style:none"><input type="checkbox" checked> 验证微信小程序的 hidden 问题</li><li style="list-style:none"><input type="checkbox" checked> js 位运算</li><li style="list-style:none"><input type="checkbox" checked> js 数组常用函数</li><li style="list-style:none"><input type="checkbox" checked> unicode-utf8</li><li style="list-style:none"><input type="checkbox" checked> 微信小程序页面生命周期及 navigate，<a href="http://www.wxapp-union.com/thread-3491-1-1.html" target="_blank" rel="noopener">参考</a></li><li style="list-style:none"><input type="checkbox" checked> js按值传递</li><li style="list-style:none"><input type="checkbox" checked> AST 语法树</li><li style="list-style:none"><input type="checkbox" checked> CommonJS-seaJS AMD-CMD</li><li style="list-style:none"><input type="checkbox" checked> Object.defineProperty()</li><li style="list-style:none"><input type="checkbox" checked> DOM级别</li><li style="list-style:none"><input type="checkbox" checked> 服务器搭建 https</li><li style="list-style:none"><input type="checkbox" checked> <a href="http://www.imooc.com/article/15355" target="_blank" rel="noopener">浏览器原生表单验证</a></li><li style="list-style:none"><input type="checkbox" checked> ES6 新数据类型</li><li style="list-style:none"><input type="checkbox" checked> toFixed() 精度问题, 银行家舍入算法</li><li style="list-style:none"><input type="checkbox" checked> input 事件顺序</li><li style="list-style:none"><input type="checkbox" checked> docker</li><li style="list-style:none"><input type="checkbox" checked> async-promise-generator</li><li style="list-style:none"><input type="checkbox"> Redux 源码</li><li style="list-style:none"><input type="checkbox"> requestAnimatinoFrame()</li><li style="list-style:none"><input type="checkbox"> CSRF</li><li style="list-style:none"><input type="checkbox"> 获取元素位置及大小</li><li style="list-style:none"><input type="checkbox"> js继承</li><li style="list-style:none"><input type="checkbox"> vue</li><li style="list-style:none"><input type="checkbox"> flux</li><li style="list-style:none"><input type="checkbox"> 微信小程序源码分析</li></ul>]]></content>
      
      
      <categories>
          
          <category> daily </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>SASS</title>
      <link href="/SASS/"/>
      <url>/SASS/</url>
      
        <content type="html"><![CDATA[<h1 id="SASS-笔记"><a href="#SASS-笔记" class="headerlink" title="SASS 笔记"></a>SASS 笔记</h1><p>以前使用 SASS 都比较浅显, 正好最近写的多了, 所以记录一下笔记.</p><h2 id="何为-SASS"><a href="#何为-SASS" class="headerlink" title="何为 SASS"></a>何为 SASS</h2>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SASS </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>http-2.0</title>
      <link href="/http-2-0/"/>
      <url>/http-2-0/</url>
      
        <content type="html"><![CDATA[<h1 id="关于-HTTP-2-0"><a href="#关于-HTTP-2-0" class="headerlink" title="关于 HTTP/2.0"></a>关于 HTTP/2.0</h1><p>最近折腾了一段时间的 HTTP/2.0, 目前来说国内外很多大厂都已经用上了 HTTP/2.0, 部署起来也很容易, 这里关于协议的一些细节及部署过程做一个记录.<br><a id="more"></a><br>主要参考的是屈屈的博客 HTTP/2.0 系列文章: <a href="https://imququ.com/post/http2-resource.html" target="_blank" rel="noopener">HTTP/2 资料汇总</a></p><h2 id="SPDY-和-HTTP-2-0"><a href="#SPDY-和-HTTP-2-0" class="headerlink" title="SPDY 和 HTTP/2.0"></a>SPDY 和 HTTP/2.0</h2><p>在 HTTP/2.0 标准正式推出之前, google 先实验性的推出了新的传输层协议 SPDY, 由于 SPDY 表现优异, 于是 google 慷慨的把这个协议提交到了 IETF, 之后 IETF 对这个标准进行了进一步的完善, 也改名叫做 HTTP/2.0. 所以你可以把 SPDY 看做 HTTP/2.0 的前身, 随着 HTTP/2.0 的正式标准化, SPDY 也就完成了它的历史使命, 逐渐在退出历史舞台.</p><p><strong>我们之前大多数使用的都是 HTTP/1.1, 那么在服务器和客户端交互的时候应该如何恰当的升级通信协议呢?</strong></p><p>首先 SPDY 是基于 SSL/TLS 的(也就是说如果要使用 SPDY, 那么就必须部署 HTTPS), 当服务器和浏览器在通过三次握手建立 TCP 连接之后, 下一步就要协商 SSL/TLS 加密协议的细节(版本, 算法和加密套件等), 在这个协商过程中就把 SPDY 协议的协商过程也加进去了, 为了协商 SPDY 协议谷歌开发了一个名为下一代协议协商<code>Next Protocol Negotiation(NPN)</code>的 SSL/TLS 扩展，用于在客户端连接服务器时协商是否采用 SPDY 协议。SPDY 协议是由 Web 服务器所实现支持的，而 NPN 则是由 OpenSSL 等 SSL 实现支持的。</p><p>由 SPDY 标准之后的 HTTP/2.0 协议在协商的过程也发生了一些变化, 由原来的 NPN 变为了应用层协议协商<code>Application-Layer Protocol Negotiation(ALPN)</code>, 他们的作用是相同的, 都是为了在建立连接的时候进行协议协商以便能够升级到 SPDY 或者 HTTP/2.0. 但是他们的做法有所不同而且是<strong>不兼容的, 但是NPN 和 ALPN 可以并存，但是会客户端会优先选择 ALPN</strong></p><ul><li>在协商协议的时候, NPN 是服务器发送所支持的协议列表，由客户端进行选择。而 ALPN 则是客户端发送该列表，由服务端选择.</li><li>在 NPN 中，最终的选择结果是在 Change Cipher Spec 之后发送给服务端的，也就是说是被加密了的。而在 ALPN 中，所有的协商都是明文的.</li></ul><p>目前的<strong>问题</strong>是NPN 已经广泛地被 OpenSSL 支持，而 ALPN 则目前只有最新的 openssl-1.0.2 才支持, 而我们目前使用的几个主流 Linux 发行版的 OpenSSL 版本都还不支持 ALPN, 而同时这个 OpenSSL 是系统相当低层的库, 被众多的其他软件所依赖, 一般情况下没有谁会去升级这个库.</p><p>所以在之前很多网站想要享受更加优秀的网站加载速度采用的都是 SPDY 协议, 可是自从 Chrome 51 开始, 谷歌就去掉了对 SPDY 和对 NPN 的支持, 也就是说在这之后浏览器将无法使用 NPN 来和服务器协商进行协议的升级, 所以如果你的 Web 服务器使用的是 openssl-1.0.2 以下的版本，不支持 ALPN 协商，那么 Chrome 51 及以后版本就会以 HTTP/1 协议访问你的网站(当然其它的浏览器就不是这样了)。</p>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP/2.0 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>yahoo-best-practices-for-speeding-up-your-Web-Site</title>
      <link href="/yahoo-best-practices-for-speeding-up-your-Web-Site/"/>
      <url>/yahoo-best-practices-for-speeding-up-your-Web-Site/</url>
      
        <content type="html"><![CDATA[<h1 id="yahoo-的网站优化实践军规"><a href="#yahoo-的网站优化实践军规" class="headerlink" title="yahoo 的网站优化实践军规"></a>yahoo 的网站优化实践军规</h1><p>yahoo 的网站优化军规已经出来很多年了, 我是最近才看到, 然后做一下笔记, 也比对一下自己现在做的怎么样.</p><p>原文地址: <a href="https://developer.yahoo.com/performance/rules.html?guccounter=1" target="_blank" rel="noopener">Best Practices for Speeding Up Your Web Site</a><br><a id="more"></a><br>掘金上也有不少好文章来详细阐述的: <a href="https://juejin.im/post/5b73ef38f265da281e048e51" target="_blank" rel="noopener">前端性能优化之雅虎35条军规</a></p><ol><li>减少 HTTP 请求</li><li>使用 CDN</li><li>添加<code>Expires</code>或者<code>Cache-Control</code>缓存控制头</li><li>对除了图片和 PDF 这类文件以外的文件(如 CSS, JS, 或者 <code>application/json</code>等)使用 Gzip</li><li>样式放在头部</li><li>脚本放在底部</li><li>避免使用 CSS 表达式</li><li>脚本和样式使用外链形式</li><li>减少 DNS 查询</li><li>压缩脚本和样式文件</li><li>避免重定向</li><li>移除重复的脚本</li><li>配置 ETags</li><li>缓存 Ajax 数据</li><li>尽早刷新缓冲区</li><li>Ajax 尽量使用 GET 方式</li><li>延迟加载暂时不必要的资源</li><li>预先加载可能用到的资源</li><li>减少页面 DOM 元素数量</li><li>资源分散到不同的域上</li><li>减少 iframes 的数量</li><li>避免404</li><li>减少 cookie 大小</li><li>把资源部署到不用发送 cookie 的域上</li><li>减少访问 DOM 的次数</li><li>合适处理事件绑定</li><li>使用<code>&lt;link&gt;</code>而不是<code>@import</code></li><li>CSS 中避免使用 AlphaImageLoader</li><li>优化及压缩图片</li><li>优化 CSS 雪碧图</li><li>选用尺寸刚好合适的图片, 不要缩放使用</li><li>使用小的 favicon, 同时注意缓存该文件</li><li>文件大小不要超过25k(这一条目前来说可能过时了, 后期查证)</li><li>把多个文件合并成一个文件, 减少 HTTP 数量</li><li>避免空<code>src</code>的<code>img</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yahoo </tag>
            
            <tag> speed </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx</title>
      <link href="/nginx/"/>
      <url>/nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx-的部署与配置笔记"><a href="#nginx-的部署与配置笔记" class="headerlink" title="nginx 的部署与配置笔记"></a>nginx 的部署与配置笔记</h1><p>现在很多网站用的都是 nginx 作为代理服务器, 所以为了进行 web 性能的优化, 自然也要折腾一下 nginx 的配置的.<br><a id="more"></a></p><p>我的远程主机环境:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># linux 通用查看系统版本</span></span><br><span class="line">lsb_release -a</span><br><span class="line"><span class="comment"># LSB Version:    :core-4.1-amd64:core-4.1-noarch</span></span><br><span class="line"><span class="comment"># Distributor ID: CentOS</span></span><br><span class="line"><span class="comment"># Description:    CentOS Linux release 7.4.1708 (Core)</span></span><br><span class="line"><span class="comment"># Release:        7.4.1708</span></span><br><span class="line"><span class="comment"># Codename:       Core</span></span><br></pre></td></tr></table></figure><h2 id="nginx-的安装"><a href="#nginx-的安装" class="headerlink" title="nginx 的安装"></a>nginx 的安装</h2><p>参考文章: <a href="https://segmentfault.com/a/1190000007116797" target="_blank" rel="noopener">nginx服务器详细安装过程（使用yum 和 源码包两种安装方式，并说明其区别）</a></p><p>安装 nginx 前要先安装 nginx 编译及运行的依赖环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel</span></span><br></pre></td></tr></table></figure><p>nginx 一般来说有两种安装方式: <code>yum</code>安装和源码包自行编译安装, 新手推荐前一种, 想折腾的话或者老手使用后一种</p><ul><li><code>yum</code>安装是在线安装, 好处是简单方便, 不易出错, 但是缺点是使用的其实是别人编译好的二进制版本, 不能自定义其中加载的模块, 不过目前来 centos 官方提供的那个版本还是比较实用的</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先把 nginx 的源加载 yum 里面</span></span><br><span class="line">vi /etc/yum.repo.d/nginx.repo</span><br></pre></td></tr></table></figure><p>然后在文件里添加如下内容</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><p>然后就可以使用<code>yum install nginx</code>安装最新版了, 也可以<code>yum install nginx-1.6.3</code>安装指定版本.安装之后可以使用<code>rpm -ql nginx</code>查看安装目录, 卸载时使用<code>rpm -e nginx</code>, 如果因为依赖包导致卸载失败，可以尝试<code>rpm -e --nodeps nginx</code>来卸载，这个命令相当于强制卸载，不考虑依赖问题。</p><p>使用这种方式安装之后 nginx 会被自动添加到系统服务里面, 也就是说可以直接使用<code>serivce nginx {option}</code>来启动或者关闭 nginx.</p><ul><li>源码包编译安装, 好处是编译的时候是根据你本机的条件和环境进行编译的, 性能更好一些,同时也可以在编译的时候自定义模块</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以获取指定版本的 nginx, 可以使用 -P 指定下载目录</span></span><br><span class="line">wget -c &lt;-P&gt; &lt;destDir&gt; https://nginx.org/download/nginx-1.11.6.tar.gz</span><br><span class="line"><span class="comment"># 然后解压下载的压缩包, 可以使用 -C 指定解压目录</span></span><br><span class="line">tar -zxvf nginx-1.11.6.tar.gz &lt;-C&gt; &lt;destDir&gt;</span><br><span class="line"><span class="comment"># 然后进行解压后的目录</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.11.6</span><br><span class="line"><span class="comment"># 然后先进行编译配置, 直接使用 ./configure 表示使用默认配置, 也可以在后面附加参数表示一些其他的模块之类的, 请具体根据使用来配置</span></span><br><span class="line">./configure</span><br><span class="line"><span class="comment"># 然后进行编译安装</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>一般来说编译安装后的二进制文件都在<code>/usr/local/</code>目录下, 如果需要卸载的话直接在这里删除对应的目录就可以, 同时启动 nginx 也可以在这里使用二进制文件直接启动, 见下文 nginx 的使用.</p><p>使用源码包编译安装的好处是是可以后期为 nginx 添加各种各样的模块.</p><p>比如我在第一次安装的并没有安装 SSL 相关的模块, 后期我想开启 SSL, 这个时候就需要给 nginx 添加<code>ngx_http_ssl_module</code>模块.<br>注意在添加的时候为了保留之前的一些配置, 我们需要先查看之前编译的<code>configure</code>配置项, 你可以使用<code>./nginx -V</code>来查看, 我的输出如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx version: nginx/1.15.2</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-28) (GCC)</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx</span><br></pre></td></tr></table></figure><p>可以看到我的版本是<code>1.15.2</code>, 我之前的编译参数是<code>--prefix=/usr/local/nginx</code>, 也就是只制定了 nginx 的配置文件路径, 那么我现在需要在原来的基础上添加新的参数<code>--with-http_ssl_module</code>才能编译一个新的带有 SSL 模块的 nginx 二进制文件.</p><ol><li>找到原来的源码包, 没有的话就下载一个跟你现在用的是同一个版本的 nginx 源码包, 然后解压, 进入解压后的目录</li><li>在解压后的目录执行编译前的配置<code>./configure --prefix=/usr/local/nginx --with-http_ssl_module</code>, 注意这里一定要把你原来的参数都拷贝过来, 然后在后面添加新的, 要不然编译出来的东西可能跟你原来的不兼容</li><li>接下来执行<code>make</code>, <strong>这里可千万别手快执行<code>make &amp;&amp; make install</code></strong>, 如果你<code>insall</code>了那么你之前的 nginx 的配就都丢了, 所以我们这里只需要编译出一个可用的 nginx 的二进制版本, 然后手动替换掉原来的即可.</li><li>新编译的 nginx 文件在 <code>objs/nginx</code></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将原来的`/usr/local/nginx/sbin/nginx`备份</span></span><br><span class="line">cp /usr/<span class="built_in">local</span>/nginx/sbin/nginx /usr/<span class="built_in">local</span>/nginx/sbin/nginx.back</span><br><span class="line"><span class="comment"># 请先停止 nginx 服务, 然后再删除原来的 nginx 文件</span></span><br><span class="line">rm -f /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line"><span class="comment"># 把新的 nginx 文件拷贝到原来的地方</span></span><br><span class="line">cp objs/nginx /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><p>然后再正常启动 nginx 即可使得新的功能生效</p><h2 id="nginx-的使用"><a href="#nginx-的使用" class="headerlink" title="nginx 的使用"></a>nginx 的使用</h2><p>有两种方式启动 nginx, 但是后一种相对来说方便一些, 推荐使用.</p><ul><li>直接在安装目录使用 nginx 的命令进行 nginx 的启动和关闭</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line"><span class="comment"># 检查默认配置文件</span></span><br><span class="line">/usr/nginx/sbin/nginx -t</span><br><span class="line"><span class="comment"># 检查指定配置文件</span></span><br><span class="line">/usr/nginx/sbin/nginx -t -c &#123;configFileDir&#125;</span><br><span class="line"><span class="comment"># 使用指定配置文件启动 nginx</span></span><br><span class="line">/usr/nginx/sbin/nginx -c &#123;configFileDir&#125;</span><br><span class="line"><span class="comment"># 关闭 stop 表示立即停止, quit 表示平滑停止, reopen 表示重新启动 reload 不中断服务重新加载配置文件</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s &#123;stop|quit|reload|reopen&#125;</span><br><span class="line"><span class="comment"># 通过进程查看及关闭 nginx</span></span><br><span class="line">ps -ef | grep nginx</span><br><span class="line"><span class="comment"># 从容停止Nginx：</span></span><br><span class="line"><span class="built_in">kill</span> -QUIT 主进程号</span><br><span class="line"><span class="comment"># 快速停止Nginx：</span></span><br><span class="line"><span class="built_in">kill</span> -TERM 主进程号</span><br><span class="line"><span class="comment"># 强制停止Nginx：</span></span><br><span class="line"><span class="built_in">kill</span> -9 nginx</span><br></pre></td></tr></table></figure><ul><li>配置 nginx 的启动和关闭到系统服务</li></ul><ol><li>在<code>/etc/init.d/</code>目录下新建文件<code>nginx</code>, 把<a href="/code/nginx">这些内容</a>拷贝到文件中</li><li>赋予脚本可执行权限<code>chmod +x /etc/init.d/nginx</code></li><li>修改系统服务之后使用<code>systemctl daemon-reload</code>重新加载一下才能生效</li><li>可以吧 nginx 服务配置成开机启动 <code>chkconfig nginx on</code></li><li>有如下命令可执行:</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service nginx &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;</span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment"># start 启动 nginx</span></span><br><span class="line"><span class="comment"># stop 停止 nginx</span></span><br><span class="line"><span class="comment"># status 查看 nginx 的状态</span></span><br><span class="line"><span class="comment"># restart 重启 nginx, 会先中断 nginx, 然后重新启动, 如果配置文件有误, 那么将无法启动 nginx</span></span><br><span class="line"><span class="comment"># reload 重新加载配置文件, 不会中断 nginx 服务, 如果新的配置文件有误, 那么会使用上一次正确的配置文件, 保证服务正常运行</span></span><br><span class="line"><span class="comment"># configtest 检查配置文件是否正确</span></span><br></pre></td></tr></table></figure><h2 id="nginx-的配置"><a href="#nginx-的配置" class="headerlink" title="nginx 的配置"></a>nginx 的配置</h2><p>nginx 的配置相对来说是比较繁杂的, 所以我放到最下面来说, 后期持续补充.<br>参考文档: <a href="https://segmentfault.com/a/1190000002797601" target="_blank" rel="noopener">nginx服务器安装及配置文件详解</a></p><h3 id="gzip压缩功能设置"><a href="#gzip压缩功能设置" class="headerlink" title="gzip压缩功能设置"></a>gzip压缩功能设置</h3><p>gzip 相关配置可放在 http{} 或 server{} 或 location{} 层级，若不同层级有重复设置优先级为 location{} &gt; server{} &gt; http{}<br>gzip 配置参数如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 打开 gzip 压缩</span><br><span class="line">gzip on;</span><br><span class="line"># 进行压缩的最小文件大小, 小于这个大小的不进行压缩</span><br><span class="line">gzip_min_length 1k;</span><br><span class="line"># 压缩结果数据流存储所用空间，下面表示以16k为单位，按照原始数据大小以16k为单位的4倍申请内存。默认值是申请跟原始数据相同大小的内存空间去存储gzip压缩结果。</span><br><span class="line">gzip_buffers    4 16k;</span><br><span class="line"># 采用http协议版本 默认是1.1 ，对于1.0的请求不会压缩，如果设置成1.0，表示http1.0以上 的版本都会压缩。(如果使用了 proxy_pass 进行反向代理，那么nginx和后端的 upstream server之间默认是用 HTTP/1.0协议通信的。)</span><br><span class="line">gzip_http_version 1.0;</span><br><span class="line"># 压缩级别（1~9，一般为平衡文件大小和CPU使用，5是常用值，当然跟实际机器的情况有关） 级别越高, 压缩比越大, 但是 cpu 的性能消耗也越高, 同时在压缩到一定程度之后即使再进行压缩文件体积也不会再有明显的减小了. 一般取值在4~6, 这里有一组测试数据</span><br><span class="line">; text/html - phpinfo():</span><br><span class="line">; 0    55.38 KiB (100.00% of original size)</span><br><span class="line">; 1    11.22 KiB ( 20.26% of original size)</span><br><span class="line">; 2    10.89 KiB ( 19.66% of original size)</span><br><span class="line">; 3    10.60 KiB ( 19.14% of original size)</span><br><span class="line">; 4    10.17 KiB ( 18.36% of original size)</span><br><span class="line">; 5     9.79 KiB ( 17.68% of original size)</span><br><span class="line">; 6     9.62 KiB ( 17.37% of original size)</span><br><span class="line">; 7     9.50 KiB ( 17.15% of original size)</span><br><span class="line">; 8     9.45 KiB ( 17.06% of original size)</span><br><span class="line">; 9     9.44 KiB ( 17.05% of original size)</span><br><span class="line"></span><br><span class="line">; application/x-javascript - jQuery 1.8.3 (Uncompressed):</span><br><span class="line">; 0    261.46 KiB (100.00% of original size)</span><br><span class="line">; 1     95.01 KiB ( 36.34% of original size)</span><br><span class="line">; 2     90.60 KiB ( 34.65% of original size)</span><br><span class="line">; 3     87.16 KiB ( 33.36% of original size)</span><br><span class="line">; 4     81.89 KiB ( 31.32% of original size)</span><br><span class="line">; 5     79.33 KiB ( 30.34% of original size)</span><br><span class="line">; 6     78.04 KiB ( 29.85% of original size)</span><br><span class="line">; 7     77.85 KiB ( 29.78% of original size)</span><br><span class="line">; 8     77.74 KiB ( 29.73% of original size)</span><br><span class="line">; 9     77.75 KiB ( 29.74% of original size)</span><br><span class="line">gzip_comp_level 5;</span><br><span class="line"># 压缩文件类型（默认总是压缩 text/html类型，其中特别说明的是application/javascript和text/javascript最好都加上，若页面script标签的type不同则有可能发生部分js文件不会压缩，默认type为application/javascript） 一般来说对图片不进行压缩, 因为图片压缩比较耗时而且压缩比也很低</span><br><span class="line">gzip_types application/atom+xml application/javascript application/json application/rss+xml application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/svg+xml image/x-icon text/css text/plain text/javascript text/x-component;</span><br><span class="line"># 代表缓存压缩和原始版本资源，避免客户端因Accept-Encoding不支持gzip而发生错误的现象（现在一般都采用gzip） 开启此参数以后会在返回头里面看到一个 Vary 字段, 里面会有一个 Accept-Encoding 字段, 代表此资源有着多个版本, 比如 gzip 压缩版 和不压缩版, 关于 Vary 字段的解释可以查看这里: https://imququ.com/post/vary-header-in-http.html</span><br><span class="line">gzip_vary on;</span><br><span class="line"># 禁止IE6进行gzip压缩（当然现在已经基本没有人使用IE6了）</span><br><span class="line">gzip_disable &quot;MSIE [1-6]&quot;;</span><br></pre></td></tr></table></figure><p>参考文章:<a href="https://segmentfault.com/a/1190000010563519" target="_blank" rel="noopener">Nginx配置指北之gzip</a></p><h3 id="HTTPS-配置"><a href="#HTTPS-配置" class="headerlink" title="HTTPS 配置"></a>HTTPS 配置</h3><p>如果要启用 nginx 的 SSL 配置, 那么需要 nginx 安装的时候包含了<code>http_ssl_module</code>模块, 默认 nginx 是不会安装这个模块的, 可以使用<code>./nginx -V</code>查看 nginx 安装时的配置参数里面有没有这个模块, 如果没有这个模块, 那么我们可以按照上面编译安装的步骤编译一个新的包含这个模块的 nginx 二进制文件, 然后替换掉现在的即可. 然后在 server{} 层级中加入如下配置(请根据自己情况修改)</p><p>详细配置说明可以查看<a href="https://aotu.io/notes/2016/08/16/nginx-https/index.html" target="_blank" rel="noopener">Nginx 配置 HTTPS 服务器</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 网站域名</span><br><span class="line">server_name example.com</span><br><span class="line"># 表示监听 443 端口, 协议为 ssl</span><br><span class="line">listen 443 ssl;</span><br><span class="line"># 证书文件的位置</span><br><span class="line">ssl_certificate     example.com.crt;</span><br><span class="line"># 证书私钥文件的位置</span><br><span class="line">ssl_certificate_key example.com.key;</span><br><span class="line"># SSL 协议具体版本</span><br><span class="line">ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line"># SSL 算法</span><br><span class="line">ssl_ciphers         HIGH:!aNULL:!MD5;</span><br></pre></td></tr></table></figure><p>上面的配置是必须的, 另外还有一些配置依据个人情况可以添加. 另外你需要首先申请自己的网站证书才行.</p><p>例如安全协议的具体版本<code>ssl_protocols</code>和算法<code>ssl_ciphers</code>, 由于这两个命令的默认值已经好几次发生了改变，因此不建议显性定义，除非有需要额外定义的值，如定义 D-H 算法, 具体查看<a href="https://aotu.io/notes/2016/08/16/nginx-https/index.html" target="_blank" rel="noopener">Nginx 配置 HTTPS 服务器</a>进行配置.</p><h3 id="HTTP-2-0-配置"><a href="#HTTP-2-0-配置" class="headerlink" title="HTTP/2.0 配置"></a>HTTP/2.0 配置</h3><p>既然已经上了 HTTPS, 那么干脆一鼓作气上到 HTTP/2.0, 根据规范来说 HTTP/2.0 是不需要依赖 HTTPS 的, 但是目前的现状来说, 各个浏览器都是要求在 HTTPS 的环境中才能启用 HTTP/2.0. nginx 要启用 HTTP/2.0 需要<code>http_v2_module</code>和<code>http_ssl_module</code>这两个模块, 如果之前的编译安装时没有这两个模块, 那么就需要重新加上参数再编译一份. 这里省略我再次编译的过程(同上), 只是编译参数改为<code>./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_v2_module</code>.</p><p>更新了 nginx 之后就要在 nginx 的配置文件里面开启 HTTP/2.0, 告诉客户端我们支持 HTTP/2.0 了. 配置很简单, 只需要在之前的<code>listen</code>字段中增加一个<code>http2</code>即可.</p><p>目前 IE11+ 以及其他主流浏览器都已经支持 HTTP/2.0, 而且就算客户端不支持结果也是正常的使用现在的 HTTP/1.1, 不会影响页面访问.</p><p>例如:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 改为</span><br><span class="line">listen 443 ssl http2;</span><br></pre></td></tr></table></figure><p>这里有一个<strong>小坑</strong>, 在启用 HTTP/2.0 之前, 我们可能把80端口和443端口放在同一个 server 里面监听, 但是如果我们想要启用 HTTP/2.0, 那么就必须把80端口拿出去单独放在一个 server 里面, 监听80端口的并不能启用 HTTP/2.0, 所以如果你想要为网站同时启用 HTTP 和 HTTP/2.0, 那么你在 nginx 配置文件里面就至少需要写两个 server, 一个监听80端口, 另一个监听443端口.</p><p>关于 HTTP/2.0 的相关文章, 尤其是升级及浏览器兼容问题可以查看屈屈的博客<a href="https://imququ.com/post/protocol-negotiation-in-http2.html" target="_blank" rel="noopener">谈谈 HTTP/2 的协议协商机制</a>.</p><p>我自己的总结如下: 在浏览器和服务端建立 TCP 连接之后, 如果是 http 协议, 那么此时就可以进行数据传输了, 如果是 https 协议, 那么就还需要建立安全的 TLS 连接, 由于 TLS 有多个版本, 也有不同的加密算法, 那么浏览器和服务器就需要进行协商, 确定一个版本和算法等信息来进行数据加密, 协商是通过<code>握手</code>来实现的, 首先客户端会发送一个<code>client hello</code>握手信息, 里面包含了客户端支持的各种协议以及算法等信息, 然后服务端收到这个信息之后会在这些支持的协议里面选出自己也支持的协议和算法, 然后确定最后要采用的协议和算法(例如 HTTP/2.0 &gt; HTTP/1.1)通过<code>server hello</code>握手信息返给客户端, 这样双方就确定了一组对应的协议和算法进行后续的数据传输. 所以可以看到服务器在升级到了 HTTP/2.0 之后, 如果用户使用的浏览器也支持 HTTP/2.0, 那么协商之后双方就会无痛升级到 HTTP/2.0 进行通信, 享受 HTTP/2.0 带来的种种好处, 而如果用户的浏览器不支持 HTTP/2.0, 那么协商之后就会采用原来的 HTTP/1.1进行通信, 并不会影响现在的业务.</p>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>length-of-url</title>
      <link href="/length-of-url/"/>
      <url>/length-of-url/</url>
      
        <content type="html"><![CDATA[<h1 id="关于URL长度的笔记"><a href="#关于URL长度的笔记" class="headerlink" title="关于URL长度的笔记"></a>关于URL长度的笔记</h1><p>在了解 cookie 的大小限制的时候看到了一片记录关于 URL 长度的博客, 所以收藏了下来.<br><a id="more"></a></p><p>原文: <a href="https://github.com/zhongxia245/blog/issues/35" target="_blank" rel="noopener">GET传参最大长度的理解误区</a><br>作者: zhongxia</p><p>为防止原文丢失, 这里直接转载一份.</p><blockquote><p>GET传参最大长度的理解误区<br>时间：2016-10-17 14:59:38<br>作者：zhongxia</p></blockquote><p>零、总结<br>文章数据来源于网络，可能存在变动，但是原理是一样的。</p><p>HTTP 协议 未规定 GET 和POST的长度限制<br>GET的最大长度显示是因为 浏览器和 web服务器限制了 URI的长度<br>不同的浏览器和WEB服务器，限制的最大长度不一样<br>要支持IE，则最大长度为2083byte，若只支持Chrome，则最大长度 8182byte<br>一、误解<br>大家都知道http 中 存在 GET 和 POST 这两种最常用的请求方式。（PUT，DELETE不在本文讨论范围之内）</p><p>误解：HTTP 协议下的 Get 请求参数长度是有大小限制的，最大不能超过XX，而 Post 是无限制的。</p><p>1、首先即使有长度限制，也是限制的是整个 URI 长度，而不仅仅是你的参数值数据长度。</p><p>2、HTTP 协议从未规定 GET/POST 的请求长度限制是多少。</p><p><em>以下内容摘自 《关于 HTTP GET/POST 请求参数长度最大值的一个理解误区》， 文章时间为 2013年的。可能以当前最新的浏览器有出入</em></p><blockquote><p>The HTTP protocol does not place any a priori limit on the length of a URI. Servers MUST be able to handle the URI of any resource they serve, and SHOULD be able to handle URIs of unbounded length if they provide GET-based forms that could generate such URIs. A server SHOULD return 414 (Request-URI Too Long) status if a URI is longer than the server can handle (see section 10.4.15).<br>Note: Servers ought to be cautious about depending on URI lengths above 255 bytes, because some older client or proxy implementations might not properly support these lengths.</p></blockquote><p>3、所谓的请求长度限制是由浏览器和 web 服务器决定和设置的，各种浏览器和 web 服务器的设定<br>均不一样，这依赖于各个浏览器厂家的规定或者可以根据 web 服务器的处理能力来设定。</p><blockquote><p>The limit is in MSIE and Safari about 2KB, in Opera about 4KB and in Firefox about 8KB, (255 bytes if we count very old browsers) . We may thus assume that 8KB is the maximum possible length and that 2KB is a more affordable length to rely on at the server side and that 255 bytes is the safest length to assume that the entire URL will come in.<br>If the limit is exceeded in either the browser or the server, most will just truncate the characters outside the limit without any warning. Some servers however may send a HTTP 414 error. If you need to send large data, then better use POST instead of GET. Its limit is much higher, but more dependent on the server used than the client. Usually up to around 2GB is allowed by the average webserver. This is also configureable somewhere in the server settings. The average server will display a server-specific error/exception when the POST limit is exceeded, usually as HTTP 500 error.</p></blockquote><p>IE 和 Safari 浏览器 限制 2k<br>Opera 限制4k<br>Firefox 限制 8k（非常老的版本 256byte）</p><p>如果超出了最大长度，大部分的服务器直接截断，也有一些服务器会报414错误。</p><blockquote><p>HTTP 1.1 defines Status Code 414 Request-URI Too Long for the cases where a server-defined limit is reached. You can see further details on RFC 2616. For the case of client-defined limits, there is no sense on the server returning something, because the server won’t receive the request at all.</p></blockquote><p>详细可以看 RFC2616</p><blockquote><p>The server is refusing to service the request because the Request-URI is longer than the server is willing to interpret. This rare condition is only likely to occur when a client has improperly converted a POST request to a GET request with long query information, when the client has descended into a URI “black hole” of redirection (e.g., a redirected URI prefix that points to a suffix of itself), or when the server is under attack by a client attempting to exploit security holes present in some servers using fixed-length buffers for reading or manipulating the Request-URI.</p></blockquote><p>二、各个浏览器和web服务器的最大长度总结<br><strong>以下内容摘自<a href="http://www.cnblogs.com/cuihongyu3503319/p/5892257.html" target="_blank" rel="noopener">《GET请求中URL的最大长度限制总结》</a>， 文章内容是 2016年9月，相对比较符合当前的最新现状。</strong></p><p>在网上查询之后，浏览器和服务器对url长度都有限制，现总结如下。</p><p>浏览器<br>1、IE</p><p>IE浏览器（Microsoft Internet Explorer） 对url长度限制是2083（2K+53），超过这个限制，则自动截断（若是form提交则提交按钮不起作用）。</p><p>2、firefox</p><p>firefox（火狐浏览器）的url长度限制为 65 536字符，但实际上有效的URL最大长度不少于100,000个字符。</p><p>3、chrome</p><p>chrome（谷歌）的url长度限制超过8182个字符返回本文开头时列出的错误。</p><p>4、Safari</p><p>Safari的url长度限制至少为 80 000 字符。</p><p>5、Opera</p><p>Opera 浏览器的url长度限制为190 000 字符。Opera 9 地址栏中输入190 000字符时依然能正常编辑。</p><p>服务器<br>1、Apache</p><p>Apache能接受url长度限制为8 192 字符</p><p>2、IIS</p><p>Microsoft Internet Information Server(IIS)能接受url长度限制为16 384个字符。<br>这个是可以通过修改的（IIS7）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">configuration/system.webServer/security/requestFiltering/requestLimits@maxQueryStringsetting.&lt;requestLimits maxQueryString=&quot;length&quot;/&gt;</span><br></pre></td></tr></table></figure><p>3、Perl HTTP::Daemon</p><p>Perl HTTP::Daemon 至少可以接受url长度限制为8000字符。Perl HTTP::Daemon中限制HTTP request headers的总长度不超过16 384字节(不包括post,file uploads等)。但当url超过8000字符时会返回413错误。<br>这个限制可以被修改，在Daemon.pm查找16×1024并更改成更大的值。</p><p>4、ngnix</p><p>可以通过修改配置来改变url请求串的url长度限制。</p><p>client_header_buffer_size 默认值：client_header_buffer_size 1k</p><p>large_client_header_buffers默认值 ：large_client_header_buffers 4 4k/8k</p><blockquote><p>由于jsonp跨域请求只能通过get请求，url长度根据浏览器及服务器的不同而有不同限制。<br>若要支持IE的话，url长度限制为2083字符，若是中文字符的话只有2083/9=231个字符。<br>若是Chrome浏览器支持的最大中文字符只有8182/9=909个。</p></blockquote><p>三、参考文章<br><a href="http://www.cnblogs.com/cuihongyu3503319/p/5892257.html" target="_blank" rel="noopener">GET请求中URL的最大长度限制总结</a><br><a href="https://my.oschina.net/leejun2005/blog/136820" target="_blank" rel="noopener">关于 HTTP GET/POST 请求参数长度最大值的一个理解误区</a></p>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>service-worker</title>
      <link href="/service-worker/"/>
      <url>/service-worker/</url>
      
        <content type="html"><![CDATA[<h1 id="service-worker"><a href="#service-worker" class="headerlink" title="service-worker"></a>service-worker</h1><p>service worker (服务工作线程)可以为网页提供离线访问的功能, 除此之外当然也有<strong>推送通知</strong>和<strong>后台同步</strong>的功能, 它是一种 JavaScript 线程, 可以独立在主线程外独立运行, 但是无法直接访问和操作 DOM , 服务工作线程通过响应 postMessage 接口发送的消息来与其控制的页面通信, 页面可在必要时对 DOM 执行操作.<br><a id="more"></a></p><ul><li>使用前提<br>网站必须是 https 的, 本地开发的话也可以使用 localhost 和 127.0.0.1</li><li>兼容性<br>目前来说 IE 系列都不支持, Edge 从17开始支持, 其他PC段浏览器基本都没有太大问题, 移动端 IOS Safari 从11.4开始支持, 安卓浏览器从67(发布于2017.03)开始支持, QQ和UC等都已经支持. 一般来说在注册 service worker 之前可以先通过<code>&#39;serviceWorker&#39; in navigator</code>检查一下是否支持, 不支持则不进行注册.</li></ul><h2 id="注册-service-worker"><a href="#注册-service-worker" class="headerlink" title="注册 service worker"></a>注册 service worker</h2><p>如果在页面加载完成之前就直接注册 service worker, 会影响到页面的加载过程, 所以推荐的做法是在<code>load</code>事件里面去注册</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    navigator.serviceWorker.register(<span class="string">'/sw.js'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">registration</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Registration was successful</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'ServiceWorker registration successful with scope: '</span>, registration.scope);</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// registration failed :(</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'ServiceWorker registration failed: '</span>, err);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是 service worker 文件的位置决定了这个它能控制的页面和请求范围, 最多只能控制到本目录, 可以通过<code>scope</code>参数指定目录, 但是也不能高于所在目录, 所以经常会把这个文件直接放在根目录, 这样就可以控制到整个域下面的文件和请求.</p><p>chrome 里面可以通过<a href="chrome://serviceworker-internals" target="_blank" rel="noopener">chrome://serviceworker-internals</a>来查看已经开启的 service worker, 在控制台的 Application 里的 Servie Worker 也可以查看.</p><h2 id="安装-service-worker"><a href="#安装-service-worker" class="headerlink" title="安装 service worker"></a>安装 service worker</h2><p>页面在注册了 service worker 之后就可以到下一个生命周期<code>install</code>, 一般在这个生命周期里进行一些文件的缓存, 有如下三个过程:</p><ol><li>打开缓存</li><li>缓存文件</li><li>确认所需文件是否全部缓存成功</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CACHE_NAME = <span class="string">'my-site-cache-v1'</span>;</span><br><span class="line"><span class="keyword">const</span> urlsToCache = [</span><br><span class="line">  <span class="string">'/'</span>,</span><br><span class="line">  <span class="string">'/styles/main.css'</span>,</span><br><span class="line">  <span class="string">'/script/main.js'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">self.addEventListener(<span class="string">'install'</span>, evt =&gt; &#123;</span><br><span class="line">  <span class="comment">// Perform install steps</span></span><br><span class="line">  evt.waitUntil(</span><br><span class="line">    caches.open(CACHE_NAME)</span><br><span class="line">      .then(<span class="function"><span class="params">cache</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Opened cache'</span>);</span><br><span class="line">        <span class="keyword">return</span> cache.addAll(urlsToCache);</span><br><span class="line">      &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>caches.open()</code>用来打开一个特定名称的缓存, 你可以理解为名称空间, 将要被缓存的文件都会被存在这个空间里面.<br><code>cache.addAll()</code>用来缓存一个 url 列表的所有文件, 它会根据 url 创建对应的 request, 如果本地没有这个请求对应的 response, 那么就会发起请求拿到对应的 response, 然后以 requst 为键名, 对应的 response 为键值, 对响应数据进行缓存. 添加单个缓存 url 可使用<code>cache.add()</code>.<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ExtendableEvent/waitUntil" target="_blank" rel="noopener"><code>event.waitUntil()</code></a>用来延长一个事件的生命周期, 例如在上面的调用中, 它延迟将被安装的worker视为 installing ，直到传递的 Promise 被成功地resolve. 这主要用于确保：服务工作线程在所有依赖的核心cache被缓存之前都不会被安装. 如果有文件缓存失败, 那么本次安装就会失败, 之后会自动重试.</p><h2 id="激活-service-worker"><a href="#激活-service-worker" class="headerlink" title="激活 service worker"></a>激活 service worker</h2><p>当一个 service worker 被安装了以后在生命时间进入激活(activate)状态呢? 一般来说如果是首次加载此页面, 那么在安装<code>install</code>完成以后就会进入激活状态, 但是如果此页面之前被旧的 service worker 控制, 那么新的 service worker 会进入<code>waiting</code>状态, 等到此页面被关闭然后被重新打开的时候, 新的 servie worker 才会接管这个页面, 你也可以使用<code>skipWaiting()</code>使得新的 service worker 跳过<code>waiting</code>状态, 直接进入<code>activate</code>状态, 当新的 servie worker 进入<code>activate</code>状态以后, 如果页面是在新的 service worker 被激活之前就加载了的, 那么这个页面的请求仍然还不受 service worker 控制, 如果你希望之前打开或加载的页面也能收到新的 servie worker控制, 一种方式是你可以使用<code>clients.claim()</code>来使得新的 servie worker 控制还未受控制的页面, 另一种方式就是关闭并重新打开页面, 注意如果只是刷新本页面, 那么本页面仍然还是受原来的 service worker 控制的.</p><p>通过<code>navigator.serviceWorker.controller</code>(其将为<code>null</code>或一个服务工作线程实例)检测客户端是否受控制</p><h2 id="缓存-fetch"><a href="#缓存-fetch" class="headerlink" title="缓存 fetch"></a>缓存 fetch</h2><p>当 service worker 被安装以后, service worker 就可以拦截 fetch 请求, 可以在这个时候返回缓存中的数据, 如果没有对应的缓存的话, 你可以手动发起这个请求, 然后将请求的结果返回给页面, 这里的作用相当于一个网络代理.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.respondWith(</span><br><span class="line">    caches.match(event.request)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Cache hit - return response</span></span><br><span class="line">        <span class="keyword">if</span> (response) &#123;</span><br><span class="line">          <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// IMPORTANT: Clone the request. A request is a stream and</span></span><br><span class="line">        <span class="comment">// can only be consumed once. Since we are consuming this</span></span><br><span class="line">        <span class="comment">// once by cache and once by the browser for fetch, we need</span></span><br><span class="line">        <span class="comment">// to clone the response.</span></span><br><span class="line">        <span class="keyword">var</span> fetchRequest = event.request.clone();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fetch(fetchRequest).then(</span><br><span class="line">          <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// Check if we received a valid response</span></span><br><span class="line">            <span class="keyword">if</span>(!response || response.status !== <span class="number">200</span> || response.type !== <span class="string">'basic'</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> response;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// IMPORTANT: Clone the response. A response is a stream</span></span><br><span class="line">            <span class="comment">// and because we want the browser to consume the response</span></span><br><span class="line">            <span class="comment">// as well as the cache consuming the response, we need</span></span><br><span class="line">            <span class="comment">// to clone it so we have two streams.</span></span><br><span class="line">            <span class="keyword">var</span> responseToCache = response.clone();</span><br><span class="line"></span><br><span class="line">            caches.open(CACHE_NAME)</span><br><span class="line">              .then(<span class="function"><span class="keyword">function</span>(<span class="params">cache</span>) </span>&#123;</span><br><span class="line">                cache.put(event.request, responseToCache);</span><br><span class="line">              &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>对所有的 fetch 请求进行拦截, 然后在缓存中搜索这个 request, 如果找到了, 那么就直接返回之前缓存的对应的 response, 如果没有找到, 那么就需要手动发起一个同样的请求, 注意 resquest 和 response 都是流对象, 只能读取一次, 所以在上面的代码中需要复制<code>clone()</code>这个流一份, 然后才能再次使用, 当获得返回数据的时候, 判断是正常响应的数据 <code>status === 200</code>然后就把这个数据缓存一份备用, 同时这个数据也会给浏览器一份作为响应.</p><h2 id="更新-service-worker"><a href="#更新-service-worker" class="headerlink" title="更新 service worker"></a>更新 service worker</h2><p>页面每次加载时都会下载一份 service worker 文件然后和以前的作对比, 如果发现不一样, 那么就会安装新的 service worker, 同时旧的不会被马上删除, 而是可以继续控制它已经控制的页面, 只是新打开的页面会被新的 service worker 接管, 当旧的页面全部都被关闭的时候, 旧的 service worker 就全面失效了, 新的 service worker 就是唯一的控制者了. 那么在新旧交替的一个时间, 新的 service worker 虽然已经安装完成, 且触发了 install 事件, 但是在旧的页面上会处于 waiting 状态, 如果希望新的 service worker 能够在安装后马上生效, 那么可以使用<code>skipWaiting()</code>来跳过 waiting 状态, 直接进入 activate 状态.</p><h2 id="更新缓存"><a href="#更新缓存" class="headerlink" title="更新缓存"></a>更新缓存</h2><p>有时候我们希望能够更新缓存, 让页面能够取到最新的数据.</p><ul><li>手动更新缓存的方法</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> cacheWhitelist = [<span class="string">'pages-cache-v1'</span>, <span class="string">'blog-posts-cache-v1'</span>];</span><br><span class="line"></span><br><span class="line">  event.waitUntil(</span><br><span class="line">    caches.keys().then(<span class="function"><span class="keyword">function</span>(<span class="params">cacheNames</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.all(</span><br><span class="line">        cacheNames.map(<span class="function"><span class="keyword">function</span>(<span class="params">cacheName</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (cacheWhitelist.indexOf(cacheName) === <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> caches.delete(cacheName);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们可以在 service worker 处于 activate 状态之后设置一份白名单, 然后遍历缓存, 凡是不是这个白名单里面的缓存都删除掉, 那就可以起到手动更新缓存的作用.</p><h2 id="三大特性研究"><a href="#三大特性研究" class="headerlink" title="三大特性研究"></a>三大特性研究</h2><p>参考文章: <a href="https://juejin.im/post/5af80c336fb9a07aab29f19c" target="_blank" rel="noopener">【PWA学习与实践】(8)使用Service Worker进行后台同步 - Background Sync</a></p><ol><li><p>资源请求(fetch)<br>这一点在上面的文件和请求缓存里面已经涉及到了.</p></li><li><p>推送通知(push)<br>推动通知(push)依赖<code>Notification API</code>和<code>PUSH API</code>, 目前来说这两个 API 的兼容性也不容乐观, 基本没法实用, 所以暂时不做多的讨论. 如果想要了解更多, 请查看上面的那篇文章.</p></li><li><p>后台同步(sync)<br>后台同步(sync)依赖于<code>Background Sync API</code>, 目前来说这个 API 的兼容惨不忍睹, 几乎只有 chrome 自家的产品支持. 所以在目前的阶段, 暂时不多去讨论后台同步这个部分. 可以查看上面那篇文章了解更多.</p></li></ol><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://developers.google.com/web/fundamentals/primers/service-workers/" target="_blank" rel="noopener">服务工作线程</a></p>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> service-worker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>web-font</title>
      <link href="/web-font/"/>
      <url>/web-font/</url>
      
        <content type="html"><![CDATA[<h1 id="网页字体加载过程及优化"><a href="#网页字体加载过程及优化" class="headerlink" title="网页字体加载过程及优化"></a>网页字体加载过程及优化</h1><p>现在很多网站为了视觉效果都在使用在线字体, 系统自带的字体可以直接使用, 但是自定义的在线字体需要通过<code>@font-face</code>来加载. 这里主要结合我自己的博客的实践来记录一下网页字体的加载过程及优化.<br><a id="more"></a></p><h2 id="在线字体格式"><a href="#在线字体格式" class="headerlink" title="在线字体格式"></a>在线字体格式</h2><p>目前来说有如下四种字体格式, <code>WOFF</code>, <code>SVG</code>, <code>EOT</code>和<code>OTF/TTF</code>, 兼容性可以在<a href="https://caniuse.com/" target="_blank" rel="noopener">caniuse</a>上面关注最新的情况</p><ul><li><p>WOFF<br><code>WOFF</code>全称是”Web Open Font Format”, 这种字体专门用于网络, 是由 Mozilla 与 Type Supply, LettError 及其他组织协同开发的一种网页字体格式, 使用了OpenType (OTF)和TrueType (TTF)字体里的存储结构和压缩算法, 所以在传输的时候可以节省带宽, 加载更快, 目前兼容性来说, IE9+以及其他绝大部分浏览器都可以使用, 是现在的大潮流, 推荐使用这种字体</p></li><li><p>OTF/TTF<br>全称是”OpenType Font”和”TrueType Font”, 是Windows 和 Mac 系统最常用的字体格式, 不过容易被非法复制, 目前的支持情况来说IE9+以上是部分支持, 其余的主流浏览器都没问题.</p></li><li><p>SVG<br><code>SVG</code>全称是”Scalable Vector Graphics”, 是一种用矢量图格式改进的字体格式，体积上比矢量图更小. 兼容性极差, 基本上只有safari系列支持</p></li><li><p>EOT<br>微软自家开发的字体, 也只有IE全系列支持, 连Edge都不支持</p></li></ul><p>关于字体的编辑推荐一个在线工具<a href="http://fontstore.baidu.com/static/editor/index.html#" target="_blank" rel="noopener">FontEditor</a>, 十分好用, 可以删除或者添加字体里面的字符集, 包括多个字体文件合成一个字体, 我目前就是把我博客中使用的Roboto Mono字体和Iconfont字体合成了一个字体文件, 同时删除了Roboto Mono中ASCII码字符集以外的字体, 因为我只用这个字体来渲染代码中出现的英文和数字等, 不需要其他的字符, 字体文件大小从原来的110k直接缩小成了18k.</p><h2 id="font-face"><a href="#font-face" class="headerlink" title="@font-face"></a><code>@font-face</code></h2><p><code>@font-face</code>格式:</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 完整格式, 不过我们日常使用时可能只会涉及到其中少数几个 */</span></span><br><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  [ font-family: &lt;family-name&gt;; ] ||</span><br><span class="line">  [ src: &lt;src&gt;; ] ||</span><br><span class="line">  [ unicode-range: &lt;unicode-range&gt;; ] ||</span><br><span class="line">  [ font-variant: &lt;font-variant&gt;; ] ||</span><br><span class="line">  [ font-feature-settings: &lt;font-feature-settings&gt;; ] ||</span><br><span class="line">  [ font-variation-settings: &lt;font-variation-settings&gt;; ] ||</span><br><span class="line">  [ font-stretch: &lt;font-stretch&gt;; ] ||</span><br><span class="line">  [ font-weight: &lt;font-weight&gt;; ] ||</span><br><span class="line">  <span class="selector-attr">[ font-style: &lt;font-style&gt;; ]</span></span><br><span class="line">  <span class="selector-attr">[ font-daipsy: &lt;font-display&gt;;]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例如, src 中可以使用 local 加载本地计算机的字体, url 用来加载在线的字体(注意跨域问题), 指定 format 可以帮助浏览器更快解析字体</span></span><br><span class="line"><span class="comment">  可选 format 有 【truetype(.ttf)、opentype（.otf）、truetype-aat、embedded-opentype(.eot)、svg(.svg)、woff(.woff)】</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: MyHelvetica;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">"Helvetica Neue Bold"</span>),</span><br><span class="line">       <span class="built_in">local</span>(<span class="string">"HelveticaNeue-Bold"</span>),</span><br><span class="line">       <span class="built_in">url</span>(MgOpenModernaBold.ttf) <span class="built_in">format</span>(<span class="string">'turetype'</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在css中使用<code>@font-face</code>定义字体, 当浏览器在解析到这一行css时并不会马上去下载这个字体, 而是会继续解析建立DOM树和CSSOM树, 只有当DOM树和CSSOM树结合生成渲染树的时候浏览器会进行一个判断, 如果在渲染树中存在一个会被渲染出来的节点(也就是<code>display</code>不能为<code>none</code>, 见下面”什么样的节点不会出现在渲染树中”)使用了这个字体, 那么浏览器在这个时候才会开始下载这个字体, 至于字体什么时候下载完毕那就不一定了, 同时渲染过程并不会被这个下载过程给阻塞, 那么在此时不确定所需字体是否加载完毕的时候该如何处理采用了这个字体的文字呢?</p><ul><li>什么样的节点不会出现在渲染树中<br>只有<code>display:none</code>的节点不会出现在渲染树中, 而其他的例如<code>visibility:hidden;</code>或者<code>opacity:0;</code>都是会出现在渲染树中的, 因为后面的几种情况虽然也是元素在页面不可见, 但是会在页面上占据它自己的空间, 这会影响到页面的布局, 同时这样的元素中的字体的大小和样式是会影响这个元素所占据的空间的大小的(例如<code>span</code>元素等的大小是被字体撑开的), 所以这样的元素中的字体当然是会被加载的, 因为浏览器要根据元素占据的空间大小去布局.</li></ul><p>由此引发出了三种解决方案<code>FOUT</code>, <code>FOIT</code>和<code>FOIT 3S</code>, 浏览器采取哪一种根据浏览器不同也有差异, 不过好消息是除了IE和Edge以外(对我来说基本是不考虑IE系列的…)的chrome, firefox, safari和opera都采用了第三种方案<code>FOIT 3S</code>. 下面简单介绍一下三种方案:</p><ol><li><code>FOUT</code>(Flash of Unstyled Text)<blockquote><p>当我们在 @font-face 中按优先级顺序定义了一系列字体（称之为 Font Stack）时，如果定义的最高优先级的字体在设备的字库中没有找到、或者引用了 WebFont 但是字体文件没有被加载，那么浏览器会继续轮询 Font Stack，直到找到可用的字体（这个过程就是寻找 fallback 字体）并先渲染出来；当自定义的字体文件被加载以后，浏览器会用这个字体文件重新渲染一遍画面。这有可能造成页面已经展示给用户以后页面的布局再次发生改动。而且，设计师并不喜欢 FOUT，因为这意味着有可能先让访客看到并不好看的备用字体、再看到好看的设计好的字体。但是 FOUT 不会因为字体文件无法加载而导致用户啥都看不到。IE 自从诞生之日起就在使用这种模式，现在 Edge 也在使用这种模式.</p></blockquote></li><li><code>FOIT</code>(Flash of Invisible Text)<blockquote><p>这是浏览器处理在设备的字库中没有找到、或者字体文件尚未被下载时的另一种方案。如果检测到设定了当前优先级下有设置自定义字体文件，那么浏览器就会不显示任何内容，直到字体显示出来。这有可能造成访客可能需要等待很长一段时间才能看见网页的内容；如果网络环境较为恶劣，甚至有可能会导致有的内容永久不可见。Safari 曾经在很长的一段时间内使用这种模式，并且 iOS WebKit 仍然在使用这种模式，Opera 也曾短暂使用过。(注: 目前这个方案已经被抛弃了)</p></blockquote></li><li><code>FOIT 3S</code><blockquote><p>这应该是一个比较折中的解决方案，并且目前 Chrome、Firefox、Safari 都在使用。在 3s 内使用了自定义字体样式的使用 FOIT 模式，在一定时间内（1s，3-5s，也可能是 10s，具体看浏览器和版本）使用 FOIT，如果字体仍然没有加载出来就降级到 FOUT 以改善用户的浏览体验。<br>–<a href="https://blog.nfz.moe/archives/webfont-123.html" target="_blank" rel="noopener">Web Font 123 - 再谈 WebFont 优化</a></p></blockquote></li></ol><p>我们可以使用<code>@font-face</code>中指定<code>font-display</code>来告诉浏览器该采用哪种方案, 一共有四个选项: <code>auto</code>, <code>swap</code>, <code>fallback</code>和<code>optional</code></p><ul><li>不指定的情况下默认值是<code>auto</code>则浏览器会采用<code>FOIT 3S</code>方案</li><li>指定为<code>swap</code>则浏览器会采用<code>FOUT</code>方案</li><li>指定为<code>fallback</code>则浏览器会等待一个极短的时间(大约100ms), 在这个时间之前不会显示任何内容, 这个时间结束之后如果字体还没有加载完成, 那么会采用优先级较低的字体来渲染, 之后等字体加载结束之后再使用正确的字体来重新渲染(根据我的测试, 如果这个字体加载的时间太长, 比如5s, 这个时间我没有准确测量过 那么即使之后字体加载完成了, chrome也不会再去重新渲染该字体, 如果短于这个时间, chrome是会去重新用正确的字体渲染的)</li><li>指定为<code>optional</code>则浏览器会采用和<code>fallback</code>类似的做法, 只不过等待字体加载的时间会更短(比如上面是5s, 那么现在可能只会等待加载1s)</li></ul><h2 id="FontFaceSet"><a href="#FontFaceSet" class="headerlink" title="FontFaceSet"></a><code>FontFaceSet</code></h2><p>除了在css中使用<code>@font-face</code>加载在线字体之外, js里面也有手动加载在线字体的API, 只不过目前还有一定兼容性问题, 但是我关心的chrome, firefox和safari的最近的版本都已经支持了, 所以对我来说是可以使用的. 关于这个API的定义可以参考CSS的这份<a href="https://drafts.csswg.org/css-font-loading/#font-load-event-examples" target="_blank" rel="noopener">草案</a>, 也可以参考这篇<a href="https://medium.com/@matuzo/getting-started-with-css-font-loading-e24e7ffaa791" target="_blank" rel="noopener">文章</a>的实践, 我自己归纳如下:</p><ol><li><p><code>new FontFace()</code><br>这个API用来生成一个<code>FontFace</code>字体实例, 接受三个参数, 第一个是字体名(对应<code>@font-face</code>中的<code>font-family</code>), 第二个是字体的的路径(对应<code>@font-face</code>中的<code>src</code>), 第三个是字体的其它信息(例如<code>@font-face</code>中的<code>font-style</code>和<code>font-weight</code>等), 第三个参数也可以不传, 返回一个<code>FontFace</code>字体实例对象</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> robotoMono = <span class="keyword">new</span> FontFace(<span class="string">'Roboto Mono'</span>, <span class="string">'url("https://store.kricsleo.com/blog/static/fonts/RobotoMono-Regular.ttf")'</span>, &#123;</span><br><span class="line">  style: <span class="string">'normal'</span>,</span><br><span class="line">  weight: <span class="string">'400'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>[FontFace].load()</code><br>这个API仅用来加载字体文件, 也就是浏览器会去下载对应的字体文件, 返回一个<code>Promise</code>对象, <code>resolve</code>时会抛出对应的<code>FontFace</code>对象, 可以自行捕获加载错误或者定义加载成功后的行为, 需要注意的是此时字体加载成功以后页面上的文字也不会使用该字体去渲染, 还需要使用下面的<code>add()</code>方法把字体加到<code>FontFaceSet</code>中才可以使用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">robotoMono.load().then(<span class="function"><span class="params">fontFace</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(fontFace.family, <span class="string">'loaded successfully!'</span>);</span><br><span class="line">&#125;, fontFace =&gt; &#123;</span><br><span class="line">   <span class="built_in">console</span>.error(<span class="string">'failed: '</span>, fontFace.status);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>[FontFaceSet].load()</code><br>这个API也可以用来加载字体, 只不过这个API可以不用先生成一个<code>FontFace</code>的实例, 可以使用CSS中已经定义的字体, 然后用这个API来手动加载已经定义的字体, 可以参考<a href="https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet/load" target="_blank" rel="noopener">MDN</a></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个参数为字体的相关信息, 分别是'font-style' 'font-weight', 'font-size'和'font-family'</span></span><br><span class="line"><span class="comment">// 第二个参数为字体中的某个字符, 可以用来限制加载的字体中必须有这个字符</span></span><br><span class="line"><span class="built_in">document</span>.fonts.load(<span class="string">'italic bold 16px Roboto'</span>, <span class="string">'ß'</span>).then(<span class="function"><span class="params">fontFace</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(fontFace.family, <span class="string">' has been loaded successfully!'</span>);</span><br><span class="line">&#125;, fontFace =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.warn(<span class="string">'loading error...'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>[FontFaceSet].add()</code><br>这个API用来把字体实例加到文档的字体列表<code>FontFaceSet</code>中, 使得字体可以被使用, 返回添加了字体实例之后的<code>FontFaceSet</code>对象</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.fonts.add(robotoMono);</span><br></pre></td></tr></table></figure></li><li><p><code>[FontFace.]status</code><br>这个API用来访问字体的状态, 共有四种, <code>unloaded</code>, <code>loading</code>, <code>loaded</code>和<code>error</code>, 一旦加载并准备好字体，<code>loaded</code>的<code>Promise</code>就会完成</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(robotoMono.status);</span><br><span class="line"></span><br><span class="line">robotoMono.loaded.then(<span class="function"><span class="params">fontFace</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(fontFace.family, <span class="string">'loaded successfully!'</span>);</span><br><span class="line">&#125;, fontFace =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'failed: '</span>, fontFace.status);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>[FontFaceSet].ready</code><br>这个API用来作为一系列字体加载的结果的回调, 当所有字体都成功加载时就会触发<code>Promise</code>的完成</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.fonts.ready.then(<span class="function"><span class="params">fontFaceSet</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'All fonts have been loaded successfully!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="轮子"><a href="#轮子" class="headerlink" title="轮子"></a>轮子</h2><p>为了达到通过js来定义和控制CSS字体的下载及替换默认的延迟下载行为的目的, 现在已经有一些可以使用的轮子, 比如<a href="https://github.com/bramstein/fontfaceobserver" target="_blank" rel="noopener">fontfaceobserver</a>和<a href="https://github.com/typekit/webfontloader" target="_blank" rel="noopener">Web Font Loader</a>, 其实原生的API也挺好用的而且比较简洁, 如果不想引入第三方库的话自己手写一下挺好的.</p>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> web-font </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>optimize-my-blog</title>
      <link href="/optimize-my-blog/"/>
      <url>/optimize-my-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo主题-MaterialFlow-主题改造"><a href="#hexo主题-MaterialFlow-主题改造" class="headerlink" title="hexo主题 MaterialFlow 主题改造"></a>hexo主题 MaterialFlow 主题改造</h1><p>打算对博客的访问速度和样式做一个改版优化.<br><a id="more"></a><br>因为看到屈屈的博客做了很多优化, 体验很好, 所以自己私下想要pk一下 目前使用的网站评测主要有google的<a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener">PageSpeed Insights</a>和<a href="https://gtmetrix.com/" target="_blank" rel="noopener">GTmetrix</a>, 屈屈在PageSpeed Insights上的评分是97分, 那么我的目标是98分及以上.</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol><li>精简页面请求数-不超过5个<br>目前已经删除掉多余的请求, 现在已经删减到5个, 分别是页面html, 脚本index.js, 样式style.css, 字体RobotoMono-Iconfont以及图标favicon.ico, 第一次请求会加载这五个, 从第二次开始就只会有一个请求, 就是页面html, 这个是必须的, 其余的四个均在缓冲中(如果用户没有手动清除缓存的话)</li><li>减少请求大小-单个请求不超过50k<br>目前都已经控制到30k以内, 除开一些特例, 目前页面上最大的请求就是页面本身(这个是正常且自然的), 其次就是页面上的图片, 这个我会尽量压缩, 但是也是在可以接受的范围, 其他的css, js, 和字体都在20k以内</li><li>控制首屏加载时间-不超过1s<br>目前首屏加载时间相当快了, 因为其实只是先显示一个加载动画, 然后等css加载完毕以后再显示主要内容</li><li>静态文件上cdn-七牛云cdn<br>目前js和css还有字体文件都已经使用七牛云的cdn服务</li><li>升级https<br>目前全站资源都切换到了https,主域名kricsleo.com已经使用github提供的免费https服务, cdn域名store.kricsleo.com也使用在阿里云上申请到的SSL证书升级到了https</li><li>干掉jquery<br>之前的主题使用的是jquery来实现一些功能, 现在已经将相关逻辑都使用原生js改写, 目前没有任何第三方依赖</li><li>精简字体文件<br>中文字体采用系统自带的字体渲染, 英文字体系统自带的比较难看, 加上我很喜欢google的一个字体<a href="https://fonts.google.com/specimen/Roboto+Mono" target="_blank" rel="noopener">Roboto Mono</a>, 所以犹豫了很久决定为了网站的风格稍微牺牲一点速度, 还是采用<code>@font-face</code>加载网络字体, 同时因为我用到了一些图标, 所以最后我决定自己把英文字体和<code>iconfont</code>的图标进行合并, 同时删除掉我用不到的字体和字符, 找到了一个很好用的在线编辑字体的工具<a href="http://fontstore.baidu.com/static/editor/index.html#" target="_blank" rel="noopener">FontEditor</a>, 把Roboto Mono中我用不到的基本都删掉了, 最后剩下的大概只有ASCII里面的字符, 同时把在阿里图标库找到的我要用的<code>iconfont</code>图标加了进去, 最后生成了一个适合我的<code>RobotoMono-Iconfont</code>字体文件, 大小只有17k, 最后将这个文件放到了我的cdn上由页面引用</li><li>优化图片加载-懒加载<br>图片很容易会拖慢网页的加载, 所以我对图片做了懒加载, 这里涉及到一个hexo的渲染问题, 我稍后来细写这一块.目前的效果是随着页面的滚动, 当图片进入视区中时才会去下载这个图片并显示.</li><li>避免css的加载和解析拖慢首屏的展现<br>这一块和控制首屏展现时间一起写.</li></ol><h2 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h2><p>对于上面的目标里面的部分记录一下达成的过程</p><ol><li>压缩所有资源<br>我使用的hexo生成的博客静态文件, 压缩的时候使用</li></ol><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><p>关于浏览器渲染字体的过程:<br><a href="https://blog.nfz.moe/archives/webfont-123.html" target="_blank" rel="noopener">Web Font 123 - 再谈 WebFont 优化</a><br>渲染字体的方式原生有三种: <code>FOUT</code>(Flash of Unstyled Text), <code>FOIT</code>(Flash of Invisible Text)和<code>FOIT 3S</code>(3s前为<code>FOIT</code>, 3s后还未加载完毕则降级为<code>FOUT</code>)</p><h2 id="优化关键渲染路径"><a href="#优化关键渲染路径" class="headerlink" title="优化关键渲染路径"></a>优化关键渲染路径</h2><p>html, css 和 JavaScript 之间的依赖关系<br><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/?hl=zh-cn" target="_blank" rel="noopener">关键渲染路径系列文章</a>;</p><p>普通: 停止解析 dom, 单线程转为下载并立即执行 js, 在 js 处理完毕之后再继续解析 dom, 会阻塞 dom 的解析和渲染<br>defer: 并行下载 js 文件, 但是将其执行时间推迟到 dom 构建完毕在domContentLoaded时间之前, 不会阻塞 dom 的解析但会阻塞dom 的渲染, 按照规范来说 js脚本是按照顺序执行的, 但是各个浏览器的实现可能不一样, 在实际中无法保证顺序执行这一点, 相当于把 js 脚本位置移动到<code>&lt;body&gt;</code>底部, 脚本在执行的时候dom 已经构建完毕, 可以操作 dom;<br>async: 并行下载 js 文件, 下载完成后立即执行, 执行时间可能在domContentLoaded之前, 也可能在domContentLoaded之后, 但是一定在 load 事件之前, 不会阻塞 dom 的解析和渲染, 但是在执行时不保证 dom 构建完毕, 同时也不保证各个脚本的执行顺序, 也就是说如果你的脚本里面有操作 dom 的地方, 那么这个地方可能会报错, 因为对应的 dom 节点可能还没有构建完成, 所以需要避免在此类脚本中操作 dom;值得注意的是，向 document 动态添加 script 标签时，async 属性默认是 true，</p><p>css 加载优化</p><ol><li>只显示头部和右侧</li></ol><p>css加载不会阻塞DOM树的解析<br>css加载会阻塞DOM树的渲染<br>css加载会阻塞后面js语句的执行、</p><p>js 可以阻塞 dom 树的构建和渲染</p><blockquote><p>实际上，内联脚本始终会阻止解析器，除非您编写额外代码来推迟它们的执行<br>–<a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/adding-interactivity-with-javascript?hl=zh-cn" target="_blank" rel="noopener">使用 JavaScript 添加交互</a></p></blockquote><p>preload firefox不支持</p><h1 id="总体步调"><a href="#总体步调" class="headerlink" title="总体步调"></a>总体步调</h1><ol><li>速度:<ul><li style="list-style:none"><input type="checkbox" checked> 请求数: 页面初始请求不超过6个(现在是5个)</li><li style="list-style:none"><input type="checkbox" checked> 请求大小: 最大请求大小不超过150k</li><li style="list-style:none"><input type="checkbox" checked> 不超过2s 加载完毕</li><li style="list-style:none"><input type="checkbox" checked> 静态文件采用 cdn 缓存</li><li style="list-style:none"><input type="checkbox" checked> 图片懒加载</li><li style="list-style:none"><input type="checkbox" checked> 干掉 jquery</li><li style="list-style:none"><input type="checkbox" checked> 字体文件太大了, 采用<a href="http://fontstore.baidu.com/static/editor/index.html#" target="_blank" rel="noopener">在线字体处理</a>, 去除多余文字, 加入需要的 iconfont</li><li style="list-style:none"><input type="checkbox"> 考虑内联或者其它方式处理 css, 目前 css 严重阻碍首屏展现</li></ul></li><li>样式<ul><li style="list-style:none"><input type="checkbox"> 整体风格天蓝色</li><li style="list-style:none"><input type="checkbox"> 采用卡片式布局(可以考虑重写, 既可以练习自己的建站技巧, 也可以去除原本 css 中的冗余部分)</li></ul></li><li>安全<ul><li style="list-style:none"><input type="checkbox" checked> 全站升级为 https</li><li style="list-style:none"><input type="checkbox" checked> 七牛云空间也一并配置 https</li></ul></li><li>评论<ul><li>等到前三点稳定以后再开启评论合适/速度快/国内可访问的评论系统</li></ul></li><li>搜索<ul><li style="list-style:none"><input type="checkbox"> 等到前四点稳定以后再考虑转用其他搜索实现毫秒级响应(第三方搜索或者自己部署 Elasticsearch)<br>目前采用的是<code>hexo-generator-search</code>生成的站内静态文件.<br>2019-04-24更新: 在阿里云的服务器上部署了 docker 环境, 然后在 docker 中部署了 Elasticsearch, 实现了搜索, 不过目前使用的搜索域名是’try.kricsleo.com’,<br>然后下一个问题是我的 markdown 文章如何导入 es 中, 每次新建或者更新文章时如何同步的更新 es 中的数据?</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web优化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Promise-Generator</title>
      <link href="/Promise-Generator/"/>
      <url>/Promise-Generator/</url>
      
        <content type="html"><![CDATA[<h1 id="异步解决方案"><a href="#异步解决方案" class="headerlink" title="异步解决方案"></a>异步解决方案</h1><p>本文是为了解js的异步操作解决方案发展过程. 从原始的回调地狱到ES6的<code>Promise</code>和<code>Generator</code>再到ES7提案阶段的<code>async</code>.<br>这篇笔记也拖了好久了, 该是时候丰富一下了.</p><a id="more"></a><h2 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h2><p>我们之前会把异步的事件写在回调函数里面, 如果有一系列的异步事件, 并且这些事件是按照顺序触发的, 那么我们的代码最后的结构很可能就是回调里面放回调再放回调, 一层层往里面嵌套, 堪称’地狱’.</p><p>下面的部分中我会使用<code>setTimeout</code>来模拟异步操作</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">fn, time = <span class="number">1500</span></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    fn();</span><br><span class="line">  &#125;, time);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按序打印三个日志</span></span><br><span class="line">delay(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'step 1'</span>);</span><br><span class="line">  delay(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'step 2'</span>);</span><br><span class="line">    delay(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'step 3'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a><code>Promise</code></h2><p>为了避免回调地狱的代码横向发展, 社区最早提出和实现了<code>Promise</code>, 后来被 ES6 纳入了标准中, 使得代码从横向发展变成了链式的纵向发展. 通过<code>then()</code>来执行回调, 使得代码的逻辑变得清晰, 写法也更简洁. 关键点有四个个, <code>resolve</code>, <code>reject</code>, <code>then</code>和<code>catch</code>.</p><ul><li><p><code>then</code>始终返回一个<code>Promise</code>, 如果返回值本身不是一个<code>Promise</code>的话那么会将其包装成一个<code>Promise</code>, 这样可以保证<code>then</code>的链式调用, 方便使用</p></li><li><p><code>catch</code>实际上是<code>then</code>的第二个参数的语法糖, 可以理解为<code>then(null, rejection)</code>的别名, 也就是说可以使用<code>catch</code>来省略<code>then</code>的第二个参数捕获错误的繁杂写法, 看起来更像是链式的调用. 同时<code>catch</code>也是始终返回一个<code>Promise</code>的</p></li></ul><p>常见的写法如下:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个 Promise 对象</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 异步操作失败</span></span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对这个 Promise 对象进行链式操作</span></span><br><span class="line">promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, error =&gt; &#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// js error</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们使用<code>Promise</code>来改写上面的按序打印三个日志的方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delayP</span>(<span class="params">fn, time = <span class="number">1500</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(fn());</span><br><span class="line">    &#125;, time)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">delayP(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'step 1'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> delayP(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'step 2'</span>)))</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> delayP(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'step 3'</span>)))</span><br></pre></td></tr></table></figure><p>看起来是把代码的横向发展变成了纵向发展, 使得逻辑流程更易于理解一点, 但是这种方式感觉也并没有太优雅, 所以回调的写法还在继续进化</p><p>其他api:</p><ul><li><code>Promise.all(iterable)</code> 参数为一个<code>Promise</code>数组, 返回值是一个<code>Promise</code><br>当参数数组中的所有项都<code>resolve</code>或者有任何一项出现<code>reject</code>时, 返回值立刻执行<code>then</code>, <code>resolve</code>的时候接受到的参数也是一个数组, 每一项是<code>all()</code>里面的数组项对应的结果, <code>reject</code>的时候参数就是数组中最先<code>reject</code>的那一项的结果</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> step1 = delayP(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'step 1'</span>));</span><br><span class="line"><span class="keyword">const</span> step2 = delayP(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'step 2'</span>));</span><br><span class="line"><span class="built_in">Promise</span>.all([step1, step2])</span><br><span class="line">  .then(<span class="function"><span class="params">values</span> =&gt;</span> <span class="built_in">console</span>.log(values))</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure><ul><li><code>Promise.race(iterable)</code> 参数为一个<code>Promise</code>数组, 返回值是一个<code>Promise</code><br>当参数数组中有任何一项执行结束, 返回值就立刻执行<code>then</code>, <code>resolve</code>和<code>reject</code>的参数都是最先执行结束的那个<code>Promise</code>的结果</li></ul><p>注意上面两个api参数数组里面如果有某一项不是<code>Promise</code>, 那么会被包装成<code>Promise</code>, 类似<code>Promise.resolve()</code></p><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a><code>Generator</code></h2><p><code>callback</code>, <code>Promise</code>, <code>Generator</code>和<code>async</code>的发展过程如下:</p><p><img src="" data-src="https://static.cnodejs.org/FgKu20kvFqHrkgpjbQxXkV1DmrG1" alt="js流程控制发展过程"></p><blockquote><p>Generator 函数有多种理解角度。语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。<br>执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。<br>形式上，Generator 函数是一个普通函数，但是有两个特征。一是，function关键字与函数名之间有一个星号；二是，函数体内部使用yield表达式，定义不同的内部状态（yield在英语里的意思就是“产出”）</p></blockquote><p>– <a href="http://es6.ruanyifeng.com/#docs/generator" target="_blank" rel="noopener">Generator 函数的语法</a></p><p><code>Generator</code>函数最大的特点是可以通过<code>yeild</code>关键字来交出js的执行权, 从而可以让函数里面的内容在任意位置停下来, 交出执行权, 让函数外面的代码获得执行权, 等到该函数重新获得执行权的时候可以接着上次的断点继续执行.</p><p>在这种交换执行权的过程中也可以传递数据, 调用用<code>next(arg)</code>括号里面的<code>arg</code>会被传递给函数内部, 在函数里相应的地方可以获取传进来的<code>arg</code>, 同时调用<code>next(arg)</code>会返回一个对象, 对象里面包含两个值<code>value</code>和<code>done</code>, <code>value</code>是函数中断点处向外传递的数据, <code>done</code>是<code>Boolean</code>型的值, 表示该函数是否已经执行完毕</p><p><code>Generator</code>可以单独使用, 也可以和<code>Promise</code>配合起来使用, 每一个<code>yield</code>都会停止<code>Generator</code>函数的运行, 而每一次调用<code>next()</code>都可以让函数接着运行直到下一个<code>yield</code>处, 就像个懒人一样, 抽一鞭子才会动一下(鲁迅说的). 所以如果需要<code>Generator</code>函数自动运行直到函数结束的话一般会搭配上一个自动执行器函数, 通过自动执行器函数来让<code>Generator</code>函数每次一停下就接着又往下运行直到<code>done</code>为<code>true</code>函数运行才结束</p><p>(注意<code>Generator</code>并不是一定要搭配<code>Promise</code>一起用, 他们是分开的两个东西, 只不过都可以解决回调问题)</p><p>下面模拟该过程</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 仍然使用上面的 delayP 函数 来定义一个 Generator 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delayP</span>(<span class="params">fn, time = <span class="number">1500</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(fn());</span><br><span class="line">    &#125;, time)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> generator = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> step1 = <span class="keyword">yield</span> delayP(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'step 1'</span>));</span><br><span class="line">  <span class="keyword">const</span> step2 = <span class="keyword">yield</span> delayP(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'step 2'</span>));</span><br><span class="line">  <span class="keyword">const</span> step3 = <span class="keyword">yield</span> delayP(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'step 3'</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'result: '</span>, step1, step2, step3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成一个遍历器对象</span></span><br><span class="line"><span class="keyword">const</span> g = generator();</span><br><span class="line"><span class="comment">// 手动执行遍历</span></span><br><span class="line">g.next().value</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> g.next(<span class="string">'res1'</span>).value)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> g.next(<span class="string">'res2'</span>).value)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> g.next(<span class="string">'res3'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义一个简单的自动执行器函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">generator</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> g = generator();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = g.next();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'res'</span>, res);</span><br><span class="line">    <span class="keyword">if</span>(res.done) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res.value.then(<span class="function"><span class="params">()</span> =&gt;</span> next());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用自动执行器函数来自动执行</span></span><br><span class="line">run(generator);</span><br></pre></td></tr></table></figure><h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><p>ES7 里面引入了<code>async</code>让异步操作更为便捷, 目前来看这是最优雅的异步做法. 我们可以把<code>async</code>看做<code>Generator</code>的语法糖, 底层原理是一致的, 只不过在写法上更为简洁.<br>我们使用<code>async</code>来改写一下上面的按序打印三个日志的过程</p><p>参考: <a href="https://juejin.im/post/5a9516885188257a6b061d72" target="_blank" rel="noopener">与Promise血脉相连的async/await</a></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// async函数写法</span></span><br><span class="line"><span class="keyword">const</span> asy = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> step1 = <span class="keyword">await</span> delayP(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'step 1'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'res1'</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> step2 = <span class="keyword">await</span> delayP(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'step 2'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'res2'</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> step3 = <span class="keyword">await</span> delayP(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'step 3'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'res3'</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'res:'</span>, step1, step2, step3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// async函数的执行</span></span><br><span class="line">asy()</span><br></pre></td></tr></table></figure><p>从上面的比较可以看出, 从形式上来说是关键词不一样.</p><ul><li><p><code>Generator</code>函数使用<code>*</code>来表示一个异步函数, <code>async</code>函数使用<code>async</code>来表示一个异步函数</p></li><li><p><code>Generator</code>函数使用<code>yield</code>来进行一个异步操作, <code>async</code>函数使用<code>await</code>来进行一个异步操作, 这两者后面也都可以是同步操作, 比如可以同步计算得到的值, 只不过<code>Generator</code>经常搭配使用的<code>co</code>模块约定，<code>yield</code>命令后面只能是<code>Thunk</code>函数或<code>Promise</code>对象</p></li><li><p><code>Generator</code>返回的是一个<code>iterator</code>对象, 需要使用<code>next()</code>来遍历执行, <code>async</code>函数返回的是一个<code>Promise</code>对象, 可以对返回值直接调用<code>then()</code>方法</p></li><li><p>在<code>async</code>里面的<code>await</code>会把后面的内容转成一个<code>Promise</code>(如果本身不是一个<code>Promise</code>的话), 然后自动获取<code>Promise</code>完成后的结果, 一旦有一个<code>await</code>后面的<code>Promise</code>出现了<code>reject</code>状态, 那么会直接返回这个<code>reject</code>的<code>Promise</code>, 后面的代码都不会执行了. 你可以使用<code>try/catch</code>来包裹可能出现<code>reject</code>的地方来让代码始终向下执行</p></li></ul><p>从内部的工作过程来说, <code>Generator</code>函数没有自动执行的功能, 如果需要内部的异步步骤一步步执行, 那么你需要手动一步步调用<code>next()</code>方法来驱动异步的进行(我们也可以去实现一个自动执行器函数比如有名的<a href="https://github.com/tj/co" target="_blank" rel="noopener">co</a>模块来帮助我们完成一步步调用<code>next</code>这个过程). 而<code>async</code>函数简化了这个过程, 内置了执行器, 可以自动一步一步的按照顺序执行异步操作.</p><p><code>async</code>用起来比<code>generator</code>更加简洁直接, 但是付出的代价就是没有<code>generator</code>灵活, 因为<code>await</code>只是单纯的把 promise resolve后的值原封不动的返回, 而<code>yield</code>则可以自己完全控制返回什么样的值, 这也就意味着使用<code>generator</code>可以在函数的执行过程中向函数内注入各种各样的值, 这带来了更多的可操作性.</p><p>我这里只是一叶障目, generator 有着更多的含义和用法. 在我能够完整的说个大概之前, 还是请参考一些别人的理解吧.</p><p>参考文章: <a href="https://juejin.im/post/5b4c22aa6fb9a04faf479be1" target="_blank" rel="noopener">[译] Javascript（ES6）Generator 入门</a></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个用于理解 generator 和 next()传参的问题</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">  <span class="keyword">const</span> j = <span class="number">5</span> * (<span class="keyword">yield</span> (i * <span class="number">10</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(j);</span><br><span class="line">  <span class="keyword">const</span> k = <span class="keyword">yield</span> (<span class="number">2</span> * k / <span class="number">4</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(k);</span><br><span class="line">  <span class="keyword">return</span> i + j + k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = gen(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(g.next(<span class="number">20</span>)); <span class="comment">// &#123;value: 100, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next(<span class="number">10</span>)); <span class="comment">// &#123;value: 25, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next(<span class="number">5</span>));  <span class="comment">// &#123;value: 65, done: true&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">Promise</span>.resolve(<span class="number">90</span>);</span><br><span class="line"><span class="keyword">const</span> b = <span class="built_in">Promise</span>.reject(<span class="number">78</span>);</span><br><span class="line"><span class="keyword">const</span> c = <span class="built_in">Promise</span>.reject(<span class="number">56</span>);</span><br><span class="line"><span class="built_in">Promise</span>.all([a, b, c]).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> callback </tag>
            
            <tag> promise </tag>
            
            <tag> async </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>same-origin-and-CORS</title>
      <link href="/same-origin-and-CORS/"/>
      <url>/same-origin-and-CORS/</url>
      
        <content type="html"><![CDATA[<h1 id="浏览器同源策略"><a href="#浏览器同源策略" class="headerlink" title="浏览器同源策略"></a>浏览器同源策略</h1><p>目前的 web 开发还相当的依赖 cookie , 而cookie的使用限制于浏览器的同源策略(same-origin policy), 同时这个策略也是保证我们网站信息安全的基础, 这篇文章主要了解一下浏览器同源策略具体的含义, 以及在实际开发中如何绕过这一限制来达到跨域请求数据的目的.</p><a id="more"></a><h2 id="何为同源"><a href="#何为同源" class="headerlink" title="何为同源"></a>何为同源</h2><p>一个访问地址大致可以分为<code>&lt;协议&gt;&lt;域名&gt;&lt;端口&gt;&lt;路径&gt;</code>四个部分: 例如<a href="https://www.example.com:80/home/index.html?page=3" target="_blank" rel="noopener">https://www.example.com:80/home/index.html?page=3</a>, <code>https</code>为协议, <code>www.example.com</code>为域名, 域名内也可分为顶级域名, 一级域名, 二级域名, 三级域名等等, 具体如何拆分的讨论可以参考知乎的一个<a href="https://www.zhihu.com/question/29998374" target="_blank" rel="noopener">帖子</a>, 你只要明白意思就可以了, 这里的话我采用其中一种说法来描述一下, <code>com</code>为顶级域名, <code>example</code>为一级域名, <code>www</code>为二级域名, 接下来的<code>80</code>为端口, <code>/home/index.html?page=3</code>为路径, 这样我们就把一个URL的各个部分拆分开了.</p><p>所谓同源, 就是限制了<code>&lt;协议&gt;&lt;域名&gt;&lt;端口&gt;</code>这三个部分必须要一模一样, 此时就称为同源, 如果这三块有任何一个地方不一样就产生了跨域.</p><h2 id="跨域带来的限制"><a href="#跨域带来的限制" class="headerlink" title="跨域带来的限制"></a>跨域带来的限制</h2><p>在跨域情况下有如下几种情况会受到限制:</p><ol><li>两个域之间无法互相读取Cookie、LocalStorage 和 IndexDB<br>例如a.com向api.com发起请求的时候, 请求中默认是不会携带a.com域下的cookie的, 也就是说api.com默认情况下是无法获取a.com的cookie的</li><li>两个域之间无法互相获取和操作DOM<br>例如a.com的一个页面内有一个iframe, iframe里面加载的是b.com的一个一个页面, 那么这两个页面之间是无法获取另一方的DOM来进行操作的</li><li>两个域之间无法使用ajax通信<br>例如a.com向api.com发起一个ajax请求(XMLHttpRequest或者fetch()), 那么返回的数据默认会被浏览器拦截并且丢弃然后控制台提示产生一个跨域的错误, 所以在js中是无法拿到返回数据的</li></ol><h2 id="cookie的概念"><a href="#cookie的概念" class="headerlink" title="cookie的概念"></a>cookie的概念</h2><p>这里我们首先看一下cookie的相关概念, cookie是存在客户端浏览器的一小段文本, 不同的浏览器对cookie的大小有不同的限制, 可以通过<code>document.cookie</code>来获取本域名下的cookie信息, cookie中包含如下属性: <code>key=value</code>, <code>Domain</code>, <code>Path</code>, <code>Expires</code>, <code>Max-Age</code>, <code>Secure</code>和<code>HttpOnly</code>, 还有用的比较少的<code>HostOnly</code>等, 可以查看<a href="https://imququ.com/post/host-only-cookie.html" target="_blank" rel="noopener">这篇文章</a>, 各个属性之间用英文分号和空格（”; “）连接, 大概说一下各个属性.</p><ul><li><code>key=value</code><br>cookie最主要的内容, 设置cookie的值, 例如<code>username=krics;</code>, 代表在cookie中存储了一个<code>username</code>, 它的值是<code>krics</code>, 必填项.</li><li><code>Domain</code><br>cookie的域名, 默认是当前域名, 和<code>Path</code>配合指定 cookie 的具体路径. 注意在手动设置时domain是可以设置为页面本身的域名（本域），或页面本身域名的父域，但不能是公共后缀<a href="https://publicsuffix.org/" target="_blank" rel="noopener"><code>public suffix</code></a>。举例说明下：如果页面域名为 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>, domain可以设置为“<a href="http://www.baidu.com”，也可以设置为“baidu.com”，但不能设置为“.com”或“com”" target="_blank" rel="noopener">www.baidu.com”，也可以设置为“baidu.com”，但不能设置为“.com”或“com”</a>. 设置<code>Domain</code>时的前面带点‘.’和不带点‘.’的区别:<ul><li>带点：任何 subdomain 都可以访问，包括父 domain</li><li>不带点：只有完全一样的域名才能访问，subdomain 不能（但在 IE 下比较特殊，它支持 subdomain 访问）</li></ul></li><li><code>Path</code><br>cookie的可访问路径, 默认为”/“，表示指定域下的所有路径都能访问, 它是在域名的基础下，指定可以访问的路径。例如cookie设置为”domain=.google.com.hk; path=/webhp”，那么只有”.google.com.hk/webhp”及”/webhp”下的任一子目录如”/webhp/aaa”或”/webhp/bbb”会发送cookie信息，而”.google.com.hk”就不会发送，即使它们来自同一个域。</li><li><code>Expires</code><br>cookie的过期日期, 内容格式是GMT时间字符串, 例如<code>Expires=&quot;Tue, 16 Oct 2018 04:01:45 GMT;&quot;</code>代表此cookie将在这个时间过期, 在此之前cookie都是有效的, 可以使用<code>Date</code>类型的<code>toGMTString()</code>方法来获取这个时间戳, 可选属性. 如果没有设置该项那么默认 cookie 的有效期是本次会话期间, 也就是说在关闭浏览器前这个 cookie 一直有效, 但是一关闭浏览器这个 cookie 马上就失效被删除, 这种 cookie 也叫做<code>session cookie</code>. 现在在<code>http/1.1</code>中已经推荐使用<code>Max-Age</code>来代替这个属性, 但是由于老版本的IE(ie6、ie7 和 ie8)只可使用<code>Expires</code>属性, 不兼容<code>Max-Age</code>这个新属性, 所以使用时请考虑到这一点</li><li><code>Max-Age</code><br>cookie的最大有效时间, 在<code>http/1.1</code>中引入的新属性, 单位是秒, 代表从<strong>客户端</strong>的此刻开始到多少秒后, 这个cookie会失效, 例如<code>Max-Age=3600</code>, 代表在客户端设置这个cookie起的3600秒后这个cookie失效, 可选属性. 默认值是<code>-1</code>, 含义是本次会话期间有效, 关闭浏览器则失效, 设置为<code>0</code>代表删除该 cookie, 设置为正整数代表的有效秒数.<br>注意对于对于<code>Expires</code>和<code>Max-Age</code>都可以使用的浏览器而言, 这两个如果都设置了, 那么<code>Max-Age</code>的优先级高(IE除外, IE只使用<code>Expires</code>), 如果只设置一个, 那就以设置的那个为准(同样IE除外), 如果都没有设置, 那么cookie的有效时间为本次会话期间, 只要浏览器不关闭, 那么这个cookie一直有效, 如果浏览器被关闭, 那么这个cookie就会被删除, 像这样没有设置<code>Expires</code>和<code>Max-Age</code>的cookie, 我们也可以称为session cookie, 因为它是与本次会话相关联的. 可选属性</li><li><code>Secure</code><br>cookie的安全标志, 内容很简单, 只需要指定一个<code>Secure</code>字段就可以了, 而不是键值对的形式, 当指定是<code>Secure</code>之后, 这个cookie只会在使用<code>SSL</code>(例如<code>HTTPS</code>)连接时才会被发送到服务器. 默认为空, 那么默认情况下不论是不是安全的连接在可以发送 cookie 的时候都会发送这个cookie. 可选属性. 如果想在客户端即网页中通过 js 去设置secure类型的 cookie，必须保证网页是https协议的。在http协议的网页中是无法设置secure类型cookie的。</li><li><code>HttpOnly</code><br>cookie的安全保证, 内容也很简单, 只需要指定一个<code>HttpOnly</code>字段就可以了, 当指定为<code>HttpOnly</code>后, 就无法通过js去访问或者设置这个cookie的内容, 同时也无法通过js来设置<code>HttpOnly</code>的cookie, 这个字段只有服务器能够操作, 这个cookie会正常的发送给服务器, 只是对客户端的js不可见而已. 可选属性</li></ul><p>有两种方式产生cookie, 一种是服务器的响应, 而是客户端的js.</p><ul><li>服务器响应方式<br>如果服务器在响应的数据中添加一个响应头: <code>Set-Cookie: name=krics; Path=/; Domain=.example.com; Max-Age=31536000</code>, 例如下面JAVA的写法,</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成一个cookie</span></span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"name"</span>, <span class="string">"krics"</span>);</span><br><span class="line">cookie.setPath(<span class="string">"/"</span>);</span><br><span class="line">cookie.setDomain(<span class="string">".example.com"</span>);<span class="comment">//这样设置，能实现不同二级域名的两个网站共用这个cookie, 自定义</span></span><br><span class="line">cookie.setMaxAge(<span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);<span class="comment">// 不设置的话，则cookies不写入硬盘,而是写在内存,只在当前页面有用,以秒为单位</span></span><br><span class="line">response.addCookie(cookie);         <span class="comment">//添加第一个Cookie</span></span><br><span class="line"><span class="comment">// 可以重复上面的代码添加多个cookie</span></span><br></pre></td></tr></table></figure><p>这样就会在响应头中添加上面示例给出的额外的头信息.</p><ul><li>客户端js<br>在客户端通过js方式<code>document.cookie</code>既能访问cookie, 也能设置cookie, 例如<code>document.cookie=&quot;name=krics; Path=/; Domain=.example.com; Max-Age=31536000&quot;</code>, 那么就会添加一个cookie到浏览器中, 这里比较有意思的是并不是多次设置<code>document.cookie</code>其实是追加内容, 不像一般js那样会覆盖内容, 之后有时间可以看一下这里的处理. 这里因为浏览器没有提供其他的api来操作cookie, 所以我们一般会自己封装一个工具类来读写cookie, 这里给出我的一个比较简单的实现<a href="https://kricsleo.github.io/code/Cookie.js">Cookie.js</a></li></ul><h2 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h2><p>这里可以参考阮一峰的文章<a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">浏览器同源政策及其规避方法</a>.</p><h3 id="iframe形式的跨域"><a href="#iframe形式的跨域" class="headerlink" title="iframe形式的跨域"></a>iframe形式的跨域</h3><ol><li>如果两个窗口一级域名相同，只是二级域名不同，那么可以通过设置document.domain属性为同一个值，就可以规避同源政策，拿到DOM。</li><li>片段标识符（fragment identifier）指的是，URL的#号后面的部分，比如<a href="http://example.com/x.html#fragment的#fragment" target="_blank" rel="noopener">http://example.com/x.html#fragment的#fragment</a>。如果只是改变片段标识符，页面不会重新刷新。但是会触发<code>window</code>的<code>onhashchange</code>事件, 可以通过监听这个事件来传递数据.</li><li>监听<code>window.name</code>属性。这个属性的最大特点是，无论是否同源，只要在同一个窗口里，前一个网页设置了这个属性，后一个网页可以读取它, 而且这个值得容量很大, 字符串形式.</li><li>以上三种方式都属于hack, HTML5为了解决这个问题，引入了一个全新的API：跨文档通信 API（Cross-document messaging）,这个API为window对象新增了一个<code>window.postMessage</code>方法，允许跨窗口通信，不论这两个窗口是否同源。具体使用可以参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage" target="_blank" rel="noopener">MDN</a>, 需要注意的是在IE下有一定的兼容性问题.</li><li>通过window.postMessage，读写其他窗口的 LocalStorage . 也是基于<code>window.postMessage</code>的.</li></ol><h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><p>这里才是重点, 一个跨域的AJAX请求要想正常交互, 有如下四种解决方案:</p><ol><li>JSONP<br>它的基本思想是，网页通过添加一个<code>&lt;script&gt;</code>元素，向服务器请求JSON数据，这种做法不受同源政策限制；服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。<br>这种方式的优点是简单兼容性好, 服务器的改造小, 但是这种方式因为是通过加载js脚本的形式实现的, 所以只支持<code>GET</code>方式.</li><li>WebSocket<br>WebSocket是一种通信协议，使用ws://（非加密）和wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。<br>这种方式对服务器的改造最大, 需要更改协议</li><li>Nginx<br>通过在服务器端布置Nginx, 通过它代理请求, 然后由Nainx将请求转发到真正的数据服务器上, 这种方式需要在服务器端安装Nginx, 然后需要配置Nginx才行</li><li>CORS<br>CORS是跨源资源分享（Cross-Origin Resource Sharing）的缩写。它是W3C标准，是跨源AJAX请求的根本解决方法。相比JSONP只能发GET请求，CORS允许任何类型的请求。<br>关于CORS, 可以参考阮一峰的文章<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a>, 简单来说是按照下文配置.</li></ol><h3 id="CORD"><a href="#CORD" class="headerlink" title="CORD"></a>CORD</h3><ol><li><p>服务器端配置</p><ul><li><p><code>Access-Control-Allow-Origin</code>: 代表允许跨域的域名,可选字段, 默认不允许跨域请求, 如果配置为<code>&quot;*&quot;</code>代表接受任何一个域发送的ajax请求, 也可以指定一个特定的域名, 表示只接受这个域发送的跨域请求, 注意- 不能设置多个域, 要么是通配符<code>&quot;*&quot;</code>, 要么是某一个域</p></li><li><p><code>Access-Control-Allow-Credentials</code>: 代表是否允许跨域请求携带cookie, 可选字段, 默认不允许, 设置为<code>true</code>代表允许, 但是这个字段和上面的<code>Access-Control-Allow-Origin</code>有一点冲突的是, 如果设置为<code>true</code>, 那么<code>Access-Control-Allow-Origin</code>只能配置特定的一个允许跨域的域名, 这个时候不能配置通配符<code>&quot;*&quot;</code></p></li><li><p><code>Access-Control-Expose-Headers</code>: 代表允许客户端获取的额外的头字段信息, 可选字段, 默认无法拿到自定义的头部字段, CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：<code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code>。如果想拿到其他字段，就必须在<code>Access-Control-Expose-Headers</code>里面指定。例如可以指定<code>Access-Control-Expose-Headers: FooBar</code>，那么客户端可以通过<code>response.getResponseHeader(&#39;FooBar&#39;)</code>拿到FooBar字段的值。</p></li></ul></li><li><p>客户端配置<br><code>withCredentials</code>: 代表跨域请求是否发送对应域的cookie, 可选字段, 默认不会发送(有的浏览器可能例外, 也可以显示的设置为<code>false</code>), 设置为<code>true</code>代表发送, 需要注意的是客户端是需要和服务端配合使用的, 当设置为<code>true</code>时, 虽然cookie发送过去了, 但是服务器要配置<code>Access-Control-Allow-Credentials: true</code>和<code>Access-Control-Allow-Origin: www.example.com</code>才能正确接收到cookie</p></li></ol><p>当然还有更详细的内容, 如果碰到更多问题, 可以去看一下上面阮一峰的关于跨域的文章, 也可以参考Faremax的一片文章<a href="https://segmentfault.com/a/1190000016590427" target="_blank" rel="noopener">全解跨域请求处理办法</a>.</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://segmentfault.com/a/1190000004556040#articleHeader12" target="_blank" rel="noopener">聊一聊 cookie</a><br><a href="https://segmentfault.com/a/1190000016590427" target="_blank" rel="noopener">全解跨域请求处理办法</a><br><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a></p>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> same-origin </tag>
            
            <tag> CORS </tag>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Content-Type</title>
      <link href="/Content-Type/"/>
      <url>/Content-Type/</url>
      
        <content type="html"><![CDATA[<h1 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h1><p><code>HTTP/1.1</code>协议规定的<code>HTTP</code>请求方法有<code>OPTIONS</code>、<code>GET</code>、<code>HEAD</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>、<code>TRACE</code>、<code>CONNECT</code>这几种, 用的最多的是<code>GET</code>和<code>POST</code>, 这里主要说一下提交请求时的请求头中<code>Content-Type</code>字段<br><a id="more"></a></p><h2 id="http请求结构"><a href="#http请求结构" class="headerlink" title="http请求结构"></a><code>http</code>请求结构</h2><p><code>http</code>请求分为三个部分: 状态行, 请求头和消息主体, 结构如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;method&gt; &lt;request url&gt; &lt;version&gt;</span><br><span class="line">&lt;headers&gt;</span><br><span class="line"></span><br><span class="line">&lt;entity-body&gt;</span><br></pre></td></tr></table></figure><h2 id="Content-Type类型"><a href="#Content-Type类型" class="headerlink" title="Content-Type类型"></a>Content-Type类型</h2><p><code>Content-Type</code>有如下常见的类型:</p><ul><li><code>text/plain</code>: 文本类型</li><li><code>text/html</code>: html文件类型</li><li><code>text/css</code>: css文件类型</li><li><code>text/javascript</code>: javascript文件类型</li><li><code>application/x-www-form-urlencoded</code> POST讨论</li><li><code>multipart/form-data</code> POST讨论</li><li><code>application/json</code> POST讨论</li><li><code>text/xml</code> POST中讨论</li></ul><p>由于<code>GET</code>方式的数据实际上是以<code>QueryString</code>的方式放在<code>&lt;request url&gt;</code>中的(非ASCII字符会被转码), 例如’<a href="https://www.example.com?key1=value1&amp;key2=value2" target="_blank" rel="noopener">https://www.example.com?key1=value1&amp;key2=value2</a>‘, 所以对<code>GET</code>讨论<code>Content-Type</code>没有意义</p><p><code>http</code>协议规定<code>POST</code>提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的<code>HTTP</code>请求满足上面的格式就可以。</p><p>服务端通常是根据请求头（headers）中的<code>Content-Type</code>字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以有必要了解<code>Content-Type</code>的内容. 目前在<code>POST</code>请求中所使用的<code>Content-Type</code>主要有如下四种类型: <code>application/x-www-urlencoded</code>, <code>multipart/form-data</code>, <code>application/json</code>, <code>text/xml</code>, 下面详细说一下这四种类型.</p><h3 id="application-x-www-urlencoded"><a href="#application-x-www-urlencoded" class="headerlink" title="application/x-www-urlencoded"></a><code>application/x-www-urlencoded</code></h3><p>这应该是最常见的<code>POST</code>提交数据的方式了。浏览器的原生<code>&lt;form&gt;</code>表单，如果不设置<code>enctype</code>属性，那么默认就会以这种方式提交数据。这种方式会将表单中的数据按照<code>key1=value1&amp;key2=value2</code>的形式连接成字符串, 同时会将出现的非<code>ASCII</code>字符进行编码, 编码方式可以参考<code>encodeURIComponent()</code>函数, 例如下面这个表单提交时的数据结构:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST http://www.example.com HTTP/1.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded;charset=utf-8</span><br><span class="line"></span><br><span class="line">title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3</span><br></pre></td></tr></table></figure><p>但是需要注意的是这是在<code>&lt;form&gt;</code>表单中没有<code>type=file</code>形内容的时候的提交方式, 如果表单中有二进制内容需要提交, 比如文件或者图片等, 那么就无法使用<code>application/x-www-urlencoded</code>方式, 需要转而使用下面会谈到的<code>multipart/form-data</code>方式.</p><h3 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a><code>multipart/form-data</code></h3><p>当需要提交二进制数据如文件或者图片时就需要使用这种<code>multipart/form-data</code>, 一个常见的提交内容结构如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST http://www.example.com HTTP/1.1</span><br><span class="line">Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line">Content-Disposition: form-data; name=&quot;text&quot;</span><br><span class="line"></span><br><span class="line">title</span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;chrome.png&quot;</span><br><span class="line">Content-Type: image/png</span><br><span class="line"></span><br><span class="line">PNG ... content of chrome.png ...</span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA--</span><br></pre></td></tr></table></figure><p>请求头中的<code>boundary</code>代表将使用后面这一长串的字符串来分隔不同的字段, 消息主体里按照字段个数又分为多个结构类似的部分，每部分都是以<code>--boundary</code>开始，紧接着是内容描述信息，然后是回车，最后是字段具体内容（文本或二进制）。如果传输的是文件，还要包含文件名和文件类型信息。消息主体最后以<code>--boundary--</code>标示结束, 关于<code>multipart/form-data</code>的详细定义，请前往<a href="http://www.ietf.org/rfc/rfc1867.txt" target="_blank" rel="noopener">rfc1867</a>查看。</p><p><code>application/x-www-urlencoded</code>和<code>multipart/form-data</code>都是浏览器原生支持的，而且现阶段标准中原生<code>&lt;form&gt;</code>表单也只支持这两种方式（通过<code>&lt;form&gt;</code>元素的<code>enctype</code>属性指定，默认为 application/x-www-form-urlencoded。其实<code>enctype</code>还支持<code>text/plain</code>，不过用得非常少）。</p><p>下面提到的<code>Content-Type</code>属于随着技术的发展, 我们自定义出来的新的数据提交方式, 更为便捷.</p><h3 id="application-json"><a href="#application-json" class="headerlink" title="application/json"></a><code>application/json</code></h3><p>因为<code>json</code>格式数据的读写性非常好, 用的也极为广泛, 所以<code>application/json</code>这个请求头也用的越来越多, 这个请求头就是告诉服务器发送的数据是序列化后的<code>json</code>字符串, 现在在做的<code>Vue</code>项目中用到的<code>Axios</code>所使用的默认就是<code>application/json</code>, 这里有一个问题就是Axios全局设置<code>Content-Type</code>为<code>application/x-www-urlencoded</code>不生效, 需要在请求发出前拦截方法中修改配置才能生效, 不知道是不是bug, 如下:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_interceptorRequest</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  config.headers[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded; charset=utf-8'</span>;</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>application/json</code>方式发送的数据结构类似下面这个:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST http://www.example.com HTTP/1.1 </span><br><span class="line">Content-Type: application/json;charset=utf-8</span><br><span class="line"></span><br><span class="line">&#123;&quot;title&quot;:&quot;test&quot;,&quot;sub&quot;:[1,2,3]&#125;</span><br></pre></td></tr></table></figure><p><code>json</code>格式可以提交结构复杂的数据,在抓包工具或者调试中查看起来也很方便, 尤其适合<code>RESEful</code>的接口, 需要注意的是不论我们使用<code>application/x-www-urlencoded</code>还是<code>application/json</code>都要注意和服务器相配合, 因为毕竟我们发送的数据是希望服务器来正确接收和处理的, 如果客户端设置的<code>Content-Type</code>与服务端期望接收的<code>Content-Type</code>不一致就很有可能导致服务器无妨正常处理这个请求.</p><h3 id="text-xml"><a href="#text-xml" class="headerlink" title="text/xml"></a>text/xml</h3><p>这是一种使用<code>HTTP</code>作为传输协议，<code>XML</code>作为编码方式的远程调用规范, 典型的<code>XML-RPC</code>请求如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST http://www.example.com HTTP/1.1</span><br><span class="line">Content-Type: text/xml</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;methodCall&gt;</span><br><span class="line">    &lt;methodName&gt;examples.getStateName&lt;/methodName&gt;</span><br><span class="line">    &lt;params&gt;</span><br><span class="line">        &lt;param&gt;</span><br><span class="line">            &lt;value&gt;&lt;i4&gt;41&lt;/i4&gt;&lt;/value&gt;</span><br><span class="line">        &lt;/param&gt;</span><br><span class="line">    &lt;/params&gt;</span><br><span class="line">&lt;/methodCall&gt;</span><br></pre></td></tr></table></figure><p><code>XML-RPC</code>协议简单、功能够用，各种语言的实现都有。它的使用也很广泛，如<code>WordPress</code>的<code>XML-RPC</code>Api，搜索引擎的<code>ping</code>服务等等。<code>JavaScript</code>中，也有现成的库支持以这种方式进行数据交互，能很好的支持已有的 <code>XML-RPC</code>服务。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://imququ.com/post/four-ways-to-post-data-in-http.html" target="_blank" rel="noopener">四种常见的POST提交数据方式</a></li><li><a href="https://www.chenshaowen.com/blog/content-type-http-header.html" target="_blank" rel="noopener">HTTP Header之Content-Type</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Content-Type </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>http</title>
      <link href="/http/"/>
      <url>/http/</url>
      
        <content type="html"><![CDATA[<h1 id="http"><a href="#http" class="headerlink" title="http"></a>http</h1><p>http虽然内容简单, 容易理解, 但是内容十分庞大, 涉及到现在通信的方方面面, 我打算花点时间陆陆续续的把我接触到的http的相关部分整理出来, 这里作为一个入口页, 后续持续补充.<br><a id="more"></a></p><h2 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h2><p><a href="https://kricsleo.com/Content-Type/" target="_blank" rel="noopener">关于Content-Type</a></p>]]></content>
      
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>object-defineProperty</title>
      <link href="/object-defineProperty/"/>
      <url>/object-defineProperty/</url>
      
        <content type="html"><![CDATA[<h1 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h1><p>在js的对象中通常会有很多个属性, 例如<code>let person = { name: &#39;john&#39;}</code>中的<code>name</code>就是<code>person</code>这个对象的一个属性, 我们可以定义这个属性的一些特性, 也就是来描述这个属性, 比如这个属性是否是可读写的, 是否是可以被枚举的等等, 由此产生出了<strong>属性描述符</strong>这个概念.<br><a id="more"></a><br>属性描述符分为两种: <code>数据描述符</code>和<code>存取描述符</code>:</p><ul><li><code>数据描述符</code>是一个拥有可写或不可写值的属性</li><li><code>存取描述符</code>是由一对<code>getter-setter</code>函数功能来描述的属性</li></ul><p>属性描述符必须是两种形式其中之一, 不能同时是两者. 我们使用<code>Object.defineProperty()</code>这个方法来定义一个属性的属性描述符.</p><h2 id="数据描述符"><a href="#数据描述符" class="headerlink" title="数据描述符"></a>数据描述符</h2><p>数据描述符有四个: <code>configurable</code>, <code>enumerable</code>, <code>writable</code>和<code>value</code>, 前三个属性在使用<code>Object.defineProperty()</code>定义时默认都是<code>false</code>,第四个属性<code>value</code>默认为<code>undefined</code>, 而如果使用字面量直接添加属性的话, 那么这个属性的前三个属性默认都是<code>true</code>. 下面具体说一下这个四个属性:</p><ul><li><code>configurable</code></li></ul><p>是否可以删除目标属性或是否可以再次修改属性的四个特性, 意思是当设置为<code>true</code>时可以随时对<code>configurable</code>, <code>enumerable</code>, <code>writable</code>和<code>value</code>这四个属性进行修改, 但是一旦设置为<code>false</code>, 那么这个四个属性将都不能被更改, 你也无法再次将<code>configurable</code>设置为<code>true</code>, 默认为<code>false</code></p><ul><li><code>enumerable</code></li></ul><p>此属性是否可以被枚举（使用<code>for...in</code>或<code>Object.keys()</code>）。设置为<code>true</code>可以被枚举；设置为<code>false</code>，不能被枚举, 默认为<code>false</code></p><ul><li><code>writable</code></li></ul><p>属性的值是否可以被重写。设置为<code>true</code>可以被重写；设置为<code>false</code>，不能被重写, 默认为<code>false</code></p><ul><li><code>value</code></li></ul><p>属性对应的值,可以使任意类型的值，默认为<code>undefined</code></p><p>使用举例:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">'john'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个已经有的属性 name, 或者新增一个属性 name, 写法一样</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">'name'</span>, &#123;</span><br><span class="line">  configurable: <span class="literal">true</span> | <span class="literal">false</span>,</span><br><span class="line">  enumerable: <span class="literal">true</span> | <span class="literal">false</span>,</span><br><span class="line">  writable: <span class="literal">true</span> | <span class="literal">false</span>,</span><br><span class="line">  value: 任意类型的值</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看属性</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(person, <span class="string">'name'</span>);</span><br><span class="line"><span class="comment">// =&gt; &#123;</span></span><br><span class="line"><span class="comment">//      configurable: true,</span></span><br><span class="line"><span class="comment">//      enumerable: true,</span></span><br><span class="line"><span class="comment">//      writable: true,</span></span><br><span class="line"><span class="comment">//      value: 'john'</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br></pre></td></tr></table></figure><p>ES5有三个操作符会忽略掉对象中<code>enumerable</code>设置为<code>false</code>的属性:</p><ul><li><code>for...in</code>循环: 只遍历对象自身的和继承的可枚举的属性</li><li><code>Object.keys()</code>：返回对象自身的所有可枚举的属性的键名</li><li><code>JSON.stringify()</code>：只串行化对象自身的可枚举的属性</li></ul><p>ES6新增了一个操作<code>Object.assign()</code>，也会忽略对象中<code>enumerable</code>为<code>false</code>的属性，只拷贝对象自身的可枚举的属性。</p><h2 id="存取描述符"><a href="#存取描述符" class="headerlink" title="存取描述符"></a>存取描述符</h2><p>存取描述符也有四个: <code>configurable</code>, <code>enumerable</code>, <code>get</code>和<code>set</code>, 前两个属性在使用<code>Object.defineProperty()</code>定义时默认都是<code>false</code>, 后两个属性默认是<code>undefined</code>, 而如果使用字面量直接添加属性的话, 那么这个属性的前两个属性默认都是<code>true</code>, 下面具体说一下这个四个属性:</p><ul><li><code>configurable</code></li></ul><p>与上面<code>数据描述符</code>中相同</p><ul><li><code>enumerable</code></li></ul><p>与上面<code>数据描述符</code>中相同</p><ul><li><code>get</code></li></ul><p>获取对象中属性值的方法, 它的值应该是一个返回这个属性值的方法, 默认为<code>undefined</code></p><ul><li><code>set</code></li></ul><p>设置对象中属性值的方法, 它的值应该是一个接受一个新值作为参数然后执行设置属性值的方法, 默认为<code>undefined</code></p><p>使用举例:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">'john'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">'name'</span>, &#123;</span><br><span class="line">  configurable: <span class="literal">true</span> | <span class="literal">false</span>,</span><br><span class="line">  enumerable: <span class="literal">true</span> | <span class="literal">false</span>,</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125; | <span class="literal">undefined</span>,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(newVal !== value) &#123;</span><br><span class="line">      value = newVal;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; | <span class="literal">undefined</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里的<code>set</code>的用途就很强大了, 比如我们使用的Vue里面的数据绑定就是基于这个<code>set</code>实现的双向数据绑定, 这里埋下一个坑:<br>TODO: 分析Vue的源码中的数据绑定部分</p><h2 id="属性的遍历"><a href="#属性的遍历" class="headerlink" title="属性的遍历"></a>属性的遍历</h2><ul><li><code>for...in</code></li></ul><p><code>for...in</code>循环遍历对象自身的和继承的可枚举属性（不含Symbol属性)</p><ul><li><code>Object.keys(obj)</code></li></ul><p><code>Object.keys</code>返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性）。</p><ul><li><code>Object.getOwnPropertyNames(obj)</code></li></ul><p><code>Object.getOwnPropertyNames</code>返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性）。</p><ul><li><code>Object.getOwnPropertySymbols(obj)</code></li></ul><p><code>Object.getOwnPropertySymbols</code>返回一个数组，包含对象自身的所有Symbol属性。</p><ul><li><code>Reflect.ownKeys(obj)</code></li></ul><p><code>Reflect.ownKeys</code>返回一个数组，包含对象自身的所有属性，不管是属性名是Symbol或字符串，也不管是否可枚举。</p>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> object </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MVC-MVP-MVVM</title>
      <link href="/MVC-MVP-MVVM/"/>
      <url>/MVC-MVP-MVVM/</url>
      
        <content type="html"><![CDATA[<h1 id="关于-MV"><a href="#关于-MV" class="headerlink" title="关于 MV*"></a>关于 MV*</h1><p>为了管理有图形界面的应用程序, 先后提出了 MVC, MVP 和 MVVM 等应用架构模式, 我们也许常常听到这几个词, 尤其对我这个前后端都做过的人来说更是时常接触, 但是对于他们之间的区别却不甚了解, 这几天看了不少文章讲这一块, 在看到 Github 上 livoras 写的文章以后才终在心里有所区分, 这里转载一下 livoras 的原文.</p><p>作者: livoras<br>原文: <a href="https://github.com/livoras/blog/issues/11" target="_blank" rel="noopener">https://github.com/livoras/blog/issues/11</a></p><p>另外可以看一下掘金上的这篇文章, 与前端开发结合起来更好理解: <a href="https://juejin.im/post/593021272f301e0058273468" target="_blank" rel="noopener">浅析前端开发中的 MVC/MVP/MVVM 模式</a><br><a id="more"></a><br>以下为转载内容.</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>做客户端开发、前端开发对MVC、MVP、MVVM这些名词不了解也应该大致听过，都是为了解决图形界面应用程序复杂性管理问题而产生的应用架构模式。网上很多文章关于这方面的讨论比较杂乱，各种MV模式之间的区别分不清，甚至有些描述都是错误的。本文追根溯源，从最经典的Smalltalk-80 MVC模式开始逐步还原图形界面之下最真实的MV模式。</p><h2 id="GUI程序所面临的问题"><a href="#GUI程序所面临的问题" class="headerlink" title="GUI程序所面临的问题"></a>GUI程序所面临的问题</h2><p>图形界面的应用程序提供给用户可视化的操作界面，这个界面提供给数据和信息。用户输入行为（键盘，鼠标等）会执行一些应用逻辑，应用逻辑（application logic）可能会触发一定的业务逻辑（business logic）对应用程序数据的变更，数据的变更自然需要用户界面的同步变更以提供最准确的信息。例如用户对一个电子表格重新排序的操作，应用程序需要响应用户操作，对数据进行排序，然后需要同步到界面上。</p><p>在开发应用程序的时候，以求更好的管理应用程序的复杂性，基于<strong>职责分离（Speration of Duties）</strong>的思想都会对应用程序进行分层。在开发图形界面应用程序的时候，会把管理用户界面的层次称为View，应用程序的数据为Model（注意这里的Model指的是Domain Model，这个应用程序对需要解决的问题的数据抽象，不包含应用的状态，可以简单理解为对象）。Model提供数据操作的接口，执行相应的业务逻辑。</p><p><img src="" data-src="https://camo.githubusercontent.com/1f3484dd4f02f0f99de460e2f1a4ff487bbee1b4/687474703a2f2f6c69766f7261732e6769746875622e696f2f626c6f672f6d76632f6775692e706e67" alt=""></p><p>有了View和Model的分层，那么问题就来了：View如何同步Model的变更，View和Model之间如何粘合在一起。</p><p>带着这个问题开始探索MV模式，会发现这些模式之间的差异可以归纳为对这个问题处理的方式的不同。而几乎所有的MV模式都是经典的Smalltalk-80 MVC的修改版。</p><h2 id="Smalltalk-80-MVC"><a href="#Smalltalk-80-MVC" class="headerlink" title="Smalltalk-80 MVC"></a>Smalltalk-80 MVC</h2><h3 id="历史背景"><a href="#历史背景" class="headerlink" title="历史背景"></a>历史背景</h3><p>早在上个世纪70年代，美国的施乐公司（Xerox）的工程师研发了Smalltalk编程语言，并且开始用它编写图形界面的应用程序。而在Smalltalk-80这个版本的时候，一位叫Trygve Reenskaug的工程师设计了MVC图形应用程序的架构模式，极大地降低了图形应用程序的管理难度。而在四人帮（GoF）的设计模式当中并没有把MVC当做是设计模式，而仅仅是把它看成解决问题的一些类的集合。Smalltalk-80 MVC和GoF描述的MVC是最经典的MVC模式。</p><h3 id="MVC的依赖关系"><a href="#MVC的依赖关系" class="headerlink" title="MVC的依赖关系"></a>MVC的依赖关系</h3><p>MVC出了把应用程序分成View、Model层，还额外的加了一个Controller层，它的职责为进行Model和View之间的协作（路由、输入预处理等）的应用逻辑（application logic）；Model进行处理业务逻辑。Model、View、Controller三个层次的依赖关系如下：</p><p><img src="" data-src="https://camo.githubusercontent.com/8de6460e4d41c88ad2cf5432caae6b10f82d196e/687474703a2f2f6c69766f7261732e6769746875622e696f2f626c6f672f6d76632f6d76632d6465702e706e67" alt=""></p><p>Controller和View都依赖Model层，Controller和View可以互相依赖。在一些网上的资料Controller和View之间的依赖关系可能不一样，有些是单向依赖，有些是双向依赖，这个其实关系不大，后面会看到它们的依赖关系都是为了把处理用户行为触发的事件处理权交给Controller。</p><h3 id="MVC的调用关系"><a href="#MVC的调用关系" class="headerlink" title="MVC的调用关系"></a>MVC的调用关系</h3><p>用户的对View操作以后，View捕获到这个操作，会把处理的权利交移给Controller（Pass calls）；Controller会对来自View数据进行预处理、决定调用哪个Model的接口；然后由Model执行相关的业务逻辑；当Model变更了以后，会通过观察者模式（Observer Pattern）通知View；View通过观察者模式收到Model变更的消息以后，会向Model请求最新的数据，然后重新更新界面。如下图：</p><p><img src="" data-src="https://camo.githubusercontent.com/b89ac314c2fd554e7bf33ba1553e10dd91be44fc/687474703a2f2f6c69766f7261732e6769746875622e696f2f626c6f672f6d76632f6d76632d63616c6c2e706e67" alt=""></p><p>看似没有什么特别的地方，但是由几个需要特别关注的关键点：</p><ol><li>view是把控制权交移给Controller，Controller执行应用程序相关的应用逻辑（对来自View数据进行预处理、决定调用哪个Model的接口等等）。</li><li>Controller操作Model，Model执行业务逻辑对数据进行处理。但不会直接操作View，可以说它是对View无知的。</li><li>View和Model的同步消息是通过观察者模式进行，而同步操作是由View自己请求Model的数据然后对视图进行更新。</li></ol><p>需要特别注意的是MVC模式的精髓在于第三点：Model的更新是通过观察者模式告知View的，具体表现形式可以是Pub/Sub或者是触发Events。而网上很多对于MVC的描述都没有强调这一点。通过观察者模式的好处就是：不同的MVC三角关系可能会有共同的Model，一个MVC三角中的Controller操作了Model以后，两个MVC三角的View都会接受到通知，然后更新自己。保持了依赖同一块Model的不同View显示数据的实时性和准确性。我们每天都在用的观察者模式，在几十年前就已经被大神们整合到MVC的架构当中。</p><p>这里有一个<a href="https://github.com/livoras/MVW-demos/tree/master/src/scripts/mvc" target="_blank" rel="noopener">MVC模式的JavaScript Demo</a>，实现了一个小的TodoList应用程序。经典的Smalltalk-80 MVC不需要任何框架支持就可以实现。目前Web前端框架当中只有一个号称是严格遵循Smalltalk-80 MVC模式的：<a href="https://github.com/petermichaux/maria" target="_blank" rel="noopener">maria.js</a>。</p><h3 id="MVC的优缺点"><a href="#MVC的优缺点" class="headerlink" title="MVC的优缺点"></a>MVC的优缺点</h3><p>优点:</p><ol><li>把业务逻辑和展示逻辑分离，模块化程度高。且当应用逻辑需要变更的时候，不需要变更业务逻辑和展示逻辑，只需要Controller换成另外一个Controller就行了（Swappable Controller）。</li><li>观察者模式可以做到多视图同时更新。</li></ol><p>缺点:</p><ol><li>Controller测试困难。因为视图同步操作是由View自己执行，而View只能在有UI的环境下运行。在没有UI环境下对Controller进行单元测试的时候，应用逻辑正确性是无法验证的：Model更新的时候，无法对View的更新操作进行断言。</li><li>View无法组件化。View是强依赖特定的Model的，如果需要把这个View抽出来作为一个另外一个应用程序可复用的组件就困难了。因为不同程序的的Domain Model是不一样的</li></ol><h2 id="MVC-Model-2"><a href="#MVC-Model-2" class="headerlink" title="MVC Model 2"></a>MVC Model 2</h2><p>在Web服务端开发的时候也会接触到MVC模式，而这种MVC模式不能严格称为MVC模式。经典的MVC模式只是解决客户端图形界面应用程序的问题，而对服务端无效。服务端的MVC模式又自己特定的名字：MVC Model 2，或者叫JSP Model 2，或者直接就是Model 2 。Model 2客户端服务端的交互模式如下：</p><p><img src="" data-src="https://camo.githubusercontent.com/f42953394daf02d3515e6482c0e099c05ae508c8/687474703a2f2f6c69766f7261732e6769746875622e696f2f626c6f672f6d76632f6d6f64656c322e706e67" alt=""></p><p>服务端接收到来自客户端的请求，服务端通过路由规则把这个请求交由给特定的Controller进行处理，Controller执行相应的应用逻辑，对Model进行操作，Model执行业务逻辑以后；然后用数据去渲染特定的模版，返回给客户端。</p><p>因为HTTP协议是单工协议并且是无状态的，服务器无法直接给客户端推送数据。除非客户端再次发起请求，否则服务器端的Model的变更就无法告知客户端。所以可以看到经典的Smalltalk-80 MVC中Model通过观察者模式告知View更新这一环被无情地打破，不能称为严格的MVC。</p><p>Model 2模式最早在1998年应用在JSP应用程序当中，JSP Model 1应用管理的混乱诱发了JSP参考了客户端MVC模式，催生了Model 2。</p><p><img src="" data-src="https://camo.githubusercontent.com/72de7a4e8054e95ede1f0d167b603119a82efec1/687474703a2f2f6c69766f7261732e6769746875622e696f2f626c6f672f6d76632f6a73702e706e67" alt=""></p><p>后来这种模式几乎被应用在所有语言的Web开发框架当中。PHP的ThinkPHP，Python的Dijango、Flask，NodeJS的Express，Ruby的RoR，基本都采纳了这种模式。平常所讲的MVC基本是这种服务端的MVC。</p><h2 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h2><p>MVP模式有两种：</p><ol><li>Passive View</li><li>Supervising Controller</li></ol><p>而大多数情况下讨论的都是Passive View模式。本文会对PV模式进行较为详细的介绍，而SC模式则简单提及。</p><h3 id="历史背景-1"><a href="#历史背景-1" class="headerlink" title="历史背景"></a>历史背景</h3><p>MVP模式是MVC模式的改良。在上个世纪90年代，IBM旗下的子公司Taligent在用C/C++开发一个叫CommonPoint的图形界面应用系统的时候提出来的。</p><h3 id="MVP（Passive-View）的依赖关系"><a href="#MVP（Passive-View）的依赖关系" class="headerlink" title="MVP（Passive View）的依赖关系"></a>MVP（Passive View）的依赖关系</h3><p>MVP模式把MVC模式中的Controller换成了Presenter。MVP层次之间的依赖关系如下：</p><p><img src="" data-src="https://camo.githubusercontent.com/9b97a7927aad77433d8d965101db17e8515e91d3/687474703a2f2f6c69766f7261732e6769746875622e696f2f626c6f672f6d76632f6d76702d6465702e706e67" alt=""></p><p>MVP打破了View原来对于Model的依赖，其余的依赖关系和MVC模式一致。</p><h3 id="MVP（Passive-View）的调用关系"><a href="#MVP（Passive-View）的调用关系" class="headerlink" title="MVP（Passive View）的调用关系"></a>MVP（Passive View）的调用关系</h3><p>既然View对Model的依赖被打破了，那View如何同步Model的变更？看看MVP的调用关系：</p><p><img src="" data-src="https://camo.githubusercontent.com/082052805716330b7c168b8bcd968ffb085b4c21/687474703a2f2f6c69766f7261732e6769746875622e696f2f626c6f672f6d76632f6d76702d63616c6c2e706e67" alt=""></p><p>和MVC模式一样，用户对View的操作都会从View交移给Presenter。Presenter会执行相应的应用程序逻辑，并且对Model进行相应的操作；而这时候Model执行完业务逻辑以后，也是通过观察者模式把自己变更的消息传递出去，但是是传给Presenter而不是View。Presenter获取到Model变更的消息以后，<strong>通过View提供的接口更新界面</strong>。</p><p>关键点：</p><ol><li>View不再负责同步的逻辑，而是由Presenter负责。Presenter中既有应用程序逻辑也有同步逻辑。</li><li>View需要提供操作界面的接口给Presenter进行调用。（关键）</li></ol><p>对比在MVC中，Controller是不能操作View的，View也没有提供相应的接口；而在MVP当中，Presenter可以操作View，View需要提供一组对界面操作的接口给Presenter进行调用；Model仍然通过事件广播自己的变更，但由Presenter监听而不是View。</p><p>MVP模式，这里也提供一个<a href="https://github.com/livoras/MVW-demos/tree/master/src/scripts/mvp" target="_blank" rel="noopener">用JavaScript编写的例子</a>。</p><h3 id="MVP（Passive-View）的优缺点"><a href="#MVP（Passive-View）的优缺点" class="headerlink" title="MVP（Passive View）的优缺点"></a>MVP（Passive View）的优缺点</h3><p>优点：</p><ol><li><p>便于测试。Presenter对View是通过接口进行，在对Presenter进行不依赖UI环境的单元测试的时候。可以通过Mock一个View对象，这个对象只需要实现了View的接口即可。然后依赖注入到Presenter中，单元测试的时候就可以完整的测试Presenter应用逻辑的正确性。这里根据上面的例子给出了<a href="https://github.com/livoras/MVW-demos/tree/master/test/mvp" target="_blank" rel="noopener">Presenter的单元测试样例</a>。</p></li><li><p>View可以进行组件化。在MVP当中，View不依赖Model。这样就可以让View从特定的业务场景中脱离出来，可以说View可以做到对业务完全无知。它只需要提供一系列接口提供给上层操作。这样就可以做到高度可复用的View组件。</p></li></ol><p>缺点：</p><ol><li>Presenter中除了应用逻辑以外，还有大量的View-&gt;Model，Model-&gt;View的手动同步逻辑，造成Presenter比较笨重，维护起来会比较困难。</li></ol><h3 id="MVP（Supervising-Controller）"><a href="#MVP（Supervising-Controller）" class="headerlink" title="MVP（Supervising Controller）"></a>MVP（Supervising Controller）</h3><p>上面讲的是MVP的Passive View模式，该模式下View非常Passive，它几乎什么都不知道，Presenter让它干什么它就干什么。而Supervising Controller模式中，Presenter会把一部分简单的同步逻辑交给View自己去做，Presenter只负责比较复杂的、高层次的UI操作，所以可以把它看成一个Supervising Controller。</p><p>Supervising Controller模式下的依赖和调用关系</p><p><img src="" data-src="https://camo.githubusercontent.com/83d207d438e9f95741e6ab57a122728867e13383/687474703a2f2f6c69766f7261732e6769746875622e696f2f626c6f672f6d76632f6d76702d73632e706e67" alt=""></p><p>因为Supervising Controller用得比较少，对它的讨论就到这里为止。</p><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p>MVVM可以看作是一种特殊的MVP（Passive View）模式，或者说是对MVP模式的一种改良。</p><h3 id="历史背景-2"><a href="#历史背景-2" class="headerlink" title="历史背景"></a>历史背景</h3><p>MVVM模式最早是微软公司提出，并且了大量使用在.NET的WPF和Sliverlight中。2005年微软工程师John Gossman在自己的博客上首次公布了MVVM模式。</p><h3 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h3><p>MVVM代表的是Model-View-ViewModel，这里需要解释一下什么是ViewModel。ViewModel的含义就是 “Model of View”，视图的模型。它的含义包含了领域模型（Domain Model）和视图的状态（State）。 在图形界面应用程序当中，界面所提供的信息可能不仅仅包含应用程序的领域模型。还可能包含一些领域模型不包含的视图状态，例如电子表格程序上需要显示当前排序的状态是顺序的还是逆序的，而这是Domain Model所不包含的，但也是需要显示的信息。</p><p>可以简单把ViewModel理解为页面上所显示内容的数据抽象，和Domain Model不一样，ViewModel更适合用来描述View。</p><h3 id="MVVM的依赖"><a href="#MVVM的依赖" class="headerlink" title="MVVM的依赖"></a>MVVM的依赖</h3><p>MVVM的依赖关系和MVP依赖，只不过是把P换成了VM。</p><p><img src="" data-src="https://camo.githubusercontent.com/208d64a1323b628ccab177d0fac2fb4dc8541619/687474703a2f2f6c69766f7261732e6769746875622e696f2f626c6f672f6d76632f6d76766d2d6465702e706e67" alt=""></p><h3 id="MVVM的调用关系"><a href="#MVVM的调用关系" class="headerlink" title="MVVM的调用关系"></a>MVVM的调用关系</h3><p>MVVM的调用关系和MVP一样。但是，在ViewModel当中会有一个叫Binder，或者是Data-binding engine的东西。以前全部由Presenter负责的View和Model之间数据同步操作交由给Binder处理。你只需要在View的模版语法当中，指令式地声明View上的显示的内容是和Model的哪一块数据绑定的。当ViewModel对进行Model更新的时候，Binder会自动把数据更新到View上去，当用户对View进行操作（例如表单输入），Binder也会自动把数据更新到Model上去。这种方式称为：Two-way data-binding，双向数据绑定。可以简单而不恰当地理解为一个模版引擎，但是会根据数据变更实时渲染。</p><p><img src="" data-src="https://camo.githubusercontent.com/61ef7578cd46b1d37dd3ea52ce0a3be570e427cc/687474703a2f2f6c69766f7261732e6769746875622e696f2f626c6f672f6d76632f6d76766d2d63616c6c2e706e67" alt=""></p><p>也就是说，MVVM把View和Model的同步逻辑自动化了。以前Presenter负责的View和Model同步不再手动地进行操作，而是交由框架所提供的Binder进行负责。只需要告诉Binder，View显示的数据对应的是Model哪一部分即可。</p><p>这里有一个JavaScript MVVM的<a href="https://github.com/livoras/MVW-demos/tree/master/src/scripts/mvvm.js" target="_blank" rel="noopener">例子</a>，因为MVVM需要Binder引擎。所以例子中使用了一个MVVM的库：<a href="https//vuejs.org/">Vue.js</a>。</p><p>MVVM的优缺点<br>优点：</p><ol><li>提高可维护性。解决了MVP大量的手动View和Model同步的问题，提供双向绑定机制。提高了代码的可维护性。</li><li>简化测试。因为同步逻辑是交由Binder做的，View跟着Model同时变更，所以只需要保证Model的正确性，View就正确。大大减少了对View同步更新的测试。</li></ol><p>缺点：</p><ol><li>过于简单的图形界面不适用，或说牛刀杀鸡。</li><li>对于大型的图形应用程序，视图状态较多，ViewModel的构建和维护的成本都会比较高。</li><li>数据绑定的声明是指令式地写在View的模版当中的，这些内容是没办法去打断点debug的。</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>可以看到，从MVC-&gt;MVP-&gt;MVVM，就像一个打怪升级的过程。后者解决了前者遗留的问题，把前者的缺点优化成了优点。同样的Demo功能，代码从最开始的一堆文件，优化成了最后只需要20几行代码就完成。MV*模式之间的区分还是蛮清晰的，希望可以给对这些模式理解比较模糊的同学带来一些参考和思路。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https//blog.nodejitsu.com/scaling-isomorphic-javascript-code/">Scaling Isomorphic Javascript Code</a><br><a href="https//www.math.sfedu.ru/smalltalk/gui/mvc.pdf">Smalltalk-80 MVC</a><br><a href="https//addyosmani.com/resources/essentialjsdesignpatterns/book/#detailmvcmvp">Learning JavaScript Design Patterns</a><br><a href="https://www.safaribooksonline.com/library/view/learning-javascript-design/9781449334840/ch10s04.html" target="_blank" rel="noopener">Smalltalk-80 MVC in JavaScript</a><br><a href="https//martinfowler.com/eaaDev/uiArchs.html">GUI Architectures</a><br><a href="https://msdn.microsoft.com/en-us/library/ff649571.aspx" target="_blank" rel="noopener">The Model-View-Presenter (MVP) Pattern</a><br><a href="https//stackoverflow.com/questions/1456425/business-and-application-logic">Business and application logic?</a><br><a href="https//stackoverflow.com/questions/4415904/business-logic-in-mvc">Business logic in MVC</a></p>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
            <tag> MVP </tag>
            
            <tag> MVVM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CommonJS-AMD-CMD-ES6</title>
      <link href="/CommonJS-AMD-CMD/"/>
      <url>/CommonJS-AMD-CMD/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-模块化"><a href="#JavaScript-模块化" class="headerlink" title="JavaScript 模块化"></a>JavaScript 模块化</h1><p>远古时期, 我们写的 js 都是都是通过 script 标签进行管理, 这使得项目一旦复杂, 页面内便会写上成堆的 script 标签来引入各种外部 js 文件, 而且我们还需要保证 js 的顺序, 因为一个 js 文件内的方法往往依赖另外的 js 来实现, 我们通过确保书写顺序来确保 js 的加载顺序, 这当然是极不方便的, 后来前端工程师们就开始了尝试 js 模块化的探索之旅.<br><a id="more"></a></p><h2 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h2><blockquote><p>在了解这些规范之前，还是先了解一下什么是模块化。<br>模块化是指在解决某一个复杂问题或者一系列的杂糅问题时，依照一种分类的思维把问题进行系统性的分解以之处理。模块化是一种处理复杂系统分解为代码结构更合理，可维护性更高的可管理的模块的方式。可以想象一个巨大的系统代码，被整合优化分割成逻辑性很强的模块时，对于软件是一种何等意义的存在。对于软件行业来说：解耦软件系统的复杂性，使得不管多么大的系统，也可以将管理，开发，维护变得“有理可循”。<br>还有一些对于模块化一些专业的定义为：模块化是软件系统的属性，这个系统被分解为一组高内聚，低耦合的模块。那么在理想状态下我们只需要完成自己部分的核心业务逻辑代码，其他方面的依赖可以通过直接加载被人已经写好模块进行使用即可。<br>首先，既然是模块化设计，那么作为一个模块化系统所必须的能力：<br>定义封装的模块。<br>定义新模块对其他模块的依赖。<br>可对其他模块的引入支持。<br>好了，思想有了，那么总要有点什么来建立一个模块化的规范制度吧，不然各式各样的模块加载方式只会将局搅得更为混乱。那么在JavaScript中出现了一些非传统模块开发方式的规范 CommonJS的模块规范，AMD（Asynchronous Module Definition），CMD（Common Module Definition）等。 –<a href="https://segmentfault.com/a/1190000004873947" target="_blank" rel="noopener">文章</a></p></blockquote><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>CommmonsJS是同步加载模块的, 例如如下代码:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foobar.js</span></span><br><span class="line"><span class="comment">// 私有变量</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公有方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foobar</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// do someing ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//do someing ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// exports对象上的方法和变量是公有的</span></span><br><span class="line"><span class="keyword">var</span> foobar = <span class="keyword">new</span> foobar();</span><br><span class="line">exports.foobar = foobar;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="comment">// require方法默认读取js文件，所以可以省略js后缀</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="built_in">require</span>(<span class="string">'./boobar'</span>).foobar;</span><br><span class="line"></span><br><span class="line">test.bar();</span><br></pre></td></tr></table></figure><p>CommonJS规定一个单独的 js 文件就是一个模块, 在 js 文件中引入其他的模块需使用关键字<code>require</code>, 例如<code>require(&#39;./a&#39;)</code>, 该方法会根据读取这个文件然后返回这个文件内部的<code>exports</code>对象, 文件内需要导出的东西使用关键字<code>exports</code>, 例如<code>exports.foobar = foobar</code>, 需要注意的是CommonJS 是同步加载模块的, 也就是说会在模块加载完毕之后再去执行接下里的代码, 会阻塞 js 的线程, 对于像 Node.js 这样的服务端, 因为各个模块文件都存在本地硬盘上, 加载起来很快, 所以阻塞的时间很短, 属于可以接受的程度, 但是对于浏览器端, 需要通过网络下载下来各个依赖文件, 这个阻塞的时间就比较长了, 所以 CommonJS一般用在 Node.js 中, 同时也因为 Node.js 发扬光大.</p><p>那么在浏览器端为了实现异步加载模块, 就产生了 AMD 和 CMD 解决方案.</p><h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><p>AMD 全称是”Asynchronous Module Definition”, 中文名是”异步模块定义”</p><h3 id="AMD-定义模块"><a href="#AMD-定义模块" class="headerlink" title="AMD 定义模块"></a>AMD 定义模块</h3><p>AMD 定义了一个简洁实用的 api, <code>define(id, dependencies?, factory)</code>;<br>第一个参数<code>id</code>为字符串类型, 表示模块标志, 为可选参数, 如果不存在则模块标识应该默认定义为在加载器中被请求脚本的标识。如果存在，那么模块标识必须为顶层的或者一个绝对的标识。<br>第二个参数<code>dependencies</code>为数组类型, 表示当前模块所依赖的模块的模块标识.<br>第三个参数<code>factory</code>是一个需要实例化的函数或者一个对象.</p><p>可以使用这个 api 进行灵活的模块定义:</p><ul><li>定义无依赖的模块</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define( &#123;</span><br><span class="line">    add : <span class="function"><span class="keyword">function</span>(<span class="params"> x, y </span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><ul><li>定义有依赖的模块</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define([<span class="string">'alpha'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">alpha</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        verb: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> alpha.verb() + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>定义数据对象模块</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define(&#123;</span><br><span class="line">    users: [],</span><br><span class="line">    members: []</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>具名模块</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define(<span class="string">'alpha'</span>, [<span class="string">'require'</span>, <span class="string">'exports'</span>, <span class="string">'beta'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">require, exports, beta</span>) </span>&#123;</span><br><span class="line">    exports.verb = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beta.verb();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// or</span></span><br><span class="line">        <span class="comment">// return require('beta').verb();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>包装模块</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'a'</span>);</span><br><span class="line">    exports.action = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>除了define外，AMD 还保留一个关键字<code>require</code>. <code>require</code> 作为规范保留的全局标识符，可以实现为 <code>module loader</code>，也可以不实现。<br>AMD模式可以用于浏览器环境并且允许非同步加载模块，也可以按需动态加载模块。</p><h3 id="AMD-使用模块"><a href="#AMD-使用模块" class="headerlink" title="AMD 使用模块"></a>AMD 使用模块</h3><p>api: <code>require(dependencies, callback);</code><br>第一个参数<code>dependencies</code>为数组类型, 里面是当前回调函数需要依赖的模块<br>第二个参数<code>callback</code>为回调函数, 当依赖加载完毕之后会执行这个回调函数, 函数的参数就是所加载的模块, 可在函数中使用<br>例如:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">math</span>)) </span>&#123;</span><br><span class="line">    math.add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="AMD-规范的实现者-RequireJS"><a href="#AMD-规范的实现者-RequireJS" class="headerlink" title="AMD 规范的实现者 RequireJS"></a>AMD 规范的实现者 RequireJS</h3><p>RequireJS 是一个前端的模块化管理的工具库，遵循AMD规范，它的作者就是AMD规范的创始人 James Burke。所以说RequireJS是对AMD规范的阐述一点也不为过。</p><p>RequireJS的思想是通过一个函数将所有需要的或者依赖的模块加载进来, 然后返回一个新的函数(或者模块), 我们所有关于新模块的业务代码都在这个函数里面进行, 其内部也可以无限制的使用已经加载进来的模块.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script data-main=<span class="string">'scripts/main'</span> src=<span class="string">'scripts/require.js'</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>那么scripts下的main.js则是指定的主代码脚本文件，所有的依赖模块代码文件都将从该文件开始异步加载进入执行。RequireJS 的定义<code>define</code>和使用<code>require</code>都与之前说的 AMD 规范一致.</p><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><p><a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="noopener">CMD 规范</a><br><a href="https://seajs.github.io/seajs/docs/#docs" target="_blank" rel="noopener">seajs</a></p><p>CMD是SeaJS 在推广过程中对模块定义的规范化产出, 特点有如下两点:</p><ul><li>对于依赖的模块, AMD 是提前执行, 而 CMD 是延迟执行. (不过RequireJS从2.0开始，也改成可以延迟执行, 根据写法不同，处理方式不同.)</li><li>AMD 推崇依赖前置, CMD 推崇依赖就近</li></ul><p>对比:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AMD</span></span><br><span class="line">define([<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依赖一开始就写好</span></span><br><span class="line">    a.test();</span><br><span class="line">    b.test();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// CMD</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依赖就近</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line">    a.test();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 软依赖</span></span><br><span class="line">    <span class="keyword">if</span>(status) &#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>);</span><br><span class="line">        b.test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>AMD也支持 CMD 的写法, 但依赖前置是官方的推荐做法<br>AMD 的 api 是一个当多个用, CMD 严格的区分推崇职责单一, 例如 AMD 里面的require 分为全局的和局部的, 但是 CMD 里面没有全局的 require, 提供 seajs.use()来实现模块系统的加载启动.</p><h2 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h2><p>UMD 是 CommonJS 和 AMD 的融合.</p><p>AMD模块以浏览器第一的原则发展，异步加载模块。<br>CommonJS模块以服务器第一原则发展，选择同步加载，它的模块无需包装(unwrapped modules)。<br>这迫使人们又想出另一个更通用的模式UMD （Universal Module Definition）。希望解决跨平台的解决方案。</p><p>UMD先判断是否支持Node.js的模块（exports）是否存在，存在则使用Node.js模块模式。<br>在判断是否支持AMD（define是否存在），存在则使用AMD方式加载模块。</p><p>判断过程如下:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, factory</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> exports = <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="built_in">module</span>.exports = factory();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">        define(factory);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.eventUtil = factory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// module...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="ES6-模块化"><a href="#ES6-模块化" class="headerlink" title="ES6 模块化"></a>ES6 模块化</h2><p>经历了那么多探索以后, ES6终于在语言层面引入了模块化, 旨在成为服务端和浏览器端通用的解决方案, 模块功能主要由两个命令构成, <code>export</code>和<code>import</code>, <code>export</code>命令用于规定模块的对外接口，<code>import</code>命令用于输入其他模块提供的功能。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义模块 module.js</span></span><br><span class="line"><span class="keyword">let</span> basicNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> add = funtion(a, b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; basicNum, add&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; basicNum, add &#125; <span class="keyword">from</span> <span class="string">'./module'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> add(<span class="number">2</span>, basicNum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种引入方式你需要知道模块内部导出的内容的具体名字, 在你引入的时候需要一字不差的对应上名字, 有很多时候我们并不想去模块内部查看它到底是用的什么名字, 这个时候 ES6 贴心的为我们额外提供了一个<code>export default</code>, 为模块指定一个默认输出, 对应的<code>import</code>不需要使用大括号, 这更加接近AMD 的引用写法.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义模块 module.js</span></span><br><span class="line"><span class="keyword">let</span> basicNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> add = funtion(a, b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; basicNum, add &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">import</span> <span class="built_in">module</span> <span class="keyword">from</span> <span class="string">'./module'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.add(<span class="number">2</span>, <span class="built_in">module</span>.basicNum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是ES6的模块不是对象, 它的<code>import</code>会被 JavaScript 引擎静态分析, 在编译的时候就引入模块代码, 而不是在运行的时候加载, 所以也就无法实现条件加载. 但是好处是这使得对代码进行静态分析成为可能.</p><h2 id="ES6模块与-CommonJS-的差异"><a href="#ES6模块与-CommonJS-的差异" class="headerlink" title="ES6模块与 CommonJS 的差异"></a>ES6模块与 CommonJS 的差异</h2><ul><li><strong>CommonJS 输出的是一个值得拷贝, ES6输出的是一个值的引用</strong></li></ul><p>CommonJS 输出的是一个值的拷贝, 也就是说一旦已经输出, 那么模块内部之后再发生变动也不会影响这个已经输出的值.<br>ES6的运行机制和 CommonJS 不一样, 当 js 引擎在进行静态分析的时候如果发现<code>import</code>那么就会生成一个对应模块的只读引用, 只有在运行的时候才根据这个引用到对应的模块去取值。 换句话说，ES6 的import有点像 Unix 系统的“符号连接”，原始值变了，import加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</p><ul><li><strong>CommonJS 是运行时加载, ES6是编译时输出接口</strong></li></ul><p>运行时加载: CommonJS模块是对象, 即在输入时先加载整个模块, 生成一个对象, 然后再从这个对象上面读取方法, 这种加载称为’运行时加载’</p><p>编译时加载: ES6模块不是对象, 而是通过<code>export</code>命令显示指定输出的代码, <code>import</code>时采取静态命令的形式, 即在<code>import</code>时指定加载某个值, 而不是加载整个模块, 这种加载称为’编译时加载’.</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://github.com/seajs/seajs/issues/588" target="_blank" rel="noopener">玉伯的回答</a><br><a href="https//huangxuan.me/js-module-7day/#/">模块化七日谈</a><br><a href="https://segmentfault.com/a/1190000004873947" target="_blank" rel="noopener">我是豆腐不是渣的文章</a></p>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端模块化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AST</title>
      <link href="/AST/"/>
      <url>/AST/</url>
      
        <content type="html"><![CDATA[<h1 id="AST"><a href="#AST" class="headerlink" title="AST"></a>AST</h1><h2 id="AST-简介"><a href="#AST-简介" class="headerlink" title="AST 简介"></a>AST 简介</h2><blockquote><p>在计算机科学中, 抽象语法树(Abstract Syntax Tree, AST)或者简称语法树(Syntax Tree)是源代码语法解构的一种抽象表现, 它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构. – <a href="https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%AA%9E%E6%B3%95%E6%A8%B9" target="_blank" rel="noopener">维基百科</a></p></blockquote><p>而在 JavaScript 中我们通过 JavaScript Parser 把代码转化为一颗抽象语法树（AST），这颗树定义了代码的结构，通过操纵这颗树，我们可以精准的定位到声明语句、赋值语句、运算语句等等，实现对代码的分析、优化、变更等操作. 然后浏览器会把 js 源码通过解析器转为抽象语法树，再进一步转化为字节码或直接生成机器码. – <a href="https://www.jianshu.com/p/b9f14f384954" target="_blank" rel="noopener">简书文章</a></p><p>关于 Vue 的语法树解析可以查看<a href="https://github.com/answershuto/learnVue/blob/master/docs/%E8%81%8A%E8%81%8AVue%E7%9A%84template%E7%BC%96%E8%AF%91.MarkDown" target="_blank" rel="noopener">这里</a><br><a id="more"></a></p><h2 id="AST-生成过程"><a href="#AST-生成过程" class="headerlink" title="AST 生成过程"></a>AST 生成过程</h2><p>总的来说一段源代码在执行之前会经历如下过程:</p><ol><li>分词 / 词法分析: 将一个语句中的关键词进行提取, 例如<code>let a = 3;</code>, 分词提取之后得到<code>let</code>, <code>a</code>, <code>=</code>, <code>3</code>, <code>;</code></li><li>解析 / 语法分析: 在对上面已经被拆分提取过的关键词进行分析之后建立一课语法树(<code>AST</code>), 效果可参见下面</li><li>底层代码生成: 得到语法树之后执行引擎(例如 chrome 的 v8引擎)会对这颗树进行一定的优化分析, 然后生成更底层的代码或者机器指令交由机器执行</li></ol><p>无图不真相, 我们借助一个在线的<a href="https://resources.jointjs.com/demos/javascript-ast" target="_blank" rel="noopener">可视化工具</a>或者<a href="https://esprima.org/demo/parse.html#" target="_blank" rel="noopener">esprima</a>来具体看一下过程, 对于如下代码进行生成 AST 树</p><ol><li><p>源码:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addA</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = addA(<span class="number">2</span>) + b;</span><br></pre></td></tr></table></figure></li><li><p>词法分析结果</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Keyword(var) Identifier(a) Punctuator(=) Numeric(42) Punctuator(;) Keyword(var) Identifier(b) Punctuator(=)</span><br><span class="line">Numeric(5) Punctuator(;) Keyword(function) Identifier(addA) Punctuator(() Identifier(d) Punctuator())</span><br><span class="line">Punctuator(&#123;)Keyword(return) Identifier(a) Punctuator(+) Identifier(d)Punctuator(;)</span><br><span class="line">Punctuator(&#125;) Keyword(var) Identifier(c) Punctuator(=) Identifier(addA)</span><br><span class="line">Punctuator(()Numeric(2) Punctuator()) Punctuator(+) Identifier(b) Punctuator(;)</span><br></pre></td></tr></table></figure></li><li><p>生成 AST 树</p><p><img style="width:300px;heitht:300px" src="" data-src="data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20version%3D%221.1%22%20id%3D%22v-151%22%20width%3D%22100%25%22%20height%3D%22100%25%22%20viewBox%3D%220%200%20600%201190%22%3E%3Cdefs%20id%3D%22v-4%22%3E%3Cmarker%20id%3D%22v-2-857093843%22%20orient%3D%22auto%22%20overflow%3D%22visible%22%20markerUnits%3D%22userSpaceOnUse%22%3E%3Cpath%20id%3D%22v-127%22%20stroke%3D%22%23666%22%20fill%3D%22%23666%22%20transform%3D%22rotate(180)%22%20d%3D%22M%204%20-4%200%200%204%204%20z%22%2F%3E%3C%2Fmarker%3E%3C%2Fdefs%3E%3Cg%20id%3D%22v-3%22%20class%3D%22joint-viewport%22%3E%3Cg%20model-id%3D%220575a616-604c-455a-a0ef-e26b748b98ab%22%20id%3D%22j_1%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(0%2C0)%22%3E%3Crect%20id%3D%22v-6%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22black%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-7%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C37.8%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3EProgram%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-8%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22170a8aff-943a-4d5b-ac39-114c9f602e9b%22%20id%3D%22j_21%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(320%2C1150)%22%3E%3Crect%20id%3D%22v-106%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23ff5246%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-107%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C57%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3Eb%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-108%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22c6859033-e970-457f-be98-1f1155b15b62%22%20id%3D%22j_22%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(80%2C50)%22%3E%3Crect%20id%3D%22v-111%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23232323%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-112%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C7.9%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3EVariableDeclaration%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-113%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%2282155076-1860-4d62-9299-94a7d5696b7b%22%20id%3D%22j_23%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(240%2C900)%22%3E%3Crect%20id%3D%22v-116%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23fcbc2a%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-117%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C57%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3E%2B%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-118%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%226ae2936e-d297-4ea2-b358-ea760462f013%22%20id%3D%22j_20%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(400%2C650)%22%3E%3Crect%20id%3D%22v-101%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23ff5246%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-102%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C57.3%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3Ea%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-103%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%2200527959-5960-43af-a963-fff4b2e4bdf0%22%20id%3D%22j_25%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-126%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20140%20280%20L%20140%20315%20L%20160%20315%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22be60f611-cd88-40b4-8df0-79d83e399d2a%22%20id%3D%22j_26%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-129%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20300%20930%20L%20300%201165%20L%20320%201165%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22f2233185-5f97-4f4a-99c0-0c748d07c2c5%22%20id%3D%22j_27%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-130%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20220%20830%20L%20220%20915%20L%20240%20915%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%229cd1bf03-f527-4b8f-b041-7811e6e6f207%22%20id%3D%22j_28%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-131%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20300%20580%20L%20300%20615%20L%20320%20615%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22df4cb4db-223c-4a5b-957d-711034a4bf64%22%20id%3D%22j_29%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-132%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%2060%2030%20L%2060%20265%20L%2080%20265%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%224b5abfb2-484e-46a6-af0f-22540068b7ce%22%20id%3D%22j_19%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(160%2C100)%22%3E%3Crect%20id%3D%22v-96%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23414141%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-97%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C10.7%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3EVariableDeclarator%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-98%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22e203c45b-b788-41f9-8dcf-ede427cfbf4d%22%20id%3D%22j_30%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-133%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20380%20630%20L%20380%20665%20L%20400%20665%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22d6530e93-dc7d-4c20-980a-64b3ba88afb8%22%20id%3D%22j_18%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(240%2C550)%22%3E%3Crect%20id%3D%22v-91%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23232323%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-92%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C14.9%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3EReturnStatement%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-93%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%224f24a926-2447-4fa1-ac1a-da6767ecf356%22%20id%3D%22j_31%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-134%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20300%20930%20L%20300%20965%20L%20320%20965%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22e9b555f0-ea57-4192-acc2-66f395661459%22%20id%3D%22j_17%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(480%2C1100)%22%3E%3Crect%20id%3D%22v-86%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%2377c63d%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-87%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C57.2%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3E2%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-88%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%2236c11933-8bc0-4098-b092-a59f9e2c99f5%22%20id%3D%22j_32%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-135%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20380%20630%20L%20380%20715%20L%20400%20715%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22cad8dd4f-91c0-4789-b5aa-02eae8640c50%22%20id%3D%22j_16%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(400%2C700)%22%3E%3Crect%20id%3D%22v-81%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23ff5246%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-82%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C57%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3Ed%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-83%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%222b50fe52-2731-41bc-b3bf-74df89127470%22%20id%3D%22j_33%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-136%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20220%20130%20L%20220%20215%20L%20240%20215%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22babe2e26-e654-4393-994d-78fbb50bcc87%22%20id%3D%22j_15%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(240%2C150)%22%3E%3Crect%20id%3D%22v-76%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23ff5246%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-77%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C57.3%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3Ea%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-78%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%2282e8806c-d30d-43fa-b3e7-ab92cb8b3b57%22%20id%3D%22j_34%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-137%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%2060%2030%20L%2060%20765%20L%2080%20765%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22a3469a79-1a18-499d-82fa-a7f1d857082f%22%20id%3D%22j_14%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(160%2C500)%22%3E%3Crect%20id%3D%22v-71%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23232323%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-72%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C17.8%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3EBlockStatement%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-73%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%225b8fb7b2-e2cf-4e2b-a668-a61d3aaab065%22%20id%3D%22j_35%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-138%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20380%20980%20L%20380%201015%20L%20400%201015%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22967abd22-7594-482a-ac7c-d0392004d0c0%22%20id%3D%22j_13%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(400%2C1050)%22%3E%3Crect%20id%3D%22v-66%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%2363c1f1%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-67%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C32.3%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3Earguments%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-68%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%228db55fd0-0827-4e3c-876d-80b049ff3d77%22%20id%3D%22j_36%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-139%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20140%20780%20L%20140%20815%20L%20160%20815%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%2212806624-ac4c-4b74-97fa-0045761cee49%22%20id%3D%22j_12%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(80%2C750)%22%3E%3Crect%20id%3D%22v-61%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23232323%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-62%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C7.9%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3EVariableDeclaration%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-63%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22f0b73dfc-2324-4734-b162-32955bc345a5%22%20id%3D%22j_37%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-140%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20220%20130%20L%20220%20165%20L%20240%20165%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22cfd70751-157f-4b97-ac3a-21cc81f62bf4%22%20id%3D%22j_11%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(240%2C200)%22%3E%3Crect%20id%3D%22v-56%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%2377c63d%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-57%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C53.9%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3E42%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-58%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%2254b43d7a-93ee-4080-b6d3-fdfef5f3a973%22%20id%3D%22j_38%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-141%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20220%20830%20L%20220%20865%20L%20240%20865%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22be156511-ce0c-4e34-825d-5ae6739fa349%22%20id%3D%22j_10%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(80%2C450)%22%3E%3Crect%20id%3D%22v-51%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23232323%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-52%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C15.6%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3Efunction%C2%A0addA(d)%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-53%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22dbc524b4-32c6-4951-8c5a-2565f3402bd7%22%20id%3D%22j_39%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-142%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20140%20480%20L%20140%20515%20L%20160%20515%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22c0beb125-fd3b-4fc6-94f4-8462e74c6adc%22%20id%3D%22j_9%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(160%2C800)%22%3E%3Crect%20id%3D%22v-46%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23414141%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-47%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C10.7%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3EVariableDeclarator%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-48%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22aa5b04fd-f487-4c1d-96aa-320c6917b5cf%22%20id%3D%22j_40%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-143%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%2060%2030%20L%2060%2065%20L%2080%2065%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%228e58b277-e590-4f20-a319-b5b31f9caa82%22%20id%3D%22j_8%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(240%2C400)%22%3E%3Crect%20id%3D%22v-41%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%2377c63d%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-42%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C57.2%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3E5%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-43%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22bbd0e695-ff24-4ed0-b32b-00b1f9b3fcc7%22%20id%3D%22j_41%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-144%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20460%201080%20L%20460%201115%20L%20480%201115%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22be43f345-2f25-47d4-9108-bbacb4b00d76%22%20id%3D%22j_7%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(240%2C850)%22%3E%3Crect%20id%3D%22v-36%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23ff5246%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-37%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C57.3%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3Ec%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-38%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22aa48ee7f-f636-4e39-bead-ebf4e5618f76%22%20id%3D%22j_42%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-145%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20140%2080%20L%20140%20115%20L%20160%20115%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%2279ee0a45-bb59-415a-adfc-5be54602ee19%22%20id%3D%22j_6%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(240%2C350)%22%3E%3Crect%20id%3D%22v-31%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23ff5246%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-32%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C57%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3Eb%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-33%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%2211b62819-4f6c-4085-95f9-1faf5ae075ad%22%20id%3D%22j_43%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-146%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20380%20980%20L%20380%201065%20L%20400%201065%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%225b23512d-12ce-45a3-a39c-4a02c5770220%22%20id%3D%22j_5%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(400%2C1000)%22%3E%3Crect%20id%3D%22v-26%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23ff5246%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-27%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C46.6%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3EaddA%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-28%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22c83ae87c-0bc6-4a3c-9750-588d97be6312%22%20id%3D%22j_44%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-147%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%2060%2030%20L%2060%20465%20L%2080%20465%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%221dc65a22-7066-4896-83f4-6e6f5562386f%22%20id%3D%22j_4%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(160%2C300)%22%3E%3Crect%20id%3D%22v-21%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23414141%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-22%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C10.7%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3EVariableDeclarator%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-23%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%220134f072-a6ea-499c-9432-f06fbb515403%22%20id%3D%22j_45%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-148%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20220%20530%20L%20220%20565%20L%20240%20565%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22e927ad0c-8128-45fd-bbd6-f176bc7ec23f%22%20id%3D%22j_3%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(320%2C950)%22%3E%3Crect%20id%3D%22v-16%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23232323%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-17%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C20.4%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3ECallExpression%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-18%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%2276c82168-c906-4249-9646-829a6278d656%22%20id%3D%22j_46%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-149%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20220%20330%20L%20220%20365%20L%20240%20365%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%225160889d-e32b-4246-8d12-2c84c05abda7%22%20id%3D%22j_2%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(80%2C250)%22%3E%3Crect%20id%3D%22v-11%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23232323%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-12%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C7.9%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3EVariableDeclaration%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-13%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22374a7edb-7f45-4bf4-9cf6-00862bdb4bb6%22%20id%3D%22j_47%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-150%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20220%20330%20L%20220%20415%20L%20240%20415%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%222dfbf5af-950d-4359-8f75-f6fc3d5ef508%22%20id%3D%22j_24%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(320%2C600)%22%3E%3Crect%20id%3D%22v-121%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23fcbc2a%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-122%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C57%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3E%2B%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-123%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3C%2Fg%3E%3Cg%20id%3D%22v-5%22%20class%3D%22joint-tools-container%22%20transform%3D%22matrix(1.0227966101694916%2C0%2C0%2C1.0227966101694916%2C0%2C0)%22%2F%3E%3C%2Fsvg%3E"></p><p>或者我们可以使用 json 格式来查看</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"Program"</span>,</span><br><span class="line">    <span class="attr">"body"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"VariableDeclaration"</span>,</span><br><span class="line">            <span class="attr">"declarations"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"VariableDeclarator"</span>,</span><br><span class="line">                    <span class="attr">"id"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"a"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">"init"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"Literal"</span>,</span><br><span class="line">                        <span class="attr">"value"</span>: <span class="number">42</span>,</span><br><span class="line">                        <span class="attr">"raw"</span>: <span class="string">"42"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"kind"</span>: <span class="string">"var"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"VariableDeclaration"</span>,</span><br><span class="line">            <span class="attr">"declarations"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"VariableDeclarator"</span>,</span><br><span class="line">                    <span class="attr">"id"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"b"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">"init"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"Literal"</span>,</span><br><span class="line">                        <span class="attr">"value"</span>: <span class="number">5</span>,</span><br><span class="line">                        <span class="attr">"raw"</span>: <span class="string">"5"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"kind"</span>: <span class="string">"var"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"FunctionDeclaration"</span>,</span><br><span class="line">            <span class="attr">"id"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"addA"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"params"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"d"</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"body"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"BlockStatement"</span>,</span><br><span class="line">                <span class="attr">"body"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"ReturnStatement"</span>,</span><br><span class="line">                        <span class="attr">"argument"</span>: &#123;</span><br><span class="line">                            <span class="attr">"type"</span>: <span class="string">"BinaryExpression"</span>,</span><br><span class="line">                            <span class="attr">"operator"</span>: <span class="string">"+"</span>,</span><br><span class="line">                            <span class="attr">"left"</span>: &#123;</span><br><span class="line">                                <span class="attr">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                                <span class="attr">"name"</span>: <span class="string">"a"</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            <span class="attr">"right"</span>: &#123;</span><br><span class="line">                                <span class="attr">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                                <span class="attr">"name"</span>: <span class="string">"d"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"generator"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"expression"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"async"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"VariableDeclaration"</span>,</span><br><span class="line">            <span class="attr">"declarations"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"VariableDeclarator"</span>,</span><br><span class="line">                    <span class="attr">"id"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"c"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">"init"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"BinaryExpression"</span>,</span><br><span class="line">                        <span class="attr">"operator"</span>: <span class="string">"+"</span>,</span><br><span class="line">                        <span class="attr">"left"</span>: &#123;</span><br><span class="line">                            <span class="attr">"type"</span>: <span class="string">"CallExpression"</span>,</span><br><span class="line">                            <span class="attr">"callee"</span>: &#123;</span><br><span class="line">                                <span class="attr">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                                <span class="attr">"name"</span>: <span class="string">"addA"</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            <span class="attr">"arguments"</span>: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">"type"</span>: <span class="string">"Literal"</span>,</span><br><span class="line">                                    <span class="attr">"value"</span>: <span class="number">2</span>,</span><br><span class="line">                                    <span class="attr">"raw"</span>: <span class="string">"2"</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">"right"</span>: &#123;</span><br><span class="line">                            <span class="attr">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                            <span class="attr">"name"</span>: <span class="string">"b"</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"kind"</span>: <span class="string">"var"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"sourceType"</span>: <span class="string">"script"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="AST的作用"><a href="#AST的作用" class="headerlink" title="AST的作用"></a>AST的作用</h2><p>除了帮助执行引擎去生成底层的代码, AST 在我们常见的代码检查工具或者 webpack 中都可以用来作为代码分析的依据, 通过遍历 AST 树, 找出其中的隐藏问题, 或者提出优化的建议, 又或者是代码高亮或者代码压缩都是在分析这颗树的基础上进行的</p><h2 id="浏览器渲染过程"><a href="#浏览器渲染过程" class="headerlink" title="浏览器渲染过程"></a>浏览器渲染过程</h2><p>首先我们看一下浏览器的深层结构:</p><ol><li>用户界面-包括地址栏, 返回按钮等 UI 组件, 除了主窗口</li><li>浏览器引擎-用来查询和操作渲染引擎的接口</li><li>渲染引擎-负责渲染请求的内容. 比如, 如果请求的资源是html, 那么渲染引擎负责解析 html 和 css, 然后把解析结果渲染到页面中</li><li>js 引擎-用来解析执行 JavaScript 代码</li><li>网络连接-用于处理网络请求, 如 http 请求. 这一部分是跨平台的</li><li>UI 后台-用于渲染基础组件, 比如多选框和窗口等, 它暴露了一个不是特定平台的通用接口, 在底层调用了操作系统的用户接口</li><li>数据存储-这是一个持久层. 浏览器在硬盘中存储各式数据, 比如 cookie , localStorage 等</li></ol><p>各个组件的关系如下:<br><img src="" data-src="https://segmentfault.com/img/bVMk2D?w=500&amp;h=339" alt="浏览器组件关系"></p><p>我们需要注意的是, js 引擎是单线程的, 但是浏览器是多线程的, 比如浏览器会同时开启js 引擎线程, 界面渲染线程, 事件触发线程, http 请求线程</p><blockquote><p>HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p></blockquote><p>接下来我们着重看一下渲染引擎所做的工作:<br>总的过程是: 解析HTML并构建DOM树 =&gt; 构建render树 =&gt; render树布局 =&gt; render树绘制<br>浏览器引擎开始解析 html, 并把标签转为内容树中的 dom 节点, 同时它也开始解析 css, 外链的 css 以及文件内的 css, 所有这些样式数据以及 html 中的可见性指令都用来构建另外一棵树, – render 树<br>我们以Safari 和 chrome 使用的Webkit 引擎渲染过程如下:<br><img src="" data-src="https://segmentfault.com/img/bVHJfZ?w=624&amp;h=289" alt="Webkit 主流程"><br>firefox使用的Gecko 引擎渲染过程如下:<br><img src="" data-src="https://segmentfault.com/img/bVHJfZ?w=624&amp;h=289" alt="Gecko 主流程"></p><p>此小节内容参考与 segmentfault 上cucumber翻译的文章:<br><a href="https://segmentfault.com/a/1190000009108377" target="_blank" rel="noopener">浏览器工作过程详解（译）（一）</a><br><a href="https://segmentfault.com/a/1190000009236417" target="_blank" rel="noopener">浏览器工作过程详解（译）（二）</a></p>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AST </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js-object</title>
      <link href="/js-object/"/>
      <url>/js-object/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript的内存机制及按值传递"><a href="#JavaScript的内存机制及按值传递" class="headerlink" title="JavaScript的内存机制及按值传递"></a>JavaScript的内存机制及按值传递</h1><p>JavaScript是一门轻级的编程语言, 我之前也用过C++和Java, 相比起来JavaScript是一门年轻简约的编程语言, 但是我很看好这门语言, 我记得之前看过一个大牛说现在的前端开发是黎明前的黑暗, 在数年之内必定会清晰明朗起来. 自己深表赞同, JavaScript现在的确是有很多的缺陷, 相比较起来它的依赖库也不如java那般丰富, 但是它一个最大的优点(个人认为)就是它的轻量级, 你仅仅需要一个浏览器(或者Node环境, 但是Node其实也是基于Chrome的V8引擎), 他就能完成自己所有的工作, 我坚信随着各种标准的制定以及已经走在探索路上的前端开发师们能够很快为JavaScript带来它起飞的春天.</p><p>上面是我的个人希冀, 说到这篇文章, 主要是记录一下JavaScript的内存机制以及按值传递规则, 因为我在JavaScript的开发过程中会不由自主的把它和我也使用过的C++和Java进行比较, 我认为编程语言是互通的, 但是它们在某些细节上的处理有所不同, 则正是我们需要去注意的.</p><a id="more"></a><h2 id="内存机制"><a href="#内存机制" class="headerlink" title="内存机制"></a>内存机制</h2><p>在JavaScript中有<code>堆</code>和<code>栈</code>两个存储概念, <code>堆</code>是用来存储<code>Object</code>型数据的 ,<code>栈</code>是用来存储6种基本数据类型(分别是<code>null</code>, <code>undefined</code>, <code>boolean</code>, <code>number</code>, <code>string</code>和ES6中新引入的<code>symbol</code>), 对于我们平时使用的数组<code>Array</code>其实是<code>Object</code>的继承而已, 可以使用<code>typeof</code>运算符查看一个数据的类型, 例如<code>typeof []</code>就会输出<code>object</code>, 另外一个比较特别的就是函数类型, 函数类型的<code>typeof</code>输出的是<code>function</code>, 但是函数其实也是存储在<code>堆</code>中的, 而且可以认为是以字符串的形式存储的.</p><h3 id="为什么有堆和栈之分"><a href="#为什么有堆和栈之分" class="headerlink" title="为什么有堆和栈之分"></a>为什么有<code>堆</code>和<code>栈</code>之分</h3><p>与垃圾回收机制有关，为了使程序运行时占用的内存最小。<br>当一个方法执行时，每个方法都会建立自己的内存栈，在这个方法内定义的变量会逐个放入这块栈内存里，随着方法的执行结束，这个方法的内存栈也将自然销毁了。因此，所有在方法中定义的变量都是放在栈内存中的;<br>当我们在程序中创建一个对象时，这个对象将被保存到运行时数据区中，以便反复理由(因为对象的创建成本通常比较大),这个运行时数据区就是堆内存。堆内存中的对象不会随方法的结束而销毁，即使方法结束后，这个对象还可能被另一个引用变量所引用(方法的参数传递时很常见),则这个对象依然不会被销毁,只有当一个对象没有任何引用变量引用它时,系统的垃圾回收机制才会在核实的时候回收它。 –<a href="https://segmentfault.com/a/1190000016322927#articleHeader3" target="_blank" rel="noopener">参考</a></p><p>在我们知道了JavaScript中的对象是如何存储的之后, 我们就要看一下当我们生成一个变量的时候到底发生了什么.</p><h2 id="生成变量"><a href="#生成变量" class="headerlink" title="生成变量"></a>生成变量</h2><p>假如我们生成的是一个存储基本数据类型的变量, 例如<code>let a = 3</code>或者<code>let b = &#39;hello&#39;</code>, 那么有如下两步:</p><ol><li>在<code>栈</code>中直接开辟出一小块空间</li><li>把你赋予的数据(<code>3</code>或者<code>hello</code>)存储到这个<code>栈</code>空间中</li></ol><p>也就是说数据是直接存储在<code>栈</code>中, 但是当我们生成的是一个存储了对象类型的变量, 例如<code>let c = {name: &#39;krics&#39;}</code>, 那么这个时候过程就要复杂一些:</p><ol><li>在<code>堆</code>中开辟一块空间</li><li>把你赋予的数据<code>{name: &#39;krics&#39;}</code>存储到这个<code>堆</code>空间中</li><li>在<code>栈</code>中开辟一小块空间</li><li>将之前存储了对象数据的<code>堆</code>空间的地址(指针形式)存储到现在刚刚开辟的这个<code>栈</code>空间中</li></ol><p>所以我们真正的数据其实是存储在<code>堆</code>中的, 我们拿到的<code>c</code>变量里面只是存储了数据的真实地址, 当我们需要访问或者操作数据的时候, JavaScript就会根据这个地址去找到对应的数据, 然后访问或者操作它.</p><h2 id="值的拷贝"><a href="#值的拷贝" class="headerlink" title="值的拷贝"></a>值的拷贝</h2><p>我们需要永远记住最关键的一点: <strong>JavaScript中只存在按值传递!!!</strong><br>不同于C++中或者Java中经常出现的指针操作, 在JavaScript中不会出现按引用传递, JavaScript永远只操作一个变量最直接的值, 并不会考虑这个值是基本数据类型还是一个指针, 因为如果是指针, 也并不会去按照指针找到具体的数据, 然后拷贝数据什么的, 是指针, 那我就传递这个指针的字面值, 简单粗暴明了.</p><p>例如:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">'hello'</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line"></span><br><span class="line">b = <span class="string">'yell'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// =&gt; 'hello'</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// =&gt; 'yell'</span></span><br></pre></td></tr></table></figure><p>这里发生的故事是:</p><ol><li>在<code>栈</code>中开辟了一个空间叫<code>a</code>, 然后在<code>a</code>里面存入了一个字符串<code>hello</code></li><li>在<code>栈</code>中开辟了一个空间叫<code>b</code>, 然后在<code>b</code>里面存入了一个字符串<code>hello</code>(<code>按值传递</code>, 值是<code>hello</code>, 那么就再存一个<code>hello</code>)</li><li>修改<code>栈</code>中<code>b</code>的值为<code>yell</code></li><li>输出<code>a</code>的值, 没被改变过, 所以输出<code>hello</code></li><li>输出<code>b</code>的值, 先是<code>hello</code>, 后来被改成了<code>yell</code>, 那么最后输出的就是<code>yell</code></li></ol><p>那么我们举一个对象的例子又如何呢?</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> c = &#123;<span class="attr">name</span>: <span class="string">'krics'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> d = c;</span><br><span class="line"></span><br><span class="line">c.name = <span class="string">'leo'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(d.name); <span class="comment">// =&gt; 'leo'</span></span><br><span class="line"></span><br><span class="line">d.name = <span class="string">'troy'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(c.name); <span class="comment">// =&gt; 'troy'</span></span><br></pre></td></tr></table></figure><p>这里发生的故事是:</p><ol><li>先在<code>栈</code>中开辟一块空间名字叫做<code>c</code>, 然后在<code>堆</code>中开辟一块空间, 存入数据<code>{name: &#39;krics&#39;}</code>, 然后把<code>堆</code>中刚存储的数据的地址存到<code>c</code>中</li><li>在<code>栈</code>中开辟一块空间名字叫做<code>d</code>, 然后把<code>c</code>中存储的值也就是<code>{name: &#39;krics&#39;}</code>的地址在<code>d</code>中再存储一份</li><li>将<code>c</code>指向的对象中的<code>name</code>的值改为字符串<code>leo</code>,</li><li><code>d</code>和<code>c</code>指向的是同一个对象, 所以第三步中通过<code>c</code>改了<code>name</code>的值以后, 通过<code>d</code>访问这个<code>name</code>时得到的也是改变后的值<code>leo</code></li><li>第五和第六步与第三和第四步做法类似</li></ol><p>这里给出一个很有趣的思考题:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">n</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a.x = a = &#123;<span class="attr">n</span>:<span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.x); <span class="comment">// =&gt; 想想这里 a.x 的值是什么</span></span><br><span class="line"><span class="built_in">console</span>.log(b.x); <span class="comment">// =&gt; 想想这里 b.x 的值是什么</span></span><br></pre></td></tr></table></figure><p>这里给个提示, 上面主要涉及到三个细节点, 一是JavaScript中正常运算顺序为从右到左, 二是<code>.</code>点运算符的优先级高于<code>=</code>等号, 三就是我们之前讨论过的对象如何赋值问题, 答案可以参考<a href="https://segmentfault.com/a/1190000016322927#articleHeader5" target="_blank" rel="noopener">luoqua的文章</a></p><p>最后我仍然要强调一点: <strong>JavaScript中只存在按值传递!!!</strong>(可以参考&lt;JavaScript高级程序设计&gt;一书中第四章’变量. 作用域和内存问题’)</p>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bash</title>
      <link href="/bash/"/>
      <url>/bash/</url>
      
        <content type="html"><![CDATA[<h1 id="常用的shell命令"><a href="#常用的shell命令" class="headerlink" title="常用的shell命令"></a>常用的shell命令</h1><a id="more"></a><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -f &lt;file&gt;</span><br><span class="line"></span><br><span class="line">rm -rf &lt;folder&gt;</span><br><span class="line"><span class="comment"># 参数说明:</span></span><br><span class="line"><span class="comment"># -r: 删除目录下所有文件, 包括目录本身</span></span><br><span class="line"><span class="comment"># -f: 强制删除, 不确认</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动文件</span></span><br><span class="line">mv &lt;originFile&gt; &lt;destDir&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 scp 从本地拷贝文件到远程服务器, 参数调换即可反向拷贝</span></span><br><span class="line"><span class="comment"># 参数: 添加 -r 代表文件目录拷贝</span></span><br><span class="line">scp &lt;localFile&gt; username@hostname:&lt;remoteDir&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># linux查询系统版本</span></span><br><span class="line">lsb_release -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看网络端口占用</span></span><br><span class="line">netstat -antp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启 nginx 在 nginx 目录下</span></span><br><span class="line">./sbin/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 nginx</span></span><br><span class="line">./sbin/nginx -s stop</span><br></pre></td></tr></table></figure><h2 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清除 dns 缓存</span></span><br><span class="line">sudo killall mDNSResponder</span><br><span class="line"></span><br><span class="line"><span class="comment"># Finder是否显示隐藏文件, No 为隐藏, Yes 为显示</span></span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles No &amp;&amp; killall Finder</span><br><span class="line"></span><br><span class="line"><span class="comment"># npm (批量更新包及相关依赖)[https://ask.helplib.com/javascript/post_134443]</span></span><br><span class="line">npm install -g npm-check-updates</span><br><span class="line">npm-check-updates -u</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>flex</title>
      <link href="/flex/"/>
      <url>/flex/</url>
      
        <content type="html"><![CDATA[<h1 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h1><p>关于flex布局的笔记<br><img src="" data-src="https://lc-gold-cdn.xitu.io/0dd26d8e99257ff36443.png?imageslim" alt="flex"><br><a id="more"></a></p>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> flex </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue</title>
      <link href="/vue/"/>
      <url>/vue/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-学习笔记"><a href="#Vue-学习笔记" class="headerlink" title="Vue 学习笔记"></a>Vue 学习笔记</h1><p>最近开始学习 Vue 了, 在这里记录一下学习笔记.</p><p>最近像没头的苍蝇一样盯着 Vue, 感觉好些地方不甚了解, 博客也搁置了快五天没动过笔了…</p><a id="more"></a><h2 id="Vue-extend-和Vue-component"><a href="#Vue-extend-和Vue-component" class="headerlink" title="Vue.extend()和Vue.component()"></a><code>Vue.extend()</code>和<code>Vue.component()</code></h2><p>两者都是使用参数来返回一个构建模板的构造方法, 不同的是<code>vue.extend()</code>返回的是一个匿名的构造器, 需要自己接收返回值注册名字, <code>vue.component()</code>可以在生成构造的函数的时候将组件名绑定上去, 所以后者可以看做是前者的语法糖. –<a href="https://segmentfault.com/q/1010000007312426" target="_blank" rel="noopener">参考</a></p><h2 id="Vue-set-target-prop-value"><a href="#Vue-set-target-prop-value" class="headerlink" title="Vue.set(target, prop, value)"></a><code>Vue.set(target, prop, value)</code></h2><p>给实例添加动态响应的属性, 注意 target 不能是实例本身或者实例的根属性, 也就是说你不能给 data 加上根级的属性, 可以给 data 中的对象加上新属性,<br>例如<code>Vue.set(this.$data, &#39;name&#39;, &#39;krics&#39;)</code>是会报错的, 但是<code>Vue.set(this.$data.info, &#39;name&#39;, &#39;krics&#39;)</code>是正确的.</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>在生成单页面的 vue 应用时,</p><ul><li style="list-style:none"><input type="checkbox"> 有模板与有 render 函数的区别</li></ul>]]></content>
      
      
      <categories>
          
          <category> framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> ast </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker</title>
      <link href="/docker/"/>
      <url>/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="docker学习笔记"><a href="#docker学习笔记" class="headerlink" title="docker学习笔记"></a>docker学习笔记</h1><p>Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台.<br><a id="more"></a></p><p>如无特殊说明, 以下操作环境均为<code>CentOS 7</code>, 内核版本位<code>3.10.0-693.2.2.el7.x86_64</code><br>(查看内核版本: <code>uname -r</code>)</p><h2 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装docker</span></span><br><span class="line">yum install -y docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已安装的docker, 或者 docker info</span></span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动docker服务</span></span><br><span class="line">service docker start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已下载的镜像 或 docker images</span></span><br><span class="line">docker image ls </span><br><span class="line"></span><br><span class="line"><span class="comment"># 从仓库抓取镜像到本地, Docker 官方提供的镜像都存放在 library 组里, 同时这也是默认的组</span></span><br><span class="line"><span class="comment"># 例如 docker image pull library/hello-world 等价于 docker image pull hello-world</span></span><br><span class="line">docker image pull [imageName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除已下载的镜像, 如果有使用该镜像创建的容器, 那么必须先删除对应的容器才能删除镜像</span></span><br><span class="line">docker image rm [imageName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从镜像创建容器并运行</span></span><br><span class="line"><span class="comment"># 给个hello-world的测试例子, 由于本地没有hello-world这个镜像，所以会自动下载一个hello-world的镜像，并在容器内运行。</span></span><br><span class="line">docker run [imageName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出正在运行的容器</span></span><br><span class="line"><span class="comment"># dcoker container ls</span></span><br><span class="line"><span class="comment"># docker contaienr ls --all 列出所有容器, 包括已停止的</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止容器 或强制停止: docker container kill [containID]</span></span><br><span class="line">docker stop [containerId]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动已经停止的容器</span></span><br><span class="line">docker start [containerId]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启容器</span></span><br><span class="line">docker restart [containerId]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">docker rm [containerId]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取容器的输出信息</span></span><br><span class="line">docker logs [containerId]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前已经运行的容器(可以看到容器id: CONTAINER_ID)</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器内部(推荐使用exec)</span></span><br><span class="line">docker <span class="built_in">exec</span> -it [containerId] /bin/bash</span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment"># -i 以交互方式运行，是阻塞式的</span></span><br><span class="line"><span class="comment"># -t 分配一个伪终端，这个参数通常与-i参数一起使用，然后， 在后面跟上容器里的/bin/bash，这样就把我们带到容器里去了。</span></span><br><span class="line"><span class="comment"># -d 以后台方式执行，这样，我们执行完这条命令，还可以干其他事情，写脚本最常用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个容器的日志</span></span><br><span class="line">docker container logs [containerId]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在宿主机和容器之间拷贝文件, 容器未启动也可拷贝</span></span><br><span class="line"><span class="comment"># docker cp containerId:from/path/to/file to/owner/path</span></span><br><span class="line">docker cp from/owner/path containerId:to/path/to/file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看各容器占用的系统资源</span></span><br><span class="line">docker stats</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存对容器的更改, 生成一个新的镜像</span></span><br><span class="line">docker commit [containerId] [newImageName]</span><br></pre></td></tr></table></figure><h2 id="编写一个-Dockerfile"><a href="#编写一个-Dockerfile" class="headerlink" title="编写一个 Dockerfile"></a>编写一个 Dockerfile</h2><p>我们可以从一个 Dockerfile 来新建一个镜像来满足自己自定义的需求.</p><p>我们一般会新建一个<code>.dockerignore</code>文件, 表示在拷贝文件到镜像中的时候要忽略哪些文件, 就像是<code>.gitignore</code>一样(语法也一样), 一般而言, 我们都会忽略诸如<code>.git</code>和<code>node_modules/</code>等文件夹</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># FROM 表示新建的镜像文件所依赖的基础镜像, 我这里是在8.12.0的版本的node镜像的基础上进行定制的</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">8.12</span>.<span class="number">0</span></span><br><span class="line"><span class="comment"># LABEL 指令用于向镜像中添加元数据，可以通过docker inspect命令查看, 比如下面指定该镜像维护者信息(旧的 MAINTAINER 字段已经废弃)</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">"kricsleo.com"</span></span></span><br><span class="line"><span class="bash"><span class="comment"># COPY 表示文件拷贝, 第一个参数是本机源文件路径, 第二个参数是镜像中的目的文件路径, 这里表示将当前文件夹下的内容全部拷贝到镜像中的`/workspace/node`目录中</span></span></span><br><span class="line"><span class="bash"><span class="comment"># 与 COPY 类似的命令是 ADD, ADD 的功能更丰富, 除了与 COPY 相同的作用外, 它还可以下载远程的文件拷贝进去, 还可以将压缩的文件自动解压后拷贝到镜像中</span></span></span><br><span class="line"><span class="bash">COPY . /workspace/node</span></span><br><span class="line"><span class="bash"><span class="comment"># WORKDIR 指定镜像中接下来的工作目录, 命令等都将在这个目录上执行</span></span></span><br><span class="line"><span class="bash">WORKDIR /workspace/node</span></span><br><span class="line"><span class="bash"><span class="comment"># RUN 表示新建镜像前要执行的命令, 这里执行了`npm install`将会安装项目的所有依赖, 这些依赖安装完成后都会被打包进入镜像文件中</span></span></span><br><span class="line"><span class="bash"><span class="comment"># RUN 命令可以有多个, 每一个 RUN 命令都会创建一层镜像, 类似于洋葱结构, 后面的 RUN 失败导致镜像构建失败时, 下次重新构建的话会从上一个成功的</span></span></span><br><span class="line"><span class="bash"><span class="comment"># 那一层镜像开始构建, 注意可以按照需求合并 RUN 命令, 可以避免多余的层级</span></span></span><br><span class="line"><span class="bash">RUN npm install</span></span><br><span class="line"><span class="bash"><span class="comment"># EXPOSE 表示向外提供服务的端口号, 可以指定多个, 用空格分开即可, 一般我们可以在后面创建容器的时候使用`-p`参数来将宿主机和容器中暴露的端口号进行映射</span></span></span><br><span class="line"><span class="bash">EXPOSE 3000</span></span><br><span class="line"><span class="bash"><span class="comment"># CMD 表示启动容器之后在容器中要运行的命令, 这里相当于告诉容器运行之后运行`/bin/bash`</span></span></span><br><span class="line"><span class="bash"><span class="comment"># 我们一般在从镜像启动容器的时候类似于`docker run -it &lt;image&gt; /bin/bash`, 这里最后的`/bin/bash`命令会覆盖我们指定的 CMD 命令</span></span></span><br><span class="line"><span class="bash"><span class="comment"># CMD 命令只能存在一个, CMD [command, param1, param2, ...], 后面的参数都会传递给这个命令</span></span></span><br><span class="line"><span class="bash">CMD [<span class="string">'/bin/bash'</span>]</span></span><br></pre></td></tr></table></figure><p>Dockerfile 编写完成以后我们就可以来使用它构建一个镜像了.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># build 表示开始构建镜像</span></span><br><span class="line"><span class="comment"># -t 表示构建的镜像名和版本标签, 默认是 latest</span></span><br><span class="line"><span class="comment"># -f 指定 Dockerfile 的路径</span></span><br><span class="line"><span class="comment"># 最后的 . 表示工作环境为当前目录, 如果 Dockerfile 也在当前目录, 那么可以不用指定 -f 参数</span></span><br><span class="line">docker build -t [imageName:tag] -f [/path/to/Dockerfile] .</span><br></pre></td></tr></table></figure><p>参考资料:<a href="http://notes.maxwi.com/2017/12/14/docker-Dockerfile/" target="_blank" rel="noopener">Dockerfile的编写</a></p><h2 id="docker中使用mysql"><a href="#docker中使用mysql" class="headerlink" title="docker中使用mysql"></a>docker中使用mysql</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载mysql镜像</span></span><br><span class="line">docker pull mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从镜像创建并运行一个容器</span></span><br><span class="line">docker run --name first-mysql -p 3306:3306 -e MYSQL\_ROOT\_PASSWORD=root -d mysql</span><br><span class="line"><span class="comment"># 参数说明:</span></span><br><span class="line"><span class="comment"># --name 指定容器独一无二的名字</span></span><br><span class="line"><span class="comment"># -p mysql容器的端口映射</span></span><br><span class="line"><span class="comment"># -e &lt;key=value&gt;设置进入后可以使用的环境变量，这样动态指定比较灵活,  'MYSQL\_ROOT\_PASSWORD'字段指定的是 root</span></span><br><span class="line"><span class="comment"># 用户的密码</span></span><br><span class="line"><span class="comment"># -d 表示使用守护进程, 即服务挂在后台</span></span><br></pre></td></tr></table></figure><p>在我本机连接阿里云上的ECS中的mysql容器时无法连接, 后来排查使用如下解决方案:</p><ol><li>编辑ECS的安全组规则<br>把mysql的通信端口3306加入到允许列表中, 如果你是把docker里面的mysql的端口映射到ECS的其它端口, 比如3307, 那么这里你就把这个映射之后的端口3307加入到运行列表即可;</li><li><p>编辑ECS的防火墙<br>ECS的防火墙可能会拦截3306端口的通信, 那么你需要打开这个端口, 让防火墙允许端口通信, 我的ECS系统是CentOS7, 在CentOS7中是使用<code>firewall</code>来管理端口通信的, 那么使用如下方法加入3306端口:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 永久加入3306端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line"><span class="comment"># 参数说明:</span></span><br><span class="line"><span class="comment"># –zone 作用域</span></span><br><span class="line"><span class="comment"># –add-port=80/tcp 添加端口，格式为：端口/通讯协议</span></span><br><span class="line"><span class="comment"># –permanent 永久生效，没有此参数重启后失效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启防火墙生效</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>另外附上常用防火墙命令:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">#打开防火墙</span></span><br><span class="line">systemctl start firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看防火墙状态</span></span><br><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure></li></ol><h2 id="安装-Elasticsearch"><a href="#安装-Elasticsearch" class="headerlink" title="安装 Elasticsearch"></a>安装 Elasticsearch</h2><p>我安装的版本是<strong>6.5.4</strong>, 需要指定版本安装, 因为没有默认的’lastest’版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -it 参数代表分配并且进入该容器的终端, 可以看到命令行详细的启动过程, 也可以进行命令交互</span></span><br><span class="line"><span class="comment"># -d 参数代表在后台守护该容器的进程一直运行</span></span><br><span class="line"><span class="comment"># --name: 为此次运行的容器起一个好记的名字</span></span><br><span class="line"><span class="comment"># 使用 -e 指定多个参数, 因为我服务器是个只有1G内存的小水管, 而 es 在5版本之后的默认最大内存使用是2G, 所以我</span></span><br><span class="line"><span class="comment"># 指定了 ES_JAVA_OPTS="-Xms200m -Xmx200m" 参数来限制最大使用 200m 堆内存, 但是不知道怎么回事, 内存还是会一直往上飙,</span></span><br><span class="line"><span class="comment"># 会远远超过我指定的内存</span></span><br><span class="line"><span class="comment"># 指定 NETWORK_HOST="0.0.0.0", 可以让 es 接受来自任意ip地址的访问</span></span><br><span class="line"><span class="comment"># 最后指定了本次启动的容器从 docker.io/elasticsearch:6.5.4 镜像创建</span></span><br><span class="line">docker run -d --name es -p 9200:9200 -p 9300:9300 -e ES_JAVA_OPTS=<span class="string">"-Xms150m -Xmx150m"</span> -e NETWORK_HOST=<span class="string">"0.0.0.0"</span> docker.io/elasticsearch:6.5.4</span><br></pre></td></tr></table></figure><h3 id="安装-elasticsearch-head"><a href="#安装-elasticsearch-head" class="headerlink" title="安装 elasticsearch-head"></a>安装 elasticsearch-head</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># elasticsearch-head 使用的端口是9100</span></span><br><span class="line">docker run -d -p 9100:9100 docker.io/mobz/elasticsearch-head:5</span><br></pre></td></tr></table></figure><p>然后访问ip:9100, 在页面上填入 es 的地址ip:9200, 如果无法连接, 那么需要在 es 的配置文件 <code>elasticsearch.yml</code>中添加参数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果启用了 HTTP 端口，那么此属性会指定是否允许跨源 REST 请求</span></span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 如果 http.cors.enabled 的值为 true，那么该属性会指定允许 REST 请求来自何处</span></span><br><span class="line">http.cors.allow-origin: <span class="string">"*"</span></span><br></pre></td></tr></table></figure><h3 id="安装中文分词-ik"><a href="#安装中文分词-ik" class="headerlink" title="安装中文分词 ik"></a>安装中文分词 ik</h3><p>进入 es 容器中, 使用 es 自带的命令安装插件<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意安装对应 es 版本的 ik 分词插件, 我的 es 是6.5.4, 所以安装的6.5.4的 ik</span></span><br><span class="line">elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.5.4/elasticsearch-analysis-ik-6.5.4.zip</span><br></pre></td></tr></table></figure><p></p><h3 id="elasticsearch-的使用"><a href="#elasticsearch-的使用" class="headerlink" title="elasticsearch 的使用"></a>elasticsearch 的使用</h3><p>参考<a href="https://imququ.com/post/elasticsearch.html" target="_blank" rel="noopener">使用 Elasticsearch 实现博客站内搜索</a></p><p>初始化和写入数据都可以了, 但是现在碰到一个问题, 我的博客主站是托管在 github 上的, github 只提供静态资源服务, 那么我这个部署在阿里云上的 es 要如何联动起来使用上搜索功能呢?</p><p><del>通过 nginx 分发?</del>目前使用 nginx 分发达到了在备用域名 try.kricsleo.com 上可以调用部署在阿里云上的 es 服务</p><p>放出我的博客文章的 mapping</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  index: <span class="string">'blog'</span>,</span><br><span class="line">  type: <span class="string">'article'</span>,</span><br><span class="line">  body: &#123;</span><br><span class="line">    properties: &#123;</span><br><span class="line">      title: &#123;</span><br><span class="line">        type: <span class="string">'text'</span>,</span><br><span class="line">        term_vector: <span class="string">'with_positions_offsets'</span>,</span><br><span class="line">        analyzer: <span class="string">'ik_max_word'</span>,</span><br><span class="line">        search_analyzer: <span class="string">'ik_max_word'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      subtitle: &#123;</span><br><span class="line">        type: <span class="string">'text'</span>,</span><br><span class="line">        term_vector: <span class="string">'with_positions_offsets'</span>,</span><br><span class="line">        analyzer: <span class="string">'ik_max_word'</span>,</span><br><span class="line">        search_analyzer: <span class="string">'ik_max_word'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      content: &#123;</span><br><span class="line">        type: <span class="string">'text'</span>,</span><br><span class="line">        term_vector: <span class="string">'with_positions_offsets'</span>,</span><br><span class="line">        analyzer: <span class="string">'ik_max_word'</span>,</span><br><span class="line">        search_analyzer: <span class="string">'ik_max_word'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      link: &#123;</span><br><span class="line">        type: <span class="string">'text'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      author: &#123;</span><br><span class="line">        type: <span class="string">'text'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      categories: &#123;</span><br><span class="line">        type: <span class="string">'keyword'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      tags: &#123;</span><br><span class="line">        type: <span class="string">'keyword'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      create_date: &#123;</span><br><span class="line">        type: <span class="string">'date'</span>,</span><br><span class="line">        index: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      update_date: &#123;</span><br><span class="line">        type: <span class="string">'date'</span>,</span><br><span class="line">        index: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜索时使用的生成 DSL 查询语句的方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> generateDSL = <span class="function">(<span class="params">query = <span class="string">''</span>, <span class="keyword">from</span> = <span class="number">0</span>, size = <span class="number">10</span></span>) =&gt;</span> (&#123;</span><br><span class="line">  index: <span class="string">'blog'</span>,</span><br><span class="line">  type: <span class="string">'article'</span>,</span><br><span class="line">  q: query,</span><br><span class="line">  <span class="keyword">from</span>,</span><br><span class="line">  size,</span><br><span class="line">  body: &#123;</span><br><span class="line">    query: &#123;</span><br><span class="line">      dis_max: &#123;</span><br><span class="line">        queries: [</span><br><span class="line">          &#123;</span><br><span class="line">            match: &#123;</span><br><span class="line">              title: &#123;</span><br><span class="line">                query: keyword,</span><br><span class="line">                minimum_should_match: <span class="string">'50%'</span>,</span><br><span class="line">                boost: <span class="number">4</span>,</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            match: &#123;</span><br><span class="line">              subtitle: &#123;</span><br><span class="line">                query: keyword,</span><br><span class="line">                minimum_should_match: <span class="string">'50%'</span>,</span><br><span class="line">                boost: <span class="number">4</span>,</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            match: &#123;</span><br><span class="line">              content: &#123;</span><br><span class="line">                query: keyword,</span><br><span class="line">                minimum_should_match: <span class="string">'75%'</span>,</span><br><span class="line">                boost: <span class="number">4</span>,</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            match: &#123;</span><br><span class="line">              tags: &#123;</span><br><span class="line">                query: keyword,</span><br><span class="line">                minimum_should_match: <span class="string">'100%'</span>,</span><br><span class="line">                boost: <span class="number">2</span>,</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            match: &#123;</span><br><span class="line">              categories: &#123;</span><br><span class="line">                query: keyword,</span><br><span class="line">                minimum_should_match: <span class="string">'100%'</span>,</span><br><span class="line">                boost: <span class="number">2</span>,</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        tie_breaker: <span class="number">0.3</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    highlight: &#123;</span><br><span class="line">      pre_tags: [<span class="string">'&lt;b&gt;'</span>],</span><br><span class="line">      post_tags: [<span class="string">'&lt;/b&gt;'</span>],</span><br><span class="line">      fields: &#123;</span><br><span class="line">        title: &#123;&#125;,</span><br><span class="line">        content: &#123;&#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://imququ.com/post/elasticsearch.html" target="_blank" rel="noopener">使用 Elasticsearch 实现博客站内搜索</a><br><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">Docker 入门教程</a><br><a href="https://www.xuchuruo.cn/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85elasticsearch.html" target="_blank" rel="noopener">docker安装elasticSearch以及系列插件</a><br><a href="https://blog.csdn.net/qq_23250633/article/details/81327001" target="_blank" rel="noopener">Docker安装elasticsearch5（爬坑心得）</a>: 内存不足无法启动 es 解决方法</p>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Practical-Function-In-Javascript</title>
      <link href="/practical-function-in-javascript/"/>
      <url>/practical-function-in-javascript/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript中的常用函数"><a href="#JavaScript中的常用函数" class="headerlink" title="JavaScript中的常用函数"></a>JavaScript中的常用函数</h1><p>本文主要整理了平时JavaScript中常用的函数, 持续更新.<br><a id="more"></a></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="Array-concat"><a href="#Array-concat" class="headerlink" title="Array.concat()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" target="_blank" rel="noopener">Array.concat()</a></h3><p>作用: 合并数组, 返回新数组, 不影响原数组<br>备注: 字符串中也有此同名函数, 作用可类比</p><h3 id="Array-filter"><a href="#Array-filter" class="headerlink" title="Array.filter()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">Array.filter()</a></h3><p>作用: 对数组每个元素进行测试, 返回符合条件的元素组成的新数组, 不影响原数组</p><h3 id="Array-find"><a href="#Array-find" class="headerlink" title="Array.find()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find" target="_blank" rel="noopener">Array.find()</a></h3><p>作用: 返回数组中满足提供的测试函数的第一个元素的值, 否则返回 undefined</p><h3 id="Array-forEach"><a href="#Array-forEach" class="headerlink" title="Array.forEach()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener">Array.forEach()</a></h3><p>作用: 对数组的每个元素执行一次提供的函数, 不影响原数组</p><h3 id="Array-includes"><a href="#Array-includes" class="headerlink" title="Array.includes()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" target="_blank" rel="noopener">Array.includes()</a></h3><p>作用: 判断数组是否包含某个值, 是则返回<code>true</code>, 否则返回<code>false</code><br>备注: 字符串中也有此同名函数<code>String.includes(subSring, fromIndex)</code>, 用于判断字符串是否包含另一个字符串</p><h3 id="Array-indexOf"><a href="#Array-indexOf" class="headerlink" title="Array.indexOf()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf" target="_blank" rel="noopener">Array.indexOf()</a></h3><p>作用: 返回数组中给定元素的索引值，若给定元素不存在，则返回值是-1<br>备注: 字符串中也有此同名函数, 作用可类比</p><h3 id="Array-join"><a href="#Array-join" class="headerlink" title="Array.join()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join" target="_blank" rel="noopener">Array.join()</a></h3><p>作用: 将数组中的所有元素用给定方式连接成一个字符串，默认用<code>，</code>连接, 可用空字符串<code>&#39;&#39;</code>连接, 返回连接后的字符串, 不影响原数组</p><h3 id="Array-map"><a href="#Array-map" class="headerlink" title="Array.map()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener">Array.map()</a></h3><p>作用: 对数组中的每个元素都调用一个提供的函数后返回的结果组成一个新数组, 返回新数组, 不影响原数组</p><h3 id="Array-reduce-callback-accumulator-currentValue-currentIndex-array-initialValue"><a href="#Array-reduce-callback-accumulator-currentValue-currentIndex-array-initialValue" class="headerlink" title="Array.reduce(callback[accumulator, currentValue, currentIndex, array], initialValue)"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">Array.reduce(callback[accumulator, currentValue, currentIndex, array], initialValue)</a></h3><p>作用: 对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值, 返回最后的计算结果, 此函数功能强大, 建议参考官方文档</p><h3 id="Array-slice"><a href="#Array-slice" class="headerlink" title="Array.slice()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">Array.slice()</a></h3><p>作用: 将数组的制定部分(包括开始位置, 不包括结束位置)浅拷贝到一个新数组, 返回拷贝的新数组, 不影响原数组<br>备注: 字符串中也有此同名函数, 作用可类比</p><h3 id="Array-splice"><a href="#Array-splice" class="headerlink" title="Array.splice()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener">Array.splice()</a></h3><p>作用: 通过删除现有元素和/或添加新元素来更改一个数组的内容, 返回被删除的元素组成的数组, 如果没有删除, 则返回空数组, <strong>会改变原数组</strong>, 此函数功能强大, 建议参考官方文档</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="String-charAt"><a href="#String-charAt" class="headerlink" title="String.charAt()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charAt" target="_blank" rel="noopener">String.charAt()</a></h3><p>作用: 返回字符串中指定位置的字符, 不存在则返回空字符串<code>&quot;&quot;</code></p><h3 id="String-charCodeAt"><a href="#String-charCodeAt" class="headerlink" title="String.charCodeAt()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt" target="_blank" rel="noopener">String.charCodeAt()</a></h3><p>作用: 返回字符串中指定位置的字符的<code>UTF-16</code>代码单元值的数, 在0到65535之间, 超出范围返回<code>NaN</code></p><h3 id="String-match"><a href="#String-match" class="headerlink" title="String.match()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match" target="_blank" rel="noopener">String.match()</a></h3><p>作用: 将字符串与正则表达式匹配, 返回匹配后的结果数组,数组的第一项是进行匹配完整的字符串，之后的项是用圆括号捕获的结果。如果没有匹配到，返回null, 不影响原数组<br>如果给的参数不是正则表达式, 那么会隐式的转换成正则表达式, 此函数功能很强大, 请参考官方文档</p><p>备注: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test" target="_blank" rel="noopener"><code>RegExp.text()</code></a>用来测试字符串是否与正则匹配 速度会更快, 如果匹配则返回<code>true</code>, 否则返回<code>false</code><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search" target="_blank" rel="noopener"><code>String.search()</code></a>也类似<code>test()</code>方法, 只不过返回的值是第一个匹配的地方的索引值, 如果没有匹配则返回<code>-1</code><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec" target="_blank" rel="noopener"><code>RegExp.exec()</code></a>的行为和<code>String.match()</code>很相似, 在非全局匹配下表示一样, 但是对于全局匹配<code>/g</code>他们的表现就不同, 简单来说就是<code>match()</code>的全局匹配会一次找到全部的匹配项放在数组中返回, 但是<code>exec()</code>的全局匹配是每调用一次<code>exec()</code>就返回在上一次执行的基础上继续搜索的下一个匹配结果, 直到最后找不到的时候就会返回<code>null</code>, 参考<a href="https//zyy1217.com/2016/12/29/%20js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BEexec%E5%92%8Cmatch%E7%9A%84%E5%8C%BA%E5%88%AB/">这里</a></p><h3 id="Sring-replace"><a href="#Sring-replace" class="headerlink" title="Sring.replace()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noopener">Sring.replace()</a></h3><p>作用: 将字符串中的匹配值(字符串或者正则表达式匹配到的值)用另外的值(替换的字符串或者一个方法返回的值)替换, 然后返回新的字符串, 不影响原字符串<br><strong>使用字符串匹配时只会替换第一个匹配的结果</strong><br>关于第二个参数如果使用字符串, 那么<code>$&amp;, $n, ...</code>等能够作为代替匹配的结果字符串使用, 如果使用函数, 那么<code>match, p1, p2, ...</code>能够代替匹配的结果在函数参数中使用, 具体请参见官方文档<br><strong>可使用正则表达式全局匹配实现全局替换</strong>, 例如<code>&#39;hello, yello&#39;.replace(/llo/g, &#39;yes&#39;)</code></p><h3 id="String-split"><a href="#String-split" class="headerlink" title="String.split()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split" target="_blank" rel="noopener">String.split()</a></h3><p>作用: 将字符串按照匹配的字符串或者正则表达式进行分割, 返回分割的结果组成的数组, 不影响原字符串<br>关于分割的结果中有时会产生空字符串<code>&#39;&#39;</code>的原因可以参考<a href="https://segmentfault.com/a/1190000000692744" target="_blank" rel="noopener">KevinYue的这篇文章</a>, 评论中的’切黄瓜’的比喻也有助于理解, 另外使用正则表达式时会忽略全局匹配符<code>/g</code></p><h3 id="String-substr"><a href="#String-substr" class="headerlink" title="String.substr()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substr" target="_blank" rel="noopener">String.substr()</a></h3><p>作用: 将字符串中从指定位置开始的指定长度(不指定长度则到字符串末尾)的部分拷贝为新字符串返回, 不影响原字符串</p><h3 id="String-substring"><a href="#String-substring" class="headerlink" title="String.substring()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substring" target="_blank" rel="noopener">String.substring()</a></h3><p>作用: 将字符串中从指定位置开始(包含)到指定位置结束(不包含)(或者默认到结尾)的部分拷贝伟新字符串返回, 不影响原字符串</p><h3 id="String-trim"><a href="#String-trim" class="headerlink" title="String.trim()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim" target="_blank" rel="noopener">String.trim()</a></h3><p>作用: 返回字符串开头和结尾的空白字符(包括space, tab, no-break space等以及所有行终止符字符如 LF，CR)都移出的新字符串, 不影响原字符串</p><h2 id="其他平时的笔记"><a href="#其他平时的笔记" class="headerlink" title="其他平时的笔记"></a>其他平时的笔记</h2><ul><li><p><code>Object.freeze(obj)</code>冻结一个对象, 冻结了之后这个对象的所有属性都不可被修改, 尝试修改不报错但是会不生效, 返回被冻结之后的对象, 并不是传入参数的一个副本, 而是传入的对象本身, 只是进行了属性冻结.</p></li><li><p><code>Element.scrollIntoView()</code>HTML5原生的滚动API, 使得一个元素滚动到试图中, 兼容到IE8, 主流浏览器均支持.<br>三种调用形式:</p><ul><li>element.scrollIntoView(); // 等同于element.scrollIntoView(true)</li><li>element.scrollIntoView(alignToTop); // Boolean型参数(true代表元素顶部尽可能与浏览器顶部对齐, false代表元素底部尽可能与浏览器底部对齐)</li><li>element.scrollIntoView(scrollIntoViewOptions); // Object型参数<br><code>scrollIntoViewOptions</code>里面支持三个参数:<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  behavior: <span class="string">"auto"</span> | <span class="string">"instant"</span> | <span class="string">"smooth"</span>, <span class="comment">// 默认 auto, 滚动动画, auto 和 instant 都是无动画立即到底目的位置, smooth 为带动画</span></span><br><span class="line">  block: <span class="string">"start"</span> | <span class="string">"center"</span> | <span class="string">"end"</span> | <span class="string">"nearest"</span>, <span class="comment">// 默认 center, 垂直方向对齐方式, start 顶部对齐, center 中间对齐, end 底部对齐, nearest 就近对齐(意思是现在的位置靠近哪种对齐方式就采用哪种对齐方式, 移动最小)</span></span><br><span class="line">  inline: <span class="string">"start"</span> | <span class="string">"center"</span> | <span class="string">"end"</span> | <span class="string">"nearest"</span>, <span class="comment">// 默认 nearest, 水平方向对齐方式, 具体参数含义和 block 类似</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><a href="https://www.jianshu.com/p/da71c06b92d0" target="_blank" rel="noopener">参考文档1</a></p>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> function </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mini-Program</title>
      <link href="/Mini-Program/"/>
      <url>/Mini-Program/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序跳坑记录"><a href="#微信小程序跳坑记录" class="headerlink" title="微信小程序跳坑记录"></a>微信小程序跳坑记录</h1><p>开发微信小程序还是踩了不少坑的, 官方的文档并不详细, 更新也不及时, 碰到问题还是多 google 吧.</p><a id="more"></a><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>小程序的逻辑层和渲染层是分开的, 逻辑层运行在 JSCore 中 并没有一个完整的浏览器对象, 因而缺少相关的 DOM API 和 BOM API.<br>小程序的运行环境 –<a href="https://juejin.im/post/5b8fd1416fb9a05cf3710690" target="_blank" rel="noopener">参考</a></p><table><thead><tr><th style="text-align:center">运行环境</th><th style="text-align:center">逻辑层</th><th style="text-align:center">渲染层</th></tr></thead><tbody><tr><td style="text-align:center">IOS</td><td style="text-align:center">JavaScriptCore</td><td style="text-align:center">WKWebView</td></tr><tr><td style="text-align:center">安卓 2</td><td style="text-align:center">X5 JSCore</td><td style="text-align:center">X5 浏览器</td></tr><tr><td style="text-align:center">开发工具</td><td style="text-align:center">NWJS</td><td style="text-align:center">Chrome WebView</td></tr></tbody></table><p><a href="https://juejin.im/post/5abca877f265da238155b6bc" target="_blank" rel="noopener">小程序的 Native 和 js 之间的交互是通过 JSBridge 实现</a><br><a href="https://www.jianshu.com/p/0078507e14d3" target="_blank" rel="noopener">小程序的视图线程和服务线程的交互生命周期</a><br><img src="" data-src="https://mp.weixin.qq.com/debug/wxadoc/dev/image/mina-lifecycle.png?t=1474644090505" alt="小程序的视图线程和服务线程的交互生命周期"></p><p>小程序的文件编译过程:</p><ul><li>WXml -&gt; js -&gt; Virtual DOM -&gt; DOM Tree</li><li>WXSS -&gt; js -&gt; CSS</li></ul><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p>微信小程序通过<code>状态模式-单向数据流</code>来实现数据绑定.<br>状态模式定义一个对象, 当对象发生改变时, 状态就发生改变, 然后通知与之绑定的视图刷新, 注意: <strong>数据流向是单向的,  即视图变化不会引起对象状态变化</strong>.<br>如果想要视图改变的时候让对象状态也一并改变, 那么就需要依赖事件来实现, 即视图变化 -&gt; 触发事件 -&gt; 捕获事件 -&gt; 回调处理(在这里可以操作对象)</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h3><p>整个小程序有三个生命阶段:</p><ol><li>小程序初始化完成时: <code>onLaunch</code></li><li>小程序启动，或从后台进入前台显示时: <code>onShow</code></li><li>小程序从前台进入后台时: <code>onHide</code></li></ol><p>关于小程序的销毁有如下机制: 点击左上角关闭或者’Home’键离开微信, 小程序将在后台运行, 只有在后台超过一定时间或者系统内存占用过高时才会真正销毁小程序 –<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/app.html" target="_blank" rel="noopener">参考</a></p><h3 id="页面栈"><a href="#页面栈" class="headerlink" title="页面栈"></a>页面栈</h3><p>目前页面栈最大深度是 10 层 –<a href="https://developers.weixin.qq.com/community/develop/doc/000ecec19b04f0e79ab65ec0b5bc04" target="_blank" rel="noopener">来源</a><br>一旦达到 10 层, 将无法再使用<code>wx.navigatoTo()</code>或同等方式打开新页面, 必须使用其他方式清除一定的栈空间以后才能再打开新页面</p><p>路由方式: 五种</p><ol><li><p><code>wx.navigateTo()</code>或者点击<code>&lt;navigator open-type=&quot;navigateTo&quot;/&gt;</code>组件<br>页面栈变化: 仅目标页面(不能是<code>tab</code>页)入栈</p></li><li><p><code>wx.navigateBack()</code>或者点击<code>&lt;navigator open-type=&quot;navigateBack&quot;&gt;</code>组件或者点击<code>左上角返回按钮</code><br>页面栈变化: 仅源页面出栈<br>备注: 该方法可在参数(Ojbject)中额外附加一个 Number 型参数<code>delta</code>, 表示返回的页面数, 也就是要退几次页面栈, 如果<code>delta</code>大于当前栈数, 则返回首页</p></li><li><p><code>wx.redirectTo()</code>或者点击<code>&lt;navigator open-type=&quot;redirectTo&quot;/&gt;</code>组件<br>页面栈变化: 源页面出栈 -&gt; 目标页面(不能是<code>tab</code>页)入栈</p></li><li><p><code>wx.switchTab()</code>或者点击<code>&lt;navigator open-type=&quot;switchTab&quot;/&gt;</code>组件<br>页面栈变化: 清空页面栈 -&gt; 目标页面(必须是<code>tab</code>页)入栈</p></li><li><p><code>wx.reLaunch()</code>或者点击组件<code>&lt;navigator open-type=&quot;reLaunch&quot;/&gt;</code>组件<br>页面栈变化: 清空页面栈 -&gt; 目标页面(任意页面)入栈</p></li></ol><p>同一页面如果被压栈多次, 那么就会在栈中相应的存在多次, 相当于页面顺序浏览的历史记录</p><h3 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h3><p>从页面栈的变化解释页面的生命周期:</p><ol><li>页面刚入栈在栈顶: <code>onLoad</code> -&gt; <code>onShow</code> -&gt; <code>onReady</code></li><li>页面从栈顶被压栈到第二层: <code>onHide</code></li><li>页面从栈的第二层到最底层之间活动: 无事件</li><li>页面退栈刚到栈顶: <code>onShow</code></li><li>页面从栈顶出栈: <code>onUnload</code> (注意: 页面出栈即被销毁, 不会触发<code>onHide</code>, 直接触发<code>onUnload</code>)</li></ol><p>一个页面要正常显示，必须经历 3 个生命周期：<code>加载</code> -&gt; <code>显示</code> -&gt; <code>渲染</code>, 对应回调函数顺序:<code>onLoad</code> -&gt; <code>onShow</code> -&gt; <code>onReady</code>.<br><strong>官方给出的示例中<code>onReady</code>放在<code>onShow</code>之前, 但是这并不是真正的顺序, 容易误导开发者</strong></p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ol><li><p>hidden 属性<br>首先强调一点: <strong>不要使用<code>hidden</code>属性!</strong></p><ul><li><p>语法<br>正确的写法是<code>hidden=&quot;true&quot;</code>和<code>hidden=&quot;false&quot;</code>, 遵循<code>Mustache</code>语法, 双大括号不能省略, 因为<code>hidden</code>的值是<code>Boolean</code>型的, 必须使用<code>Mustache</code>计算值才行, 如果省略了双大括号, 比如<code>hidden=&quot;false&quot;</code>(填写其它内容也一样)), 那么就会把<code>&quot;false&quot;</code>作为字符串处理, 此时字符串不为空, 那么结果就是<code>true</code>, 此组件仍然会被隐藏.</p></li><li><p>为什么不要使用该属性<br><code>hidden</code>属性的表现相当怪异.<br>根据不完全测试, 在<code>view</code>, <code>navigator</code>等组件上表现为会给你的组件添加一个 css 属性<code>display: none;</code>, 如果你是通过<code>id</code>或者<code>class</code>来给组件加上自定义的<code>display</code>属性的话, 那么<code>hidden</code>添加的那个<code>display</code>属性优先级比你的高, 此时组件会被隐藏; 如果你是使用的内联样式<code>style=&quot;display: flex;&quot;</code>来给组件添加<code>display</code>属性, 那么你这里添加的<code>display</code>属性优先级会比较高, 此时<code>hidden</code>属性不生效;<br>在<code>button</code>组件上添加<code>hidden=&quot;true&quot;</code>表现为会给你的组件上添加一个 css 属性<code>display: none !important;</code>, 这里相比之前多了<code>!important</code>关键字, 所以此时的<code>hidden</code>属性的优先级是最高的, 不会被你自定义的给覆盖掉;<br>在<code>text</code>组件上又是一种表示了, 如果你为<code>text</code>组件添加<code>hidden=&quot;true&quot;</code>, 那么只要你给这个组件自定义了<code>display</code>属性, 你的优先级就会比<code>hidden</code>的高, <code>hidden</code>处于不生效的状态, 如果你没有自定义, 那么<code>hidden</code>才会生效;<br>基于上面的种种怪异的表现, 已经不需要去测试更多的组件了, 因为这已经有足够充分的理由不去使用<code>hidden</code>属性了.</p></li><li><p>替代办法<br>我们使用<code>hidden</code>属性无非是想控制组件的显示与否, 那么可以采取如下的替代方案:</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">"display: &#123;&#123;isHidden ? 'none' : 'flex'&#125;&#125;;"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>备注<br>对于不怎么切换显示隐藏的组件可以使用<code>wx:if</code>, 这样的渲染支出是可以接受的, 但是如果一个组件会经常的切换显示隐藏, 那么最好考虑采取<code>display: &quot;none;&quot;</code>的方法, 因为这样不需要重复渲染组件, 只要切换显示隐藏即可, 可以减少 cpu 支出, 提高页面效率. <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/conditional.html" target="_blank" rel="noopener">官方说法</a></li></ul></li><li><p>scroll-view<br>注意：使用竖向滚动时，需要给<code>scroll-view</code>一个固定高度, 否则无法<code>点击回到顶部</code>以及<code>滚动到指定位置</code></p></li><li><p>text<br><code>text</code>组件内只支持嵌套<code>text</code></p></li><li><p>cover-view<br>在ios中如果<code>cover-view</code>内的文字使用了<code>rotate</code>旋转, 那么文字将会显示不全, 只能显示一个文字, 官方bug没有修复, 见<a href="https://developers.weixin.qq.com/community/develop/doc/00088a24548420b41d47a08f158400" target="_blank" rel="noopener">cover-view使用transform rotate后内容会被裁剪</a>, 目前的做法最简单的是把文字做成图片, 另一种很麻烦的做法是一个<code>cover-view</code>一个文字, 计算每个<code>cover-view</code>的文字, 最后拼成整行的文字.</p></li></ol><h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><p><code>GET</code>一般都正常, 但是<code>POST</code>请求真可谓是’一千个读者有一千个哈姆雷特’, 各种失败的情况都有, 可尝试如下方法:</p><ol><li><p>首先<code>method</code>是必须设置为<code>POST</code>的;</p></li><li><p><code>header</code>中设置<code>&quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;</code>, 也有说小写<code>&quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot;</code>能成功;</p></li><li><p>data 有说不能直接传<code>json</code>格式, 需要先转格式:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">json2Form</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> json)&#123;</span><br><span class="line">        str.push(<span class="built_in">encodeURIComponent</span>(p) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(json[p]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.join(<span class="string">"&amp;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  name: <span class="string">'张三'</span>,</span><br><span class="line">  age: <span class="string">'23'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ajaxData = json2Form(data); <span class="comment">// 然后将`ajaxData`附在请求的`data`中字段中</span></span><br></pre></td></tr></table></figure></li><li><p>也有说服务端必须是<code>https</code>的;</p></li><li><p>实在不行服务端就改成<code>GET</code>吧…</p></li></ol><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>小程序对于服务器的域名有要求, 在开发时如果没有 https 的服务器, 那么 pc 端可以把微信开发工具里的域名校验展示关闭, ios 端打开调试模式运行小程序, 安卓端打不打开调试模式都可以, 之后如果申请到了 https 的服务器, 那么把服务器域名加入到微信管理平台的域名列表中, 然后就可以关闭各种之前调试的东西正常使用了.</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>对小程序的源码分析应该会是比较大的工作量, 所以我打算另外用一篇文章来记录, 这里先挖下一个坑</p><ul><li style="list-style:none"><input type="checkbox"> 微信小程序源码分析</li></ul>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mini-Program </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ASCII-Unicode-UTF8</title>
      <link href="/unicode-utf8/"/>
      <url>/unicode-utf8/</url>
      
        <content type="html"><![CDATA[<h1 id="ASCII-Unicode和UTF8之间的关系"><a href="#ASCII-Unicode和UTF8之间的关系" class="headerlink" title="ASCII, Unicode和UTF8之间的关系"></a>ASCII, Unicode和UTF8之间的关系</h1><p>本文主要了解一下ASCII码、Unicode码和UTF-8码的来源和相互之间的关系, 顺便也理了一下中文编码GB2312, GBK, GB18030的关系。<br><a id="more"></a></p><h2 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h2><p>在上世纪60年代，美国制定了ASCII码，主要目的是为了用二进制编码的方式来表达英文字符，用一个8位的字节大小对应了128个字符，其中包括了可打印出来的96个字符和32个不可打印的控制字符, 规则是二进制中第1位固定为<code>0</code>, 后面7位用来编码, 刚好可以表示2<sup>7</sup> = 128个字符, 例如规定空格<kbd>SPACE</kbd>的编码为<code>00100000</code>, 十进制是<code>32</code>, 大写字母<code>A</code>的编码为<code>01000001</code>, 十进制是<code>65</code>, 附上<a href="https://www.sojson.com/asciitable.html" target="_blank" rel="noopener">ASCII码表</a></p><h2 id="GB2312-GBK-GB18030"><a href="#GB2312-GBK-GB18030" class="headerlink" title="GB2312, GBK, GB18030"></a>GB2312, GBK, GB18030</h2><ul><li>GB2312 是对 ASCII 的中文扩展, 一个小于127的字符的意义与ASCII码相同, 但是当两个大于127的字符连在一起时就表示汉字, 同时GB2312在127之外的地方把ASCII已经有的数字, 标点和字母又重新加入了一遍, 这些重新加入的字符占用两个字节的空间, 也就是说在GB2312中有两套数字, 字母和标点, 码值小于127的那一套因为是ASCII码, 只占用一个字节, 就叫’半角’符号, 而新加入的一套数字, 字母和标点就叫’全角’符号.</li><li>因为GB2312只收录了6763个汉字, 很多的汉字也需要加入编码中, 所以微软对GB2312进行了扩展, 规定只要第一个字节大于127, 那么就不管后面一个字节是不是大于127的, 通通都认为这两个字节一起表示了一个汉字, 这样就又增加了近20000个新的汉字（包括繁体字）和符号, 扩充之后就成为GBK标准, 它向下兼容GB2312编码，出现于Windows 95简体中文版中, 但是这个是微软标准, 并不是国家标准.</li><li>后来又加入了少数民族文字，于是我们再扩展，又加了几千个新的少数民族的字，GBK扩成了GB18030, GB18030成为了国家标准.</li></ul><h2 id="Unicode码"><a href="#Unicode码" class="headerlink" title="Unicode码"></a>Unicode码</h2><p>ASCII码虽然满足了美国的需求,但是对于其它语言而言128个字符是远远不够的, 比如法语中字母上方有注音, 这是ASCII码无法表示的, 又比如汉字有10万左右, 这也是超出了ASCII码的范围, 所以后来Unicode码出现了.<br>Unicode码有着很大的容量, 现在的规模可以容纳100多万个符号, 每个符号的编码都不一样, 比如，U+0639表示阿拉伯字母Ain，U+0041表示英语的大写字母A，U+4E25表示汉字<code>严</code>。你可以使用在线的<a href="https//tool.chinaz.com/Tools/unicode.aspx">工具</a>来转换成Unicode码.</p><h3 id="Unicode码编码方式"><a href="#Unicode码编码方式" class="headerlink" title="Unicode码编码方式"></a>Unicode码编码方式</h3><p>Unicode码只是定义了每个字符对应的二进制代码是什么, 但是并没有规定字符对应的二进制应该以什么样的形式存储, Unicode统一规定，每个符号用三个或四个字节表示. 比如汉字<code>严</code>的Unicode码是十六进制数4E25, 转换成二进制就是<code>100111000100101</code>一共是15位, 至少占用2个字节的空间, 而其他的字符可能有更多的二进制位数, 而之前的ASCII码是固定为8位的, 如果采取将前面多余的位数全都置0的话, 那么在存储原来的ASCII码编码的文件时就会浪费大量的空间来存储无用的0信息, 这是不可接受的. 所以如何合理的用Unicode码来兼容原先的ASCII码信息就产生出了多种具体的实现方式.</p><h3 id="UTF-8实现Unicode"><a href="#UTF-8实现Unicode" class="headerlink" title="UTF-8实现Unicode"></a>UTF-8实现Unicode</h3><p>UTF-8是目前使用最多的Unicode编码实现方式, 除此之外也有 UTF-16（字符用两个字节或四个字节表示）和 UTF-32（字符用四个字节表示）实现方式, 不过基本不使用.<br>UTF-8 最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。<br>按照如下两条规则来编码字符:</p><ol><li><p>对于单(n = 1)字节的符号，字节的第一位设为0，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的。</p></li><li><p>对于多(n &gt; 1)字节的符号，第一个字节的前n位都设为1，第n + 1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码。<br>下表总结了编码规则，字母x表示可用编码的位。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Unicode符号范围     |        UTF-8编码方式</span><br><span class="line">(十六进制)        |              （二进制）</span><br><span class="line">----------------------+---------------------------------------------</span><br><span class="line">0000 0000-0000 007F | 0xxxxxxx</span><br><span class="line">0000 0080-0000 07FF | 110xxxxx 10xxxxxx</span><br><span class="line">0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx</span><br><span class="line">0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br></pre></td></tr></table></figure></li></ol><p>在解码的时候现查看二进制的第一位, 如果是0, 那么说明是单字节的字符, 直接将该字节按照Unicode码表转换成对应的字符即可, 如果第一位是1, 那么继续查看有几个连续的1, 有n个, 则说明连续的n个字节代表一个字符.<br>以汉字<code>严</code>为例, <code>严</code>的Unicode码是<code>4E25</code>(二进制为<code>100111000100101</code>), 根据上表, <code>4E25</code>处于<code>0000 0800 - 0000 FFFF</code>范围, 那么<code>严</code>的编码格式就是<code>1110xxxx 10xxxxxx 10xxxxxx</code>, 也就是说<code>严</code>的UTF-8编码方式就需要占用三个字节, 我们把<code>严</code>的二进制按照顺序填到<code>x</code>的位置, 最后得到的结果就是<code>11100100 10111000 10100101</code>, 转成16进制就是<code>E4B8A5</code>, 这就是<code>严</code>的UTF-8编码结果.<br>总得来说, <code>严</code>的Unicode码为<code>4E25</code>, UTF-8编码为<code>E4B8A5</code>, 这就好比你的身份证是<code>123456</code>, 在学校站队时老师按照一定的排队方式把你编排到了<code>五组三排第二个</code>, 这两者最后的结果是可以相互转换的, 你可借助在线<a href="https//tool.chinaz.com/Tools/unicode.aspx">工具</a>验证.</p><h2 id="JavaScript中的Unicode与UTF-8"><a href="#JavaScript中的Unicode与UTF-8" class="headerlink" title="JavaScript中的Unicode与UTF-8"></a>JavaScript中的Unicode与UTF-8</h2><p>javascript程序是使用Unicode字符集编写的, 所以我们在JavaScript中经常使用的字符或者字符串实际上内部是采用Unicode编码的, 在有些情况下, 比如我们的服务器要求接受的二进制内容的编码必须是UTF-8, 那么我们在把JavaScript中的字符串发送到服务器之前就需要进行转码, 将Unicode字符串转为UTF-8字符串. 我们在前端有时候会看到的服务器返回的json数据中乱码实际上就是因为服务器发送数据的编码跟我们客户端接受数据的编码方式不一致导致的, 你可以试着将乱码字段拷贝到在线<a href="https//tool.chinaz.com/Tools/unicode.aspx">工具</a>中进行转码, 比如选择将<code>Unicode转为UTF-8</code>, 然后你就能看到正确的信息.</p><p>除了数据交互之外, 浏览器的URI也是我们能够了解这种编码转换的地方, 因为URI中的querystring必须按照UTF8的编码进行传输, 但是JavaScript中是Unicode的, 如果没有中文信息还好, 因为英文字符在这两者之间的码值是保持一致的, JavaScript的字符串<code>hello</code>到了URI中也还是<code>hello</code>, 如果你不手动去转换也是ok的, 但是一旦涉及到中文(包括其它非英文字符), 比如汉字<code>严</code>, 它的Unicode码值和UTF-8码值就差的很远, 如果你不进行手动转换, 直接将JavaScript中的字符<code>严</code>丢到地址栏的URI中, 那么就会导致URI乱码, 你再想从URI中把之前放进去的<code>严</code>取出来就会发现得到的根本不是汉字<code>严</code>, 而是一串乱码.</p><h2 id="在JavaScript中如何转换Unicode与UTF-8"><a href="#在JavaScript中如何转换Unicode与UTF-8" class="headerlink" title="在JavaScript中如何转换Unicode与UTF-8"></a>在JavaScript中如何转换Unicode与UTF-8</h2><ul><li><p>浏览器提供了三对方法来进行编码转换,<code>escape/unescape</code>, <code>encodeURI/decodeURI</code>和<code>encodeURIComponent/decodeURIComponent</code>.</p><ol><li>第一对<code>escape/unescape</code>是非标准的, <strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape" target="_blank" rel="noopener">已经被废弃</a></strong>, 这里只说一下它的转码方式, <code>escape</code>在处理大于127的字符时是在字符的Unicode码前面直接加上一个<code>%u</code>, 例如<code>严</code>的Unicode码为<code>4E25</code>, 那么<code>escape(&#39;严&#39;)</code>的结果就是<code>%u4E25</code>, 再次强调, <strong>请不要使用<code>escape/unescape</code>, 它已被废弃</strong>;</li><li>第二对<code>encodeURI/decodeURI</code>是用来给整个URL进行转码的, 它不会转义<code>&amp;, ?, /, =</code>这样的功能字符;</li><li>第三对<code>encodeURIComponent/decodeURIComponent</code>是用来给URL的部分字段进行转码的, 它会对<code>&amp;, ?, /, =</code>这些特殊字符进行转义, 一般用来处理key-value形式的query字段.<br><code>encodeURI</code>和<code>encodeURIComponent</code>都是先将非英文字符的Unicode码转为UTF-8码, 然后在每个字节前面都加上一个<code>%</code>, 比如汉字<code>严</code>的Unicode码是<code>4E25</code>, 使用<code>encodeURI</code>编码时会先转成UTF-8码<code>E4 B8 A5</code>, 在用<code>%</code>连接起来就得到最后结果<code>%E4%B8%A5</code>.<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编码</span></span><br><span class="line"><span class="built_in">encodeURIComponent</span>(<span class="string">'严'</span>); <span class="comment">// =&gt; '%E4%B8%A5'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解码</span></span><br><span class="line"><span class="built_in">decodeURIComponent</span>(<span class="string">'%E4%B8%A5'</span>); <span class="comment">// =&gt; '严'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//encodeURI和encodeURIComponent对比</span></span><br><span class="line"><span class="built_in">encodeURI</span>(<span class="string">'www.kricsleo.com?name="张三"'</span>); <span class="comment">// =&gt; "www.kricsleo.com?name=%22%E5%BC%A0%E4%B8%89%22"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">encodeURIComponent</span>(<span class="string">'www.kricsleo.com?name="张三"'</span>) <span class="comment">// =&gt; "www.kricsleo.com%3Fname%3D%22%E5%BC%A0%E4%B8%89%22"</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>我们也可以自己用js来使用Unicode和UTF-8之间的相互转换</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将字符串格式化为UTF8编码的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> toUTF8 = <span class="function"><span class="keyword">function</span> (<span class="params">str, isGetBytes</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> back = [];</span><br><span class="line">      <span class="keyword">var</span> byteSize = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">          <span class="keyword">var</span> code = str.charCodeAt(i);</span><br><span class="line">          <span class="keyword">if</span> (<span class="number">0x00</span> &lt;= code &amp;&amp; code &lt;= <span class="number">0x7f</span>) &#123;</span><br><span class="line">                byteSize += <span class="number">1</span>;</span><br><span class="line">                back.push(code);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0x80</span> &lt;= code &amp;&amp; code &lt;= <span class="number">0x7ff</span>) &#123;</span><br><span class="line">                byteSize += <span class="number">2</span>;</span><br><span class="line">                back.push((<span class="number">192</span> | (<span class="number">31</span> &amp; (code &gt;&gt; <span class="number">6</span>))));</span><br><span class="line">                back.push((<span class="number">128</span> | (<span class="number">63</span> &amp; code)))</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="number">0x800</span> &lt;= code &amp;&amp; code &lt;= <span class="number">0xd7ff</span>) </span><br><span class="line">                  || (<span class="number">0xe000</span> &lt;= code &amp;&amp; code &lt;= <span class="number">0xffff</span>)) &#123;</span><br><span class="line">                byteSize += <span class="number">3</span>;</span><br><span class="line">                back.push((<span class="number">224</span> | (<span class="number">15</span> &amp; (code &gt;&gt; <span class="number">12</span>))));</span><br><span class="line">                back.push((<span class="number">128</span> | (<span class="number">63</span> &amp; (code &gt;&gt; <span class="number">6</span>))));</span><br><span class="line">                back.push((<span class="number">128</span> | (<span class="number">63</span> &amp; code)))</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; back.length; i++) &#123;</span><br><span class="line">            back[i] &amp;= <span class="number">0xff</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (isGetBytes) &#123;</span><br><span class="line">            <span class="keyword">return</span> back</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (byteSize &lt;= <span class="number">0xff</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">0</span>, byteSize].concat(back);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> [byteSize &gt;&gt; <span class="number">8</span>, byteSize &amp; <span class="number">0xff</span>].concat(back);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">toUTF8(<span class="string">'严'</span>); <span class="comment">// =&gt;  [0, 3, 228, 184, 165]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取UTF8编码的字节，并转为Unicode的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> fromUTF8 = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> arr === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> UTF = <span class="string">''</span>, _arr = arr;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; _arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> one = _arr[i].toString(<span class="number">2</span>),</span><br><span class="line">                v = one.match(<span class="regexp">/^1+?(?=0)/</span>);</span><br><span class="line">        <span class="keyword">if</span> (v &amp;&amp; one.length == <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> bytesLength = v[<span class="number">0</span>].length;</span><br><span class="line">            <span class="keyword">var</span> store = _arr[i].toString(<span class="number">2</span>).slice(<span class="number">7</span> - bytesLength);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> st = <span class="number">1</span>; st &lt; bytesLength; st++) &#123;</span><br><span class="line">                store += _arr[st + i].toString(<span class="number">2</span>).slice(<span class="number">2</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            UTF += <span class="built_in">String</span>.fromCharCode(<span class="built_in">parseInt</span>(store, <span class="number">2</span>));</span><br><span class="line">            i += bytesLength - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            UTF += <span class="built_in">String</span>.fromCharCode(_arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> UTF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fromUTF8([<span class="number">0</span>, <span class="number">3</span>, <span class="number">228</span>, <span class="number">184</span>, <span class="number">165</span>]); <span class="comment">// =&gt; '严'</span></span><br></pre></td></tr></table></figure></li></ul><p>参考资料:</p><ol><li>阮一峰的博客: https//<a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html</a></li><li>segmentfault上张亚涛的专栏: <a href="https://segmentfault.com/a/1190000005794963" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005794963</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> encrypt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Airbnb-JavaScript-Style-Guide</title>
      <link href="/Airbnb-JavaScript-Style-Guide/"/>
      <url>/Airbnb-JavaScript-Style-Guide/</url>
      
        <content type="html"><![CDATA[<h1 id="Airbnb-JavaScript-Style-Guide-阅读笔记"><a href="#Airbnb-JavaScript-Style-Guide-阅读笔记" class="headerlink" title="Airbnb JavaScript Style Guide 阅读笔记"></a>Airbnb JavaScript Style Guide 阅读笔记</h1><p>Airbnb的JavaScript代码风格是世界上最流行的JavaScript代码风格之一, 在阅读的时候结合我自己的使用经验记录如下重点, 日后多次阅读应该会持续更新.<br>在线阅读地址: <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">https://github.com/airbnb/javascript</a><br>(中文翻译版: <a href="https://github.com/yuche/javascript" target="_blank" rel="noopener">https://github.com/yuche/javascript</a>)</p><a id="more"></a><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ol><li><p>使用字面值创建对象</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> item = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> item = &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>使用对象方法的简写</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ol><li><p>使用字面值创建数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> items = [];</span><br></pre></td></tr></table></figure></li><li><p>使用扩展运算符<code>...</code>复制数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> len = items.length;</span><br><span class="line"><span class="keyword">const</span> itemsCopy = [];</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  itemsCopy[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemsCopy = [...items];</span><br></pre></td></tr></table></figure></li><li><p>使用Array#from把类数组对象转为数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.foo'</span>);</span><br><span class="line"><span class="keyword">const</span> nodes = <span class="built_in">Array</span>.from(foo);</span><br></pre></td></tr></table></figure></li></ol><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><ol><li><p>使用解构存取和使用多属性对象</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> firstName = user.firstName;</span><br><span class="line">  <span class="keyword">const</span> lastName = user.lastName;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; firstName, lastName &#125; = obj;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对数组使用解构赋值</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> second = arr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> [first, second] = arr;</span><br></pre></td></tr></table></figure></li><li><p>回传对个对象时, 使用对象解构, 而不是数组解构</p><blockquote><p>为什么？增加属性或者改变排序不会改变调用时的位置。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// then a miracle occurs</span></span><br><span class="line">  <span class="keyword">return</span> [left, right, top, bottom];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用时需要考虑回调数据的顺序。</span></span><br><span class="line"><span class="keyword">const</span> [left, __, top] = processInput(input);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// then a miracle occurs</span></span><br><span class="line">  <span class="keyword">return</span> &#123; left, right, top, bottom &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用时只选择需要的数据</span></span><br><span class="line"><span class="keyword">const</span> &#123; left, right &#125; = processInput(input);</span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ol><li>程序化生成字符串时使用模板字符串代替字符串连接<blockquote><p>模板字符串更简洁, 根据可读性</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'How are you, '</span> + name + <span class="string">'?'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="string">'How are you, '</span>, name, <span class="string">'?'</span>].join();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`How are you, <span class="subst">$&#123;name&#125;</span>?`</span>;</span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ol><li><p>使用函数声明代替函数表达式</p><blockquote><p>因为函数声明是可命名的, 所以他们在调用栈中更容易被识别.<br>此外函数声明会把整个函数提升(hoisted), 而函数表达式只会把函数的引用变量名提升. 这条规则是的箭头函数可以取代函数表达式.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>函数表达式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 立即调用的函数表达式(IIFE)</span></span><br><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'welcome!'</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li><li><p>不要使用<code>arguments</code>。可以选择<code>rest</code>语法<code>...</code>替代</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>直接给函数的参数指定默认值，不要使用一个变化的函数参数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// really bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 不！我们不应该改变函数参数。</span></span><br><span class="line">  <span class="comment">// 更加糟糕: 如果参数 opts 是 false 的话，它就会被设定为一个对象。</span></span><br><span class="line">  <span class="comment">// 但这样的写法会造成一些 Bugs。</span></span><br><span class="line">  <span class="comment">//（译注：例如当 opts 被赋值为空字符串，opts 仍然会被下一行代码设定为一个空对象。）</span></span><br><span class="line">  opts = opts || &#123;&#125;;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// still bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (opts === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">    opts = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><ol><li>总是使用<code>class</code>, 避免使用<code>prototype</code><blockquote><p>因为<code>class</code>语法更易读</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queen</span>(<span class="params">contents = []</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._quene = [...contents];</span><br><span class="line">&#125;</span><br><span class="line">Quene.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>._quene[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>._quene.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queen</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(contents = []) &#123;</span><br><span class="line">        <span class="keyword">this</span>._quene = [...contents];</span><br><span class="line">    &#125;</span><br><span class="line">    pop() &#123;</span><br><span class="line">        <span class="keyword">const</span> value = <span class="keyword">this</span>._quene[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">this</span>._quene.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="Iterators-and-Generators"><a href="#Iterators-and-Generators" class="headerlink" title="Iterators and Generators"></a>Iterators and Generators</h2><ol><li>不要使用<code>iterators</code>, 使用高阶函数如<code>map</code>或者<code>reduce</code>来代替<code>for-of</code><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> numbers) &#123;</span><br><span class="line">  sum += num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum === <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">numbers.forEach(<span class="function">(<span class="params">num</span>) =&gt;</span> sum += num);</span><br><span class="line">sum === <span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// best (use the functional force)</span></span><br><span class="line"><span class="keyword">const</span> sum = numbers.reduce(<span class="function">(<span class="params">total, num</span>) =&gt;</span> total += num, <span class="number">0</span>)</span><br><span class="line">sum === <span class="number">15</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="比较运算符和等号"><a href="#比较运算符和等号" class="headerlink" title="比较运算符和等号"></a>比较运算符和等号</h2><p>条件表达式例如 if 语句通过抽象方法<code>ToBoolean</code>强制计算它们的表达式并且总是遵守下面的规则：</p><ul><li>对象 被计算为 true</li><li>Undefined 被计算为 false</li><li>Null 被计算为 false</li><li>布尔值 被计算为 布尔的值</li><li>数字 如果是 +0、-0、或 NaN 被计算为 false, 否则为 true</li><li>字符串 如果是空字符串 ‘’ 被计算为 false，否则为 true<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2></li></ul><ol><li>给注释增加 FIXME 或 TODO 的前缀可以帮助其他开发者快速了解这是一个需要复查的问题，或是给需要实现的功能提供一个解决方式。这将有别于常见的注释，因为它们是可操作的。使用 FIXME – need to figure this out 或者 TODO – need to implement。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">FIXME:</span> shouldn't use a global here</span></span><br><span class="line">    total = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> total should be configurable by an options param</span></span><br><span class="line">    <span class="keyword">this</span>.total = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="空白"><a href="#空白" class="headerlink" title="空白"></a>空白</h2><ol><li>使用2个空格作为缩进。</li><li>在文件末尾插入一个空行。<h2 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a>逗号</h2></li><li>增加结尾的逗号: 需要。<blockquote><p><code>JavaScript</code>支持这种做法,并且会自动处理结尾多余的逗号, 好处是会让git diff更干净, 新增字段更方便.<br>另外，像 babel 这样的转译器会移除结尾多余的逗号，也就是说你不必担心老旧浏览器的尾逗号问题。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad - git diff without trailing comma</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">     firstName: <span class="string">'Florence'</span>,</span><br><span class="line">-    lastName: <span class="string">'Nightingale'</span></span><br><span class="line">+    lastName: <span class="string">'Nightingale'</span>,</span><br><span class="line">+    inventorOf: [<span class="string">'coxcomb graph'</span>, <span class="string">'modern nursing'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good - git diff with trailing comma</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">     firstName: <span class="string">'Florence'</span>,</span><br><span class="line">     lastName: <span class="string">'Nightingale'</span>,</span><br><span class="line">+    inventorOf: [<span class="string">'coxcomb chart'</span>, <span class="string">'modern nursing'</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Dana'</span>,</span><br><span class="line">  lastName: <span class="string">'Scully'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> heroes = [</span><br><span class="line">  <span class="string">'Batman'</span>,</span><br><span class="line">  <span class="string">'Superman'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Dana'</span>,</span><br><span class="line">  lastName: <span class="string">'Scully'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> heroes = [</span><br><span class="line">  <span class="string">'Batman'</span>,</span><br><span class="line">  <span class="string">'Superman'</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ol><li><p>字符串</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  =&gt; this.reviewScore = 9;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="built_in">String</span>(<span class="keyword">this</span>.reviewScore);</span><br></pre></td></tr></table></figure></li><li><p>如果因为某些原因 parseInt 成为你所做的事的瓶颈而需要使用位操作解决性能问题时，留个注释说清楚原因和你的目的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 parseInt 导致我的程序变慢，</span></span><br><span class="line"><span class="comment"> * 改成使用位操作转换数字快多了。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> val = inputValue &gt;&gt; <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><ol><li><p>别保存<code>this</code>的引用。使用箭头函数或<code>Function#bind</code>。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(self);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(that);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果你的文件只输出一个类，那你的文件名必须和类名完全保持一致。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file contents</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckBox</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CheckBox;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in some other file</span></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">'./checkBox'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">'./check_box'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">'./CheckBox'</span>;</span><br></pre></td></tr></table></figure></li><li><p>当你导出默认的函数时使用驼峰式命名。你的文件名必须和函数名完全保持一致。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeStyleGuide</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> makeStyleGuide;</span><br></pre></td></tr></table></figure></li><li><p>当你导出单例、函数库、空对象时使用帕斯卡式命名。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> AirbnbStyleGuide = &#123;</span><br><span class="line">  es6: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AirbnbStyleGuide;</span><br></pre></td></tr></table></figure></li></ol><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ol><li>当给事件附加数据时（无论是 DOM 事件还是私有事件），传入一个哈希而不是原始值。这样可以让后面的贡献者增加更多数据到事件数据而无需找出并更新事件的每一个处理器。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, listing.id);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, listingId</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something with listingId</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, &#123; <span class="attr">listingId</span> : listing.id &#125;);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something with data.listingId</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> codeStyle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Base64-md5</title>
      <link href="/base64-md5/"/>
      <url>/base64-md5/</url>
      
        <content type="html"><![CDATA[<h1 id="Base64编码与md5摘要算法探究及日常应用"><a href="#Base64编码与md5摘要算法探究及日常应用" class="headerlink" title="Base64编码与md5摘要算法探究及日常应用"></a>Base64编码与md5摘要算法探究及日常应用</h1><p>Base64编码和md5摘要算法我们经常听到,本文主要对着两者算法做一个简单的了解探究<br><a id="more"></a></p><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><p>Base64是一种基于64个可打印字符来表示二进制数据的表示方法,常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据，包括MIME的电子邮件及XML的一些复杂数据。</p><h3 id="Base64来源"><a href="#Base64来源" class="headerlink" title="Base64来源"></a>Base64来源</h3><p>Base64来源于电子邮件的发展,早期的电子邮件是不支持二进制文件(例如图片)的,并且邮件中也不支持非英语字符,邮件也不能有附件,再后来的发展中工程师对电子邮件的技术规范就行了扩充,也就产生了常说的<code>MIME</code>,全称是全”Multipurpose Internet Mail Extensions”，中译为”多用途互联网邮件扩展”,它包括了多项技术规范.<br>一封传统的电子邮件格式如下:<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">From: &quot;Tommy Lee&quot; &lt;lee@example.com&gt;</span><br><span class="line">To: &quot;Jack Zhang&quot; &lt;zhang@example.com&gt;</span><br><span class="line">Subject: Test</span><br><span class="line">Date: Wed, 17 May 2000 19:08:29 -0400</span><br><span class="line">Message-ID: &lt;NDBBIAKOPKHFGPLCODIGIEKBCHAA.lee@example.com&gt;</span><br><span class="line"></span><br><span class="line">Hello World.</span><br></pre></td></tr></table></figure><p></p><p>它包含两个部分,第一部分是信封,里面包含发件人,收件人,邮件主题,邮件发送时间,邮件的唯一标识Message-ID,第二部分是正文,也就是邮件的内容,第一部分和第二部分之间用一个空行隔开,</p><p><code>MIME</code>对传统邮件的扩展体现在在信封里面新增了三行语句</p><ol><li>MIME-Version: 1.0<br>这行语句标志着该邮件使用了<code>MIME</code>规范,收信端将按照该规范进行解析邮件内容</li><li><p>Content-Type: text/plain; charset=”UTF-8”<br>这行语句说明了改邮件的信息类型和编码方式<br>Content-Type表明信息类型，缺省值为” text/plain”<br>它包含了主要类型（primary type）和次要类型（subtype）两个部分，两者之间用”/“分割。主要类型有9种，分别是application、audio、example、image、message、model、multipart、text、video,每种主要类型下面又分为多种次要类型,常用的一些Content-Type类型如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">text/plain：纯文本，文件扩展名.txt</span><br><span class="line">text/html：HTML文本，文件扩展名.htm和.html</span><br><span class="line">image/jpeg：jpeg格式的图片，文件扩展名.jpg</span><br><span class="line">image/gif：GIF格式的图片，文件扩展名.gif</span><br><span class="line">audio/x-wave：WAVE格式的音频，文件扩展名.wav</span><br><span class="line">audio/mpeg：MP3格式的音频，文件扩展名.mp3</span><br><span class="line">video/mpeg：MPEG格式的视频，文件扩展名.mpg</span><br><span class="line">application/zip：PK-ZIP格式的压缩文件，文件扩展名.zip</span><br></pre></td></tr></table></figure><p>如果信息的主要类型是”text”，那么还必须指明编码类型”charset”，缺省值是ASCII，其他可能值有”ISO-8859-1”、”UTF-8”、”GB2312”等等。</p></li><li>Content-transfer-encoding: Base64<br>这里我们的主角就登场了,这行语句表明邮件编码转换的方式,因为现代邮件里面会有图片或者其它原始邮件不支持的内容,那么在发送的时候就需要对内容进行编码转换,将内容转换成邮件支持的<a href="https//tool.oschina.net/commons?type=4">ASCII字符</a>,Content-transfer-encoding的值有5种—-“7bit”、”8bit”、”binary”、”quoted-printable”和”Base64”—-其中”7bit”是缺省值，即不用转化的ASCII字符。真正常用是”quoted-printable”和”Base64”两种.</li></ol><h3 id="quoted-printable编码"><a href="#quoted-printable编码" class="headerlink" title="quoted-printable编码"></a>quoted-printable编码</h3><p>关于’quoted-printable’简单介绍一下,它主要用于ACSII文本中夹杂少量非ASCII码字符的情况，不适合于转换纯二进制文件.<br>它规定将每一个8位的字节，转换为3个字符,规则如下:</p><ol><li>所有可打印的ASCII码字符（十进制值从33到126）都保持原样不变，”=”（十进制值61）除外,其余的字符都要进行编码。</li><li>编码后第一个字符是”=”号，这是固定不变的;</li><li>编码后二个字符是二个十六进制数，分别代表了这个字节前四位和后四位的数值。<br>例如ASCII码中的换页键的码值是12,那么先转成8位的二进制是00001100,再转成16进制是0C,然后再在前面加上一个’=’号,最后的编码结果是’=0C’.</li></ol><h3 id="Base64编码"><a href="#Base64编码" class="headerlink" title="Base64编码"></a>Base64编码</h3><p>首先选出一个字符集,分别是小写字母a-z、大写字母A-Z、数字0-9、符号”+”、”/“加起来是64个,另外有一个垫字符’=’,然后将其它所有不在这个字符集里面的字符都转换到到这个字符集里面去,转换规则如下:</p><ol><li>将每三个字节作为一组，一共是24个二进制位;</li><li>再将这24个二进制位分为四组，每个组有6个二进制位;</li><li>在每组前面加两个00，扩展成32个二进制位，即四个字节;</li><li>查询<a href="https://blog.csdn.net/goodlixueyong/article/details/52132250" target="_blank" rel="noopener">字符表</a>,找到每个字节在表中对应的符号，这就是Base64的编码值;<br>所以分析最终的结果的话,原始的三个字节经过转换以后会变成4个字节,因此Base64编码后的文本，会比原文本大出三分之一左右。</li></ol><h4 id="Base64编码示例"><a href="#Base64编码示例" class="headerlink" title="Base64编码示例"></a>Base64编码示例</h4><p>编码译文单词’six’:<br><code>s i x</code> -&lt;转为对应的ASCII值&gt;&gt;&gt; <code>115 105 120</code> -&lt;转为对应的二进制&gt;&gt; <code>01110011 01101001 01111000</code> -&lt;二进制分为四组&gt;&gt; <code>011100 110110 100101 111000</code> -&lt;每组前面添加两个0&gt;&gt; <code>00011100 00110110 00100101 00111000</code> -&lt;每组转为对应的10进制&gt;&gt; <code>28 54 37 56</code> -&lt;查询Base64字符表转为对应字符&gt;&gt; <code>c 2 l 4</code><br>则’six’编码后的结果是’c2l4’,你可以用这个<a href="https//tool.oschina.net/encrypt?type=3">工具</a>来验证你的转码结果是否正确.</p><p>如果字节数不足三，则处理如下:</p><ul><li><p>二个字节的情况：将这二个字节的一共16个二进制位，按照上面的规则，转成三组，最后一组除了前面加两个0以外，后面也要加两个0。这样得到一个三位的Base64编码，再在末尾补上一个”=”号。<br>比如，”Ma”这个字符串是两个字节，可以转化成三组00010011、00010110、00010000以后，对应Base64值分别为T、W、E，再补上一个”=”号，因此”Ma”的Base64编码就是TWE=。</p></li><li><p>一个字节的情况：将这一个字节的8个二进制位，按照上面的规则转成二组，最后一组除了前面加二个0以外，后面再加4个0。这样得到一个二位的Base64编码，再在末尾补上两个”=”号。<br>比如，”M”这个字母是一个字节，可以转化为二组00010011、00010000，对应的Base64值分别为T、Q，再补上二个”=”号，因此”M”的Base64编码就是’TQ==’。</p></li></ul><p>再举一个中文的例子，汉字”严”如何转化成Base64编码？</p><p>这里需要注意，汉字本身可以有多种编码，比如gb2312、utf-8、gbk等等，每一种编码的Base64对应值都不一样。下面的例子以utf-8为例。</p><p>首先，”严”的utf-8编码为E4B8A5，写成二进制就是三字节的”11100100 10111000 10100101”。将这个24位的二进制字符串，按照第3节中的规则，转换成四组一共32位的二进制值”00111001 00001011 00100010 00100101”，相应的十进制数为57、11、34、37，它们对应的Base64值就为5、L、i、l。</p><p>所以，汉字”严”（utf-8编码）的Base64值就是5Lil。</p><h4 id="Base64在js中的使用"><a href="#Base64在js中的使用" class="headerlink" title="Base64在js中的使用"></a>Base64在js中的使用</h4><p>Base64的js实现如下:<br></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  Base64 encode / decode</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  @author haitao.tu</span></span><br><span class="line"><span class="comment">*  @date   2010-04-26</span></span><br><span class="line"><span class="comment">*  @email  tuhaitao@foxmail.com</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base64</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">true<span class="comment">// private property</span></span><br><span class="line">true_keyStr = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="</span>;</span><br><span class="line"> </span><br><span class="line">true<span class="comment">// public method for encoding</span></span><br><span class="line">true<span class="keyword">this</span>.encode = <span class="function"><span class="keyword">function</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">truetrue<span class="keyword">var</span> output = <span class="string">""</span>;</span><br><span class="line">truetrue<span class="keyword">var</span> chr1, chr2, chr3, enc1, enc2, enc3, enc4;</span><br><span class="line">truetrue<span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">truetrueinput = _utf8_encode(input);</span><br><span class="line">truetrue<span class="keyword">while</span> (i &lt; input.length) &#123;</span><br><span class="line">truetruetruechr1 = input.charCodeAt(i++);</span><br><span class="line">truetruetruechr2 = input.charCodeAt(i++);</span><br><span class="line">truetruetruechr3 = input.charCodeAt(i++);</span><br><span class="line">truetruetrueenc1 = chr1 &gt;&gt; <span class="number">2</span>;</span><br><span class="line">truetruetrueenc2 = ((chr1 &amp; <span class="number">3</span>) &lt;&lt; <span class="number">4</span>) | (chr2 &gt;&gt; <span class="number">4</span>);</span><br><span class="line">truetruetrueenc3 = ((chr2 &amp; <span class="number">15</span>) &lt;&lt; <span class="number">2</span>) | (chr3 &gt;&gt; <span class="number">6</span>);</span><br><span class="line">truetruetrueenc4 = chr3 &amp; <span class="number">63</span>;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (<span class="built_in">isNaN</span>(chr2)) &#123;</span><br><span class="line">truetruetruetrueenc3 = enc4 = <span class="number">64</span>;</span><br><span class="line">truetruetrue&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isNaN</span>(chr3)) &#123;</span><br><span class="line">truetruetruetrueenc4 = <span class="number">64</span>;</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetruetrueoutput = output +</span><br><span class="line">truetruetrue_keyStr.charAt(enc1) + _keyStr.charAt(enc2) +</span><br><span class="line">truetruetrue_keyStr.charAt(enc3) + _keyStr.charAt(enc4);</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="keyword">return</span> output;</span><br><span class="line">true&#125;</span><br><span class="line"> </span><br><span class="line">true<span class="comment">// public method for decoding</span></span><br><span class="line">true<span class="keyword">this</span>.decode = <span class="function"><span class="keyword">function</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">truetrue<span class="keyword">var</span> output = <span class="string">""</span>;</span><br><span class="line">truetrue<span class="keyword">var</span> chr1, chr2, chr3;</span><br><span class="line">truetrue<span class="keyword">var</span> enc1, enc2, enc3, enc4;</span><br><span class="line">truetrue<span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">truetrueinput = input.replace(<span class="regexp">/[^A-Za-z0-9\+\/\=]/g</span>, <span class="string">""</span>);</span><br><span class="line">truetrue<span class="keyword">while</span> (i &lt; input.length) &#123;</span><br><span class="line">truetruetrueenc1 = _keyStr.indexOf(input.charAt(i++));</span><br><span class="line">truetruetrueenc2 = _keyStr.indexOf(input.charAt(i++));</span><br><span class="line">truetruetrueenc3 = _keyStr.indexOf(input.charAt(i++));</span><br><span class="line">truetruetrueenc4 = _keyStr.indexOf(input.charAt(i++));</span><br><span class="line">truetruetruechr1 = (enc1 &lt;&lt; <span class="number">2</span>) | (enc2 &gt;&gt; <span class="number">4</span>);</span><br><span class="line">truetruetruechr2 = ((enc2 &amp; <span class="number">15</span>) &lt;&lt; <span class="number">4</span>) | (enc3 &gt;&gt; <span class="number">2</span>);</span><br><span class="line">truetruetruechr3 = ((enc3 &amp; <span class="number">3</span>) &lt;&lt; <span class="number">6</span>) | enc4;</span><br><span class="line">truetruetrueoutput = output + <span class="built_in">String</span>.fromCharCode(chr1);</span><br><span class="line">truetruetrue<span class="keyword">if</span> (enc3 != <span class="number">64</span>) &#123;</span><br><span class="line">truetruetruetrueoutput = output + <span class="built_in">String</span>.fromCharCode(chr2);</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (enc4 != <span class="number">64</span>) &#123;</span><br><span class="line">truetruetruetrueoutput = output + <span class="built_in">String</span>.fromCharCode(chr3);</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrueoutput = _utf8_decode(output);</span><br><span class="line">truetrue<span class="keyword">return</span> output;</span><br><span class="line">true&#125;</span><br><span class="line"> </span><br><span class="line">true<span class="comment">// private method for UTF-8 encoding</span></span><br><span class="line">true_utf8_encode = <span class="function"><span class="keyword">function</span> (<span class="params">string</span>) </span>&#123;</span><br><span class="line">truetruestring = string.replace(<span class="regexp">/\r\n/g</span>,<span class="string">"\n"</span>);</span><br><span class="line">truetrue<span class="keyword">var</span> utftext = <span class="string">""</span>;</span><br><span class="line">truetrue<span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0</span>; n &lt; string.length; n++) &#123;</span><br><span class="line">truetruetrue<span class="keyword">var</span> c = string.charCodeAt(n);</span><br><span class="line">truetruetrue<span class="keyword">if</span> (c &lt; <span class="number">128</span>) &#123;</span><br><span class="line">truetruetruetrueutftext += <span class="built_in">String</span>.fromCharCode(c);</span><br><span class="line">truetruetrue&#125; <span class="keyword">else</span> <span class="keyword">if</span>((c &gt; <span class="number">127</span>) &amp;&amp; (c &lt; <span class="number">2048</span>)) &#123;</span><br><span class="line">truetruetruetrueutftext += <span class="built_in">String</span>.fromCharCode((c &gt;&gt; <span class="number">6</span>) | <span class="number">192</span>);</span><br><span class="line">truetruetruetrueutftext += <span class="built_in">String</span>.fromCharCode((c &amp; <span class="number">63</span>) | <span class="number">128</span>);</span><br><span class="line">truetruetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetruetrueutftext += <span class="built_in">String</span>.fromCharCode((c &gt;&gt; <span class="number">12</span>) | <span class="number">224</span>);</span><br><span class="line">truetruetruetrueutftext += <span class="built_in">String</span>.fromCharCode(((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">63</span>) | <span class="number">128</span>);</span><br><span class="line">truetruetruetrueutftext += <span class="built_in">String</span>.fromCharCode((c &amp; <span class="number">63</span>) | <span class="number">128</span>);</span><br><span class="line">truetruetrue&#125;</span><br><span class="line"> </span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="keyword">return</span> utftext;</span><br><span class="line">true&#125;</span><br><span class="line"> </span><br><span class="line">true<span class="comment">// private method for UTF-8 decoding</span></span><br><span class="line">true_utf8_decode = <span class="function"><span class="keyword">function</span> (<span class="params">utftext</span>) </span>&#123;</span><br><span class="line">truetrue<span class="keyword">var</span> string = <span class="string">""</span>;</span><br><span class="line">truetrue<span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">truetrue<span class="keyword">var</span> c = c1 = c2 = <span class="number">0</span>;</span><br><span class="line">truetrue<span class="keyword">while</span> ( i &lt; utftext.length ) &#123;</span><br><span class="line">truetruetruec = utftext.charCodeAt(i);</span><br><span class="line">truetruetrue<span class="keyword">if</span> (c &lt; <span class="number">128</span>) &#123;</span><br><span class="line">truetruetruetruestring += <span class="built_in">String</span>.fromCharCode(c);</span><br><span class="line">truetruetruetruei++;</span><br><span class="line">truetruetrue&#125; <span class="keyword">else</span> <span class="keyword">if</span>((c &gt; <span class="number">191</span>) &amp;&amp; (c &lt; <span class="number">224</span>)) &#123;</span><br><span class="line">truetruetruetruec2 = utftext.charCodeAt(i+<span class="number">1</span>);</span><br><span class="line">truetruetruetruestring += <span class="built_in">String</span>.fromCharCode(((c &amp; <span class="number">31</span>) &lt;&lt; <span class="number">6</span>) | (c2 &amp; <span class="number">63</span>));</span><br><span class="line">truetruetruetruei += <span class="number">2</span>;</span><br><span class="line">truetruetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetruetruec2 = utftext.charCodeAt(i+<span class="number">1</span>);</span><br><span class="line">truetruetruetruec3 = utftext.charCodeAt(i+<span class="number">2</span>);</span><br><span class="line">truetruetruetruestring += <span class="built_in">String</span>.fromCharCode(((c &amp; <span class="number">15</span>) &lt;&lt; <span class="number">12</span>) | ((c2 &amp; <span class="number">63</span>) &lt;&lt; <span class="number">6</span>) | (c3 &amp; <span class="number">63</span>));</span><br><span class="line">truetruetruetruei += <span class="number">3</span>;</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="keyword">return</span> string;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="md5摘要算法"><a href="#md5摘要算法" class="headerlink" title="md5摘要算法"></a>md5摘要算法</h2><p>Base64我们说的差不多了,下面说说md5.<br>md5全称’MD5消息摘要算法’（英语：MD5 Message-Digest Algorithm）,其最明显的作用就是对一段文本或者二进制文件进行运算之后得出一个128位的值,我们通常会把计算结果转换成32个16进制的数来表示.</p><ul><li>对文本进行运算常用于密码的加密,比如对’password2018’这个字符串进行加密之后得到’f4654d5ac34aca487f0e3cb08d769f8a’,由于md5发生碰撞的概率极低,也就是不同的文本加密后得到同样的结果的可能性微乎其微,所以一般可以认为’f4654d5ac34aca487f0e3cb08d769f8a’这样的结果就唯一标识了’password2018’这个字符串.<br>加密容易解密难,如果你想通过’f4654d5ac34aca487f0e3cb08d769f8a’这个结果去逆向运算得到’password2018’这个原始数据几乎是不可能的,付出的成本也相当于是天价,所以我们的网站登录经常会采取用md5加密用户密码的方式来验证和存储用户账户密码.</li><li>对二进制文件的运算常用于确保文件的完整性,比如在一些正规的网站上下载东西时常常附带会有一个<code>.md5</code>的文件,里面的内容类似于<code>MD5 (tanajiya.tar.gz) = 38b8c2c1093dd0fec383a9d9ac940515</code>这样,这里面记录的一串字符就是你要下载的这个文件的md5的运算结果,因为之前说过了一个东西的md5值是唯一的,一个md5结果也同样标识着唯一的一个东西,类似于每个人都有自己独特的指纹一样,一旦这个文件被人篡改过,那么再次对这个文件计算md5就会得到与之前不一样的md5值,所以我们常常会用这个md5结果来验证确保文件的完整性.</li></ul><h3 id="md5的js实现如下"><a href="#md5的js实现如下" class="headerlink" title="md5的js实现如下:"></a>md5的js实现如下:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message</span></span><br><span class="line"><span class="comment"> * Digest Algorithm, as defined in RFC 1321.</span></span><br><span class="line"><span class="comment"> * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.</span></span><br><span class="line"><span class="comment"> * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet</span></span><br><span class="line"><span class="comment"> * Distributed under the BSD License</span></span><br><span class="line"><span class="comment"> * See https//pajhome.org.uk/crypt/md5 for more info.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Configurable variables. You may need to tweak these to be compatible with</span></span><br><span class="line"><span class="comment"> * the server-side, but the defaults work in most cases.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hexcase = <span class="number">0</span>;  <span class="comment">/* hex output format. 0 - lowercase; 1 - uppercase        */</span></span><br><span class="line"><span class="keyword">var</span> b64pad  = <span class="string">""</span>; <span class="comment">/* base-64 pad character. "=" for strict RFC compliance   */</span></span><br><span class="line"><span class="keyword">var</span> chrsz   = <span class="number">8</span>;  <span class="comment">/* bits per input character. 8 - ASCII; 16 - Unicode      */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * These are the functions you'll usually want to call</span></span><br><span class="line"><span class="comment"> * They take string arguments and return either hex or base-64 encoded strings</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex_md5</span>(<span class="params">s</span>)</span>&#123; <span class="keyword">return</span> binl2hex(core_md5(str2binl(s), s.length * chrsz));&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_md5</span>(<span class="params">s</span>)</span>&#123; <span class="keyword">return</span> binl2b64(core_md5(str2binl(s), s.length * chrsz));&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_md5</span>(<span class="params">s</span>)</span>&#123; <span class="keyword">return</span> binl2str(core_md5(str2binl(s), s.length * chrsz));&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex_hmac_md5</span>(<span class="params">key, data</span>) </span>&#123; <span class="keyword">return</span> binl2hex(core_hmac_md5(key, data)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_hmac_md5</span>(<span class="params">key, data</span>) </span>&#123; <span class="keyword">return</span> binl2b64(core_hmac_md5(key, data)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_hmac_md5</span>(<span class="params">key, data</span>) </span>&#123; <span class="keyword">return</span> binl2str(core_hmac_md5(key, data)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Perform a simple self-test to see if the VM is working</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_vm_test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> hex_md5(<span class="string">"abc"</span>) == <span class="string">"900150983cd24fb0d6963f7d28e17f72"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Calculate the MD5 of an array of little-endian words, and a bit length</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">core_md5</span>(<span class="params">x, len</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* append padding */</span></span><br><span class="line">  x[len &gt;&gt; <span class="number">5</span>] |= <span class="number">0x80</span> &lt;&lt; ((len) % <span class="number">32</span>);</span><br><span class="line">  x[(((len + <span class="number">64</span>) &gt;&gt;&gt; <span class="number">9</span>) &lt;&lt; <span class="number">4</span>) + <span class="number">14</span>] = len;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> a =  <span class="number">1732584193</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">-271733879</span>;</span><br><span class="line">  <span class="keyword">var</span> c = <span class="number">-1732584194</span>;</span><br><span class="line">  <span class="keyword">var</span> d =  <span class="number">271733878</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; x.length; i += <span class="number">16</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> olda = a;</span><br><span class="line">    <span class="keyword">var</span> oldb = b;</span><br><span class="line">    <span class="keyword">var</span> oldc = c;</span><br><span class="line">    <span class="keyword">var</span> oldd = d;</span><br><span class="line"></span><br><span class="line">    a = md5_ff(a, b, c, d, x[i+ <span class="number">0</span>], <span class="number">7</span> , <span class="number">-680876936</span>);</span><br><span class="line">    d = md5_ff(d, a, b, c, x[i+ <span class="number">1</span>], <span class="number">12</span>, <span class="number">-389564586</span>);</span><br><span class="line">    c = md5_ff(c, d, a, b, x[i+ <span class="number">2</span>], <span class="number">17</span>,  <span class="number">606105819</span>);</span><br><span class="line">    b = md5_ff(b, c, d, a, x[i+ <span class="number">3</span>], <span class="number">22</span>, <span class="number">-1044525330</span>);</span><br><span class="line">    a = md5_ff(a, b, c, d, x[i+ <span class="number">4</span>], <span class="number">7</span> , <span class="number">-176418897</span>);</span><br><span class="line">    d = md5_ff(d, a, b, c, x[i+ <span class="number">5</span>], <span class="number">12</span>,  <span class="number">1200080426</span>);</span><br><span class="line">    c = md5_ff(c, d, a, b, x[i+ <span class="number">6</span>], <span class="number">17</span>, <span class="number">-1473231341</span>);</span><br><span class="line">    b = md5_ff(b, c, d, a, x[i+ <span class="number">7</span>], <span class="number">22</span>, <span class="number">-45705983</span>);</span><br><span class="line">    a = md5_ff(a, b, c, d, x[i+ <span class="number">8</span>], <span class="number">7</span> ,  <span class="number">1770035416</span>);</span><br><span class="line">    d = md5_ff(d, a, b, c, x[i+ <span class="number">9</span>], <span class="number">12</span>, <span class="number">-1958414417</span>);</span><br><span class="line">    c = md5_ff(c, d, a, b, x[i+<span class="number">10</span>], <span class="number">17</span>, <span class="number">-42063</span>);</span><br><span class="line">    b = md5_ff(b, c, d, a, x[i+<span class="number">11</span>], <span class="number">22</span>, <span class="number">-1990404162</span>);</span><br><span class="line">    a = md5_ff(a, b, c, d, x[i+<span class="number">12</span>], <span class="number">7</span> ,  <span class="number">1804603682</span>);</span><br><span class="line">    d = md5_ff(d, a, b, c, x[i+<span class="number">13</span>], <span class="number">12</span>, <span class="number">-40341101</span>);</span><br><span class="line">    c = md5_ff(c, d, a, b, x[i+<span class="number">14</span>], <span class="number">17</span>, <span class="number">-1502002290</span>);</span><br><span class="line">    b = md5_ff(b, c, d, a, x[i+<span class="number">15</span>], <span class="number">22</span>,  <span class="number">1236535329</span>);</span><br><span class="line"></span><br><span class="line">    a = md5_gg(a, b, c, d, x[i+ <span class="number">1</span>], <span class="number">5</span> , <span class="number">-165796510</span>);</span><br><span class="line">    d = md5_gg(d, a, b, c, x[i+ <span class="number">6</span>], <span class="number">9</span> , <span class="number">-1069501632</span>);</span><br><span class="line">    c = md5_gg(c, d, a, b, x[i+<span class="number">11</span>], <span class="number">14</span>,  <span class="number">643717713</span>);</span><br><span class="line">    b = md5_gg(b, c, d, a, x[i+ <span class="number">0</span>], <span class="number">20</span>, <span class="number">-373897302</span>);</span><br><span class="line">    a = md5_gg(a, b, c, d, x[i+ <span class="number">5</span>], <span class="number">5</span> , <span class="number">-701558691</span>);</span><br><span class="line">    d = md5_gg(d, a, b, c, x[i+<span class="number">10</span>], <span class="number">9</span> ,  <span class="number">38016083</span>);</span><br><span class="line">    c = md5_gg(c, d, a, b, x[i+<span class="number">15</span>], <span class="number">14</span>, <span class="number">-660478335</span>);</span><br><span class="line">    b = md5_gg(b, c, d, a, x[i+ <span class="number">4</span>], <span class="number">20</span>, <span class="number">-405537848</span>);</span><br><span class="line">    a = md5_gg(a, b, c, d, x[i+ <span class="number">9</span>], <span class="number">5</span> ,  <span class="number">568446438</span>);</span><br><span class="line">    d = md5_gg(d, a, b, c, x[i+<span class="number">14</span>], <span class="number">9</span> , <span class="number">-1019803690</span>);</span><br><span class="line">    c = md5_gg(c, d, a, b, x[i+ <span class="number">3</span>], <span class="number">14</span>, <span class="number">-187363961</span>);</span><br><span class="line">    b = md5_gg(b, c, d, a, x[i+ <span class="number">8</span>], <span class="number">20</span>,  <span class="number">1163531501</span>);</span><br><span class="line">    a = md5_gg(a, b, c, d, x[i+<span class="number">13</span>], <span class="number">5</span> , <span class="number">-1444681467</span>);</span><br><span class="line">    d = md5_gg(d, a, b, c, x[i+ <span class="number">2</span>], <span class="number">9</span> , <span class="number">-51403784</span>);</span><br><span class="line">    c = md5_gg(c, d, a, b, x[i+ <span class="number">7</span>], <span class="number">14</span>,  <span class="number">1735328473</span>);</span><br><span class="line">    b = md5_gg(b, c, d, a, x[i+<span class="number">12</span>], <span class="number">20</span>, <span class="number">-1926607734</span>);</span><br><span class="line"></span><br><span class="line">    a = md5_hh(a, b, c, d, x[i+ <span class="number">5</span>], <span class="number">4</span> , <span class="number">-378558</span>);</span><br><span class="line">    d = md5_hh(d, a, b, c, x[i+ <span class="number">8</span>], <span class="number">11</span>, <span class="number">-2022574463</span>);</span><br><span class="line">    c = md5_hh(c, d, a, b, x[i+<span class="number">11</span>], <span class="number">16</span>,  <span class="number">1839030562</span>);</span><br><span class="line">    b = md5_hh(b, c, d, a, x[i+<span class="number">14</span>], <span class="number">23</span>, <span class="number">-35309556</span>);</span><br><span class="line">    a = md5_hh(a, b, c, d, x[i+ <span class="number">1</span>], <span class="number">4</span> , <span class="number">-1530992060</span>);</span><br><span class="line">    d = md5_hh(d, a, b, c, x[i+ <span class="number">4</span>], <span class="number">11</span>,  <span class="number">1272893353</span>);</span><br><span class="line">    c = md5_hh(c, d, a, b, x[i+ <span class="number">7</span>], <span class="number">16</span>, <span class="number">-155497632</span>);</span><br><span class="line">    b = md5_hh(b, c, d, a, x[i+<span class="number">10</span>], <span class="number">23</span>, <span class="number">-1094730640</span>);</span><br><span class="line">    a = md5_hh(a, b, c, d, x[i+<span class="number">13</span>], <span class="number">4</span> ,  <span class="number">681279174</span>);</span><br><span class="line">    d = md5_hh(d, a, b, c, x[i+ <span class="number">0</span>], <span class="number">11</span>, <span class="number">-358537222</span>);</span><br><span class="line">    c = md5_hh(c, d, a, b, x[i+ <span class="number">3</span>], <span class="number">16</span>, <span class="number">-722521979</span>);</span><br><span class="line">    b = md5_hh(b, c, d, a, x[i+ <span class="number">6</span>], <span class="number">23</span>,  <span class="number">76029189</span>);</span><br><span class="line">    a = md5_hh(a, b, c, d, x[i+ <span class="number">9</span>], <span class="number">4</span> , <span class="number">-640364487</span>);</span><br><span class="line">    d = md5_hh(d, a, b, c, x[i+<span class="number">12</span>], <span class="number">11</span>, <span class="number">-421815835</span>);</span><br><span class="line">    c = md5_hh(c, d, a, b, x[i+<span class="number">15</span>], <span class="number">16</span>,  <span class="number">530742520</span>);</span><br><span class="line">    b = md5_hh(b, c, d, a, x[i+ <span class="number">2</span>], <span class="number">23</span>, <span class="number">-995338651</span>);</span><br><span class="line"></span><br><span class="line">    a = md5_ii(a, b, c, d, x[i+ <span class="number">0</span>], <span class="number">6</span> , <span class="number">-198630844</span>);</span><br><span class="line">    d = md5_ii(d, a, b, c, x[i+ <span class="number">7</span>], <span class="number">10</span>,  <span class="number">1126891415</span>);</span><br><span class="line">    c = md5_ii(c, d, a, b, x[i+<span class="number">14</span>], <span class="number">15</span>, <span class="number">-1416354905</span>);</span><br><span class="line">    b = md5_ii(b, c, d, a, x[i+ <span class="number">5</span>], <span class="number">21</span>, <span class="number">-57434055</span>);</span><br><span class="line">    a = md5_ii(a, b, c, d, x[i+<span class="number">12</span>], <span class="number">6</span> ,  <span class="number">1700485571</span>);</span><br><span class="line">    d = md5_ii(d, a, b, c, x[i+ <span class="number">3</span>], <span class="number">10</span>, <span class="number">-1894986606</span>);</span><br><span class="line">    c = md5_ii(c, d, a, b, x[i+<span class="number">10</span>], <span class="number">15</span>, <span class="number">-1051523</span>);</span><br><span class="line">    b = md5_ii(b, c, d, a, x[i+ <span class="number">1</span>], <span class="number">21</span>, <span class="number">-2054922799</span>);</span><br><span class="line">    a = md5_ii(a, b, c, d, x[i+ <span class="number">8</span>], <span class="number">6</span> ,  <span class="number">1873313359</span>);</span><br><span class="line">    d = md5_ii(d, a, b, c, x[i+<span class="number">15</span>], <span class="number">10</span>, <span class="number">-30611744</span>);</span><br><span class="line">    c = md5_ii(c, d, a, b, x[i+ <span class="number">6</span>], <span class="number">15</span>, <span class="number">-1560198380</span>);</span><br><span class="line">    b = md5_ii(b, c, d, a, x[i+<span class="number">13</span>], <span class="number">21</span>,  <span class="number">1309151649</span>);</span><br><span class="line">    a = md5_ii(a, b, c, d, x[i+ <span class="number">4</span>], <span class="number">6</span> , <span class="number">-145523070</span>);</span><br><span class="line">    d = md5_ii(d, a, b, c, x[i+<span class="number">11</span>], <span class="number">10</span>, <span class="number">-1120210379</span>);</span><br><span class="line">    c = md5_ii(c, d, a, b, x[i+ <span class="number">2</span>], <span class="number">15</span>,  <span class="number">718787259</span>);</span><br><span class="line">    b = md5_ii(b, c, d, a, x[i+ <span class="number">9</span>], <span class="number">21</span>, <span class="number">-343485551</span>);</span><br><span class="line"></span><br><span class="line">    a = safe_add(a, olda);</span><br><span class="line">    b = safe_add(b, oldb);</span><br><span class="line">    c = safe_add(c, oldc);</span><br><span class="line">    d = safe_add(d, oldd);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>(a, b, c, d);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * These functions implement the four basic operations the algorithm uses.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_cmn</span>(<span class="params">q, a, b, x, s, t</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_ff</span>(<span class="params">a, b, c, d, x, s, t</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> md5_cmn((b &amp; c) | ((~b) &amp; d), a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_gg</span>(<span class="params">a, b, c, d, x, s, t</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> md5_cmn((b &amp; d) | (c &amp; (~d)), a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_hh</span>(<span class="params">a, b, c, d, x, s, t</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> md5_cmn(b ^ c ^ d, a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_ii</span>(<span class="params">a, b, c, d, x, s, t</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> md5_cmn(c ^ (b | (~d)), a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Calculate the HMAC-MD5, of a key and some data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">core_hmac_md5</span>(<span class="params">key, data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bkey = str2binl(key);</span><br><span class="line">  <span class="keyword">if</span>(bkey.length &gt; <span class="number">16</span>) bkey = core_md5(bkey, key.length * chrsz);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ipad = <span class="built_in">Array</span>(<span class="number">16</span>), opad = <span class="built_in">Array</span>(<span class="number">16</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    ipad[i] = bkey[i] ^ <span class="number">0x36363636</span>;</span><br><span class="line">    opad[i] = bkey[i] ^ <span class="number">0x5C5C5C5C</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> hash = core_md5(ipad.concat(str2binl(data)), <span class="number">512</span> + data.length * chrsz);</span><br><span class="line">  <span class="keyword">return</span> core_md5(opad.concat(hash), <span class="number">512</span> + <span class="number">128</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Add integers, wrapping at 2^32. This uses 16-bit operations internally</span></span><br><span class="line"><span class="comment"> * to work around bugs in some JS interpreters.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_add</span>(<span class="params">x, y</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> lsw = (x &amp; <span class="number">0xFFFF</span>) + (y &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">  <span class="keyword">var</span> msw = (x &gt;&gt; <span class="number">16</span>) + (y &gt;&gt; <span class="number">16</span>) + (lsw &gt;&gt; <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">return</span> (msw &lt;&lt; <span class="number">16</span>) | (lsw &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Bitwise rotate a 32-bit number to the left.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bit_rol</span>(<span class="params">num, cnt</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (num &lt;&lt; cnt) | (num &gt;&gt;&gt; (<span class="number">32</span> - cnt));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert a string to an array of little-endian words</span></span><br><span class="line"><span class="comment"> * If chrsz is ASCII, characters &gt;255 have their hi-byte silently ignored.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2binl</span>(<span class="params">str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bin = <span class="built_in">Array</span>();</span><br><span class="line">  <span class="keyword">var</span> mask = (<span class="number">1</span> &lt;&lt; chrsz) - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length * chrsz; i += chrsz)</span><br><span class="line">    bin[i&gt;&gt;<span class="number">5</span>] |= (str.charCodeAt(i / chrsz) &amp; mask) &lt;&lt; (i%<span class="number">32</span>);</span><br><span class="line">  <span class="keyword">return</span> bin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert an array of little-endian words to a string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binl2str</span>(<span class="params">bin</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">var</span> mask = (<span class="number">1</span> &lt;&lt; chrsz) - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; bin.length * <span class="number">32</span>; i += chrsz)</span><br><span class="line">    str += <span class="built_in">String</span>.fromCharCode((bin[i&gt;&gt;<span class="number">5</span>] &gt;&gt;&gt; (i % <span class="number">32</span>)) &amp; mask);</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert an array of little-endian words to a hex string.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binl2hex</span>(<span class="params">binarray</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hex_tab = hexcase ? <span class="string">"0123456789ABCDEF"</span> : <span class="string">"0123456789abcdef"</span>;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; binarray.length * <span class="number">4</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    str += hex_tab.charAt((binarray[i&gt;&gt;<span class="number">2</span>] &gt;&gt; ((i%<span class="number">4</span>)*<span class="number">8</span>+<span class="number">4</span>)) &amp; <span class="number">0xF</span>) +</span><br><span class="line">           hex_tab.charAt((binarray[i&gt;&gt;<span class="number">2</span>] &gt;&gt; ((i%<span class="number">4</span>)*<span class="number">8</span>  )) &amp; <span class="number">0xF</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert an array of little-endian words to a base-64 string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binl2b64</span>(<span class="params">binarray</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tab = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; binarray.length * <span class="number">4</span>; i += <span class="number">3</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> triplet = (((binarray[i   &gt;&gt; <span class="number">2</span>] &gt;&gt; <span class="number">8</span> * ( i   %<span class="number">4</span>)) &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">16</span>)</span><br><span class="line">                | (((binarray[i+<span class="number">1</span> &gt;&gt; <span class="number">2</span>] &gt;&gt; <span class="number">8</span> * ((i+<span class="number">1</span>)%<span class="number">4</span>)) &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span> )</span><br><span class="line">                |  ((binarray[i+<span class="number">2</span> &gt;&gt; <span class="number">2</span>] &gt;&gt; <span class="number">8</span> * ((i+<span class="number">2</span>)%<span class="number">4</span>)) &amp; <span class="number">0xFF</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(i * <span class="number">8</span> + j * <span class="number">6</span> &gt; binarray.length * <span class="number">32</span>) str += b64pad;</span><br><span class="line">      <span class="keyword">else</span> str += tab.charAt((triplet &gt;&gt; <span class="number">6</span>*(<span class="number">3</span>-j)) &amp; <span class="number">0x3F</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> encrypt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IIFE</title>
      <link href="/IIFE/"/>
      <url>/IIFE/</url>
      
        <content type="html"><![CDATA[<h1 id="增-转-译-JavaScript：立即执行函数表达式（IIFE）"><a href="#增-转-译-JavaScript：立即执行函数表达式（IIFE）" class="headerlink" title="[增][转][译]JavaScript：立即执行函数表达式（IIFE）"></a>[增][转][译]JavaScript：立即执行函数表达式（IIFE）</h1><blockquote><p>原文: https//benalman.com/news/2010/11/immediately-invoked-function-expression/#iife<br>译文: <a href="https://segmentfault.com/a/1190000003985390" target="_blank" rel="noopener">https://segmentfault.com/a/1190000003985390</a> by Murphywuwu</p></blockquote><hr><a id="more"></a><p>可能你并没有注意到，我是一个对于专业术语有一点坚持细节人。所有，当我听到流行的但是还存在误解的术语“自执行匿名函数”多次时，我最终决定将我的想法写进这篇文章里。</p><p>除了提供关于这种模式事实上是如何工作的一些全面的信息，更进一步的，实际上我建议我们应该知道我们应该叫它什么。而且，如果你想跳过这里，你可以直接跳到立即调用函数表达式进行阅读，但是我建议你读完整篇文章。</p><h2 id="它是什么"><a href="#它是什么" class="headerlink" title="它是什么"></a>它是什么</h2><p>在 JavaScript 里，每个函数，当被调用时，都会创建一个新的执行上下文。因为在函数里定义的变量和函数是唯一在内部被访问的变量，而不是在外部被访问的变量，当调用函数时，函数提供的上下文提供了一个非常简单的方法创建私有变量。<br></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(++i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//记住：`counter`和`counter2`都有他们自己的变量 `i`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> counter = makeCounter();</span><br><span class="line">counter();<span class="comment">//1</span></span><br><span class="line">counter();<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> counter2 = makeCounter();</span><br><span class="line">counter2();<span class="comment">//1</span></span><br><span class="line">counter2();<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">i;<span class="comment">//ReferenceError: i is not defined(它只存在于makeCounter里)</span></span><br></pre></td></tr></table></figure><p></p><p>在许多情况下，你可能并不需要makeWhatever这样的函数返回多次累加值，并且可以只调用一次得到一个单一的值，在其他一些情况里，你甚至不需要明确的知道返回值。</p><h3 id="它的核心"><a href="#它的核心" class="headerlink" title="它的核心"></a>它的核心</h3><p>现在，无论你定义一个函数像这样function foo(){}或者var foo = function(){}，调用时，你都需要在后面加上一对圆括号，像这样foo()。<br></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//向下面这样定义的函数可以通过在函数名后加一对括号进行调用，像这样`foo()`，</span></span><br><span class="line"><span class="comment">//因为foo相对于函数表达式`function()&#123;/* code */&#125;`只是一个引用变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">/* code */</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//那这可以说明函数表达式可以通过在其后加上一对括号自己调用自己吗？</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/* code */</span>&#125;(); <span class="comment">//SyntaxError: Unexpected token (</span></span><br></pre></td></tr></table></figure><p></p><p>正如你所看到的，这里捕获了一个错误。当圆括号为了调用函数出现在函数后面时，无论在全局环境或者局部环境里遇到了这样的function关键字，默认的，它会将它当作是一个函数声明，而不是函数表达式，如果你不明确的告诉圆括号它是一个表达式，它会将其当作没有名字的函数声明并且抛出一个错误，因为函数声明需要一个名字。</p><p>(个人理解: 见扩展’函数声明与函数表达式’)</p><ol><li>问题1：这里我么可以思考一个问题，我们是不是也可以像这样直接调用函数<code>var foo = function(){console.log(1)}()</code>，答案是可以的。</li><li>问题2：同样的，我们还可以思考一个问题，像这样的函数声明在后面加上圆括号被直接调用，又会出现什么情况呢？请看下面的解答。</li></ol><h3 id="函数，圆括号，错误"><a href="#函数，圆括号，错误" class="headerlink" title="函数，圆括号，错误"></a>函数，圆括号，错误</h3><p>有趣的是，如果你为一个函数指定一个名字并在它后面放一对圆括号，同样的也会抛出错误，但这次是因为另外一个原因。</p><p>(个人理解: 见扩展’报错原因分析’)</p><p>当圆括号放在一个函数表达式后面指明了这是一个被调用的函数，而圆括号放在一个声明后面便意味着完全的和前面的函数声明分开了，此时圆括号只是一个简单的代表一个括号(用来控制运算优先的括号)。<br></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//然而函数声明语法上是无效的，它仍然是一个声明，紧跟着的圆括号是无效的，因为圆括号里需要包含表达式</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123; <span class="comment">/* code */</span> &#125;();<span class="comment">//SyntaxError: Unexpected token</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//现在，你把一个表达式放在圆括号里，没有抛出错误...,但是函数也并没有执行，因为：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;<span class="comment">/* code */</span>&#125;(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//它等同于如下，一个函数声明跟着一个完全没有关系的表达式:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;<span class="comment">/* code */</span>&#125;</span><br><span class="line">(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p></p><h2 id="立即执行函数表达式（IIFE）"><a href="#立即执行函数表达式（IIFE）" class="headerlink" title="立即执行函数表达式（IIFE）"></a>立即执行函数表达式（IIFE）</h2><p>幸运的是，修正语法错误很简单。最流行的也最被接受的方法是将函数声明包裹在圆括号里来告诉语法分析器去表达一个函数表达式，因为在<code>Javascript</code>里，圆括号不能包含声明。因为这点，当圆括号为了包裹函数碰上了<code>function</code>关键词，它便知道将它作为一个函数表达式去解析而不是函数声明。注意理解这里的圆括号和上面的圆括号遇到函数时的表现是不一样的，也就是说。</p><ol><li><p>当圆括号出现在匿名函数的末尾想要调用函数时，它会默认将函数当成是函数声明。</p></li><li><p>当圆括号包裹函数时，它会默认将函数作为表达式去解析，而不是函数声明。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这两种模式都可以被用来立即调用一个函数表达式，利用函数的执行来创造私有变量</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">/* code */</span>&#125;());<span class="comment">//Crockford recommends this one，括号内的表达式代表函数立即调用表达式</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">/* code */</span>&#125;)();<span class="comment">//But this one works just as well，括号内的表达式代表函数表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Because the point of the parens or coercing operators is to disambiguate</span></span><br><span class="line"><span class="comment">// between function expressions and function declarations, they can be</span></span><br><span class="line"><span class="comment">// omitted when the parser already expects an expression (but please see the</span></span><br><span class="line"><span class="comment">// "important note" below).</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">10</span>;&#125;();</span><br><span class="line"><span class="literal">true</span> &amp;&amp; <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">/*code*/</span>&#125;();</span><br><span class="line"><span class="number">0</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果你并不关心返回值，或者让你的代码尽可能的易读，你可以通过在你的函数前面带上一个一元操作符来存储字节</span></span><br><span class="line"></span><br><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">/* code */</span>&#125;();</span><br><span class="line">~<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">/* code */</span>&#125;();</span><br><span class="line">-<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">/* code */</span>&#125;();</span><br><span class="line">+<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">/* code */</span>&#125;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Here's another variation, from @kuvos - I'm not sure of the performance</span></span><br><span class="line"><span class="comment">// implications, if any, of using the `new` keyword, but it works.</span></span><br><span class="line"><span class="comment">// https//twitter.com/kuvos/status/18209252090847232</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/* code */</span> &#125;</span><br><span class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/* code */</span> &#125;() <span class="comment">// Only need parens if passing arguments</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="关于括号的重要笔记"><a href="#关于括号的重要笔记" class="headerlink" title="关于括号的重要笔记"></a>关于括号的重要笔记</h3><p>在一些情况下，当额外的带着歧义的括号围绕在函数表达式周围是没有必要的(因为这时候的括号已经将其作为一个表达式去表达)，但当括号用于调用函数表达式时，这仍然是一个好主意。</p><p>这样的括号指明函数表达式将会被立即调用，并且变量将会储存函数的结果，而不是函数本身。当这是一个非常长的函数表达式时，这可以节约比人阅读你代码的时间，不用滚到页面底部去看这个函数是否被调用。</p><p>作为规则，当你书写清楚明晰的代码时，有必要阻止 JavaScript 抛出错误的，同样也有必要阻止其他开发者对你抛出错误<code>WTFError</code>!</p><h3 id="保存闭包的状态"><a href="#保存闭包的状态" class="headerlink" title="保存闭包的状态"></a>保存闭包的状态</h3><p>就像当函数通过他们的名字被调用时，参数会被传递，而当函数表达式被立即调用时，参数也会被传递。一个立即调用的函数表达式可以用来锁定值并且有效的保存此时的状态，因为任何定义在一个函数内的函数都可以使用外面函数传递进来的参数和变量(这种关系被叫做闭包)。<br>(个人理解: 见扩展’关于闭包’)<br></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 它的运行原理可能并不像你想的那样，因为`i`的值从来没有被锁定。</span></span><br><span class="line"><span class="comment">// 相反的，每个链接，当被点击时（循环已经被很好的执行完毕），因此会弹出所有元素的总数，</span></span><br><span class="line"><span class="comment">// 因为这是 `i` 此时的真实值。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> elems = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; elems.length; i++ ) &#123;</span><br><span class="line">    elems[i].addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        alert(<span class="string">'I am link #'</span> + i)</span><br><span class="line">        &#125;,<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 而像下面这样改写，便可以了，因为在IIFE里，`i`值被锁定在了`lockedInIndex`里。</span></span><br><span class="line"><span class="comment">// 在循环结束执行时，尽管`i`值的数值是所有元素的总和，但每一次函数表达式被调用时，</span></span><br><span class="line"><span class="comment">// IIFE 里的 `lockedInIndex` 值都是`i`传给它的值,所以当链接被点击时，正确的值被弹出。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> elems = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; elems.length;i++) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">lockedInIndex</span>)</span>&#123;</span><br><span class="line">        elems[i].addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">            alert(<span class="string">'I am link #'</span> + lockedInIndex);</span><br><span class="line">            &#125;,<span class="literal">false</span>)</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//你同样可以像下面这样使用IIFE，仅仅只用括号包括点击处理函数，并不包含整个`addEventListener`。</span></span><br><span class="line"><span class="comment">//无论用哪种方式，这两个例子都可以用IIFE将值锁定，不过我发现前面一个例子更可读</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> elems = <span class="built_in">document</span>.getElementsByTagName( <span class="string">'a'</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elems.length; i++ ) &#123;</span><br><span class="line">    elems[ i ].addEventListener( <span class="string">'click'</span>, (<span class="function"><span class="keyword">function</span>(<span class="params"> lockedInIndex </span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">            alert( <span class="string">'I am link #'</span> + lockedInIndex );</span><br><span class="line">        &#125;;</span><br><span class="line">        &#125;)( i ),<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>记住，在这最后两个例子里，<code>lockedInIndex</code>可以没有任何问题的访问<code>i</code>,但是作为函数的参数使用一个不同的命名标识符可以使概念更加容易的被解释。</p><p>立即执行函数一个最显著的优势是就算它没有命名或者说是匿名，函数表达式也可以在没有使用标识符的情况下被立即调用，一个闭包也可以在没有当前变量污染的情况下被使用。</p><p>自执行匿名函数(“Self-executing anonymous function”)有什么问题呢？<br>你看到它已经被提到好几次了，但是它仍然不是那么清楚的被解释，我提议将术语改成”Immediately-Invoked Function Expression”，或者，IIFE，如果你喜欢缩写的话。</p><p>什么是Immediately-Invoked Function Expression呢？它使一个被立即调用的函数表达式。就像引导你去调用的函数表达式。</p><p>我想Javascript社区的成员应该可以在他们的文章里或者陈述里接受术语，Immediately-Invoked Function Expression和 IIFE，因为我感觉这样更容易让这个概念被理解，并且术语”self-executing anonymous function”真的也不够精确。<br></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面是个自执行函数，递归的调用自己本身</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;foo();&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一个自执行匿名函数。因为它没有标识符，它必须是使用`arguments.callee`属性来调用它自己</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">arguments</span>.callee();&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这也许算是一个自执行匿名函数，但是仅仅当`foo`标识符作为它的引用时，如果你将它换成用`foo`来调用同样可行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;foo();&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有些人像这样叫'self-executing anonymous function'下面的函数,即使它不是自执行的，因为它并没有调用它自己。然后，它只是被立即调用了而已。</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*code*/</span> &#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">//为函数表达式增加标识符(也就是说创造一个命名函数)对我们的调试会有很大帮助。一旦命名，函数将不再匿名。</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;<span class="comment">/* code */</span>&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">//IIFEs同样也可以自执行，尽管，也许他不是最有用的模式</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">arguments</span>.callee();&#125;())</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;foo();&#125;())</span><br><span class="line"></span><br><span class="line"><span class="comment">// One last thing to note: this will cause an error in BlackBerry 5, because</span></span><br><span class="line"><span class="comment">// inside a named function expression, that name is undefined. Awesome, huh?</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123; foo(); &#125;());</span><br></pre></td></tr></table></figure><p></p><p>希望上面的例子可以让你更加清楚的知道术语’self-executing’是有一些误导的，因为他并不是执行自己的函数，尽管函数已经被执行。同样的，匿名函数也没用必要特别指出，因为，Immediately Invoked Function Expression，既可以是命名函数也可以匿名函数。</p><h2 id="最后：模块模式"><a href="#最后：模块模式" class="headerlink" title="最后：模块模式"></a>最后：模块模式</h2><p>当我调用函数表达式时，如果我不至少一次的提醒我自己关于模块模式，我便很可能会忽略它。如果你并不熟悉<code>JavaScript</code>里的模块模式，它和我下面的例子很像，但是返回值用对象代替了函数。<br></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">            i = val;</span><br><span class="line">        &#125;,</span><br><span class="line">        increment: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ++i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;());</span><br><span class="line">    counter.get();<span class="comment">//0</span></span><br><span class="line">    counter.set(<span class="number">3</span>);</span><br><span class="line">    counter.increment();<span class="comment">//4</span></span><br><span class="line">    counter.increment();<span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">    conuter.i;<span class="comment">//undefined (`i` is not a property of the returned object)</span></span><br><span class="line">    i;<span class="comment">//ReferenceError: i is not defined (it only exists inside the closure)</span></span><br></pre></td></tr></table></figure><p></p><p>模块模式方法不仅相当的厉害而且简单。非常少的代码，你可以有效的利用与方法和属性相关的命名，在一个对象里，组织全部的模块代码即最小化了全局变量的污染也创造了使用变量。</p><h2 id="扩展补充"><a href="#扩展补充" class="headerlink" title="扩展补充"></a>扩展补充</h2><p>以下内容为我个人对原文及译文的扩展分析</p><h3 id="1-函数声明与函数表达式"><a href="#1-函数声明与函数表达式" class="headerlink" title="1. 函数声明与函数表达式"></a>1. 函数声明与函数表达式</h3><p>关于这两者的定义你可以参看MDN的说明文档:<a href="https://developer.mozilla.org/zh-CN/docs/web/JavaScript/Reference/Operators/function" target="_blank" rel="noopener">函数表达式</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function" target="_blank" rel="noopener">函数声明</a><br>共同点: 两者都可以用<code>function</code>关键字来创建一个函数，用法也很类似，例如<br></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数表达式,这样生成的是一个具名函数,叫`bar`</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;</span><br><span class="line"><span class="comment">//或者函数表达式也可以这样写,这样生成的是一个匿名函数,`foo`只是这个匿名函数的引用</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;</span><br></pre></td></tr></table></figure><p></p><p>可以看出我们使用函数声明和函数表达式都可以用来创建一个实现某些功能的函数<br>不同点:</p><ol><li>从上面的例子我们可以看出函数声明只有一种写法,你必须给出函数的名字才行,如<code>foo</code>;<br>而函数表达式则有两种写法,第一种是生成命名函数叫<code>bar</code>,后一种是生成匿名函数,注意函数表达式中的<code>foo</code>并不是函数名,它只是函数的一个引用而已,代表你可以使用<code>foo</code>来间接的调用真正的函数;</li><li>函数声明存在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function#%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E6%8F%90%E5%8D%87" target="_blank" rel="noopener"><strong>提升</strong></a>,而函数表达式不存在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function#%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E6%8F%90%E5%8D%87" target="_blank" rel="noopener"><strong>提升</strong></a>,这意味着如果你是用函数声明的方法创建一个函数,那么你可以在定义这个函数之前就去使用它;但是如果你是用函数表达式的方法来创建一个函数,那么你就必须要在函数被创建了以后才可以去使用这个函数,例如:<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// ƒ foo()&#123;console.log(1)&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;</span><br><span class="line"></span><br><span class="line">consol.log(foo2); <span class="comment">// Uncaught ReferenceError: consol is not defined</span></span><br><span class="line"><span class="keyword">var</span> foo2 = <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;</span><br></pre></td></tr></table></figure></li></ol><p>你也可以参考<a href="https://github.com/Wscats/Good-text-Share/issues/73" target="_blank" rel="noopener">这里</a>给出的例子</p><ol start="3"><li>额外的一点是我们经常使用函数表达式的方式来创建匿名函数,进而创建IIFE,这一点就跟本文主要内容联系起来了;</li><li>还有一个区别是<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function#%E6%9C%89%E6%9D%A1%E4%BB%B6%E7%9A%84%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">有条件的创建函数</a>,当函数声明出现在非功能模块（比如 if）中时,虽然官方是禁止这样做的,但是实际上浏览器都支持这种做法,但是各个浏览器的处理方式有不同,这一点兼容性问题实在很头疼,所以我们不应该在生成环境代码中使用这种方式，应该使用函数表达式来代替。</li></ol><h3 id="2-报错原因"><a href="#2-报错原因" class="headerlink" title="2. 报错原因"></a>2. 报错原因</h3><p><code>function (){console.log(1)}()</code>报错出现在第一个括号，因为声明一个函数需要名字，这里声明没有给出名字，所以直接报错，走不到第二个括号，但是<code>function foo(){console.log(1)}()</code>报错出现在第二括号，因为这里声明函数是正确的，当处理到第二个括号时，发现第二个括号内没有任何东西，这是不允许的,所以报错,理由参见文章中注释处</p><h3 id="3-关于闭包"><a href="#3-关于闭包" class="headerlink" title="3. 关于闭包"></a>3. 关于闭包</h3><p>在ES6之前只存在两种作用域,一是全局作用域,此作用域当浏览器打开一个页面时就会被创建,你可以通过<code>window</code>对象来访问这个全局作用域中的成员,另外一个就是函数作用域,当js引擎执行一个函数时就会为这个函数创建一个属于该函数的作用域,(在ES6中引入了新的作用域:块级作用域,使用<code>let</code>标识符来生成一个只在块级范围内可访问的变量,关于<code>let</code>的特性你可以参见这里<a href="https//es6.ruanyifeng.com/#docs/let">ECMAScript 6 入门</a>).<br></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(++i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> logger = foo();</span><br><span class="line">logger(); <span class="comment">// 2</span></span><br><span class="line">logger(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p></p><p>理解闭包必须先理解js的函数作用域,之前说过了每次执行一个函数时就会为这个函数创建一个属于它自己的函数作用域,一旦这个函数运行完毕,那么它的作用域就会被销毁,其中的保存的信息一般也会被销毁,但是,这是一般的情况,那么什么是不一般的情况呢?</p><p>这时我们就要利用浏览器销毁变量及作用域的特性来搞事了,浏览器的<a href="https://blog.csdn.net/liwenfei123/article/details/77962820" target="_blank" rel="noopener">垃圾回收机制</a>(有两种垃圾回收机制,这里以最常用的标记清除法为例)会定时的检查变量是否被引用,也就是是否有指针指向该数据的存储区域,如果有,那么说明有人可能要使用该数据,则不能销毁该区域,如果没有,说明没人再能够访问这个数据了,那么就可以放心的去销毁该区域来回收内存.</p><p>而闭包正好利用了这个特性,例如上面的例子中,函数<code>foo</code>每次执行时会返回一个新函数叫做<code>log</code>,<code>log</code>函数内部需要访问它外面的变量<code>i</code>才能正常工作,返回的新函数被赋给了变量<code>logger</code>,那么这里的指向关系是<code>logger</code> -&gt; <code>log</code> -&gt; <code>i</code>,那么在之后的js执行过程中,由于外部的变量<code>logger</code>通过一系列的指向,最终时能够访问的最开始的那个变量<code>i</code>的,那么按照垃圾回收机制,函数<code>foo</code>的作用域将一直不能够被销毁,因为它内部的变量<code>i</code>还有人用着呢!并且我们发现类似<code>i</code>这样的变量能够保存很重要的一些信息,比如函数被调用的次数等等,我们就可以用来计数或者其它你能发挥创造力的用途.</p><p>关于缺点的话也是很明显的,因为闭包内的变量一直将被保留着,如果我们创建大量这样的变量或者大量的闭包,那么浏览器可用内存就会越来越小造成卡顿,应该考虑情况适当使用.</p>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssh-git</title>
      <link href="/ssh-git/"/>
      <url>/ssh-git/</url>
      
        <content type="html"><![CDATA[<h1 id="github的https和ssh连接方式探究"><a href="#github的https和ssh连接方式探究" class="headerlink" title="github的https和ssh连接方式探究"></a>github的https和ssh连接方式探究</h1><p>在本机连接github仓库提交代码时有两种可选方法，一种是使用github账号的用户名和密码的认证方式通过https连接，另一种是使用ssh-key的认证方式通过ssh连接，本文主要研究这两种方式的工作过程以及可能会扩展探究一些相关的知识。<br><a id="more"></a></p><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><p>1995年芬兰赫尔辛基理工大学的塔图·于勒宁编写了<code>secure shell</code>, 简称<code>SSH</code>, 在这之前已经有不安全的<code>shell</code>, 但是<code>SSH</code>的提出保证了在非安全网络中可以加密完整可靠的传输数据, 要注意的是<code>SSH</code>只是一种通信协议, 存在则多种实现, 下面使用的是其中应用最广泛其中之一的开源实现<code>OpenSSH</code>.<br><code>SSH</code>基于公钥和私钥形式的<code>非对称加密</code>实现身份验证, 其默认的通信端口是22, 在登录验证时有两种方式: 1.密码认证;2.公钥认证.</p><ol><li><p>密码认证<br>1.用户使用<code>SSH</code>向远程主机发起连接请求; 2.远程主机收到请求后把自己的公钥发给用户; 3.用户使用公钥对自己的登录密码进行加密, 然后发送给远程主机; 4.远程主机使用自己的密钥对发来的加密信息进行解密, 然后验证解密出来的用户密码是否正确, 如果密码正确则允许用户连接, 登录成功, 然后用户会把远程主机的公钥加入到自己本地的<code>$HOME/.ssh/known_hosts</code>中.<br>仔细分析这个过程我们会发现一个漏洞, 假如我是个黑客, 我出现在了用户和服务器中间的位置, 当在上面第二步的过程时我把我自己的公钥发送给用户, 然后用户就会用我的公钥加密他的密码然后发送给我, 这样我再用我的私钥来解密消息, 就可以获得用户的明文密码了, 这其实就是著名的<code>中间人攻击Main-in-the-middle attack(MITM)</code>. 如何应对<code>中间人攻击</code>可以参加下面.</p></li><li><p>密钥认证<br>密钥认证比密码认证安全一些, 因为不涉及用户密码的传输过程. 过程大致如下: 1.用户生成自己的一对公钥和密钥, 然后将公钥存储在远程主机上; 2.用户登录的时候向远程主机发送用私钥签名的包含用户名和公钥等信息; 2.远程主机收到请求后检查自己的<code>$HOME/.ssh/authorized_keys</code>中是否有用户发送的消息中的公钥信息, 如果有则证明该消息的公钥信息合法, 然后就会使用该公钥解密消息.</p></li><li><p>中间人攻击<br>那么<code>SSH</code>如何应对之前提到的<code>中间人攻击</code>呢?<br>在我们第一次连接一个远程主机例如<code>ssh user@host</code>连接时, 我们会收到如下提示信息:</p><blockquote><p>The authenticity of host ‘host (12.18.429.21)’ can’t be established.<br>RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.<br>Are you sure you want to continue connecting (yes/no)?</p></blockquote><p>这就是在提示我们是第一次连接这个主机, 然后消息里面给出了这个主机的公钥的md5摘要信息<code>98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d</code>, 我们可以通过确认这个摘要值是不是我们想要连接的主机的, 如果是就输入<code>yes</code>回车确认连接, 并且会自动把这个主机加入到我们的本地<code>known hosts</code>（已知主机）名单里面, 以后都不再提示.<br>因为<code>中间人攻击</code>核心就是使用假的公钥来替代真正的远程主机的公钥, 那么可以通过如下两种解决方案来应对:</p><ol><li><p>远程主机把自己的公钥拿到CA处做认证，申请一个数字证书<br>有关数字证书和数字签名的区别可以查看<a href="https//www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html">这里</a>, 以后只要确认这个证书是正规可信的, 那就可以对应的信任该公钥</p></li><li><p>远程主机把自己公钥的指纹信息公布出来, 让大家自己来查看对比<br>比如放在自己的网站上面供想要连接的人执行对比查阅<br>通过上面两种做法都可以是的用户确认自己当前加密信息所使用的公钥确定是正确的远程主机的公钥, 而不是<code>中间人</code>的公钥<br>关于<code>SSH</code>, 你也可以参考<a href="https//blog.51cto.com/zhaochj/1602279">这里</a>或者<a href="https//www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html">阮一峰的博客</a></p></li></ol></li></ol><h2 id="git的两种通信协议"><a href="#git的两种通信协议" class="headerlink" title="git的两种通信协议"></a>git的两种通信协议</h2><p>实际上git可以使用四种通信协议:<code>本地传输</code>，<code>SSH协议</code>，<code>Git协议</code>和<code>HTTP/S协议</code>, 我们这里只讨论其中的<code>SSH协议</code>和<code>HTTP/S协议</code>.<br>使用中最明显的区别是<code>SSH协议</code>只能操作我们有管理权限的项目, 但是<code>HTTP/S协议</code>允许我们clone没有管理权限的项目(不能修改, 只能clone查看).<br>一般我们使用<code>SSH协议</code>比较多, 因为服务器一般是<code>linux</code>系统的, 它内置了<code>SSH</code>, 使用方便, 而且<code>SSH</code>也更安全.</p><ol><li>首先在本机下载安装<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>，一路点next默认安装即可;</li><li><p>配置个人信息<br>使用git提交更改的时候会为本次提交附上提交人的一些信息，比如提交人的用户名及邮箱信息，我们可以使用git提供的配置功能来提前配置好这些信息，使用如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"John Doe"</span></span><br><span class="line">git config --global user.email <span class="string">"johndoe@example.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明：</span></span><br><span class="line"><span class="comment"># git config: 表示使用git的配置工具</span></span><br><span class="line"><span class="comment"># --global: 表示配置全局的信息，你也可以在某个项目下面单独配置这个信息，只需要去掉'--global'即可，</span></span><br><span class="line"><span class="comment"># &lt;- 这样不同的项目就会有不同提交人信息</span></span><br><span class="line"><span class="comment"># user.name / user.email: 后面跟上你自己的用户名和邮箱信息即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 之后我们可以使用如下命令来查看我们配置的信息</span></span><br><span class="line"><span class="comment">#git config user.name</span></span><br><span class="line"><span class="comment">#git config user.email</span></span><br></pre></td></tr></table></figure></li><li><p>按照下面步骤尝试clone一个github上的项目到本地</p></li></ol><h3 id="使用https协议"><a href="#使用https协议" class="headerlink" title="使用https协议"></a>使用https协议</h3><p>以我的博客所使用<a href="https://github.com/stkevintan/hexo-theme-material-flow" target="_blank" rel="noopener">hexo的materialFlow主题项目</a>为例(这个项目我没有管理权限)，一行命令<code>git clone https://github.com/stkevintan/hexo-theme-material-flow.git</code>即可clone到本地, 因为这个项目我没有权限, 如果我是用<code>SSH协议</code>方式那么就会报错, 见下面.<br>在修改了代码以后想要提交<code>git push</code>的时候会提示我们输入用户名和密码, 这里就涉及到新版<code>智能HTTP/S协议</code>(Git1.6.6之后引入), 你可参考<a href="https://blog.csdn.net/JNingWei/article/details/78905712" target="_blank" rel="noopener">这里</a>, 在弹出的一个窗口输入用户名和密码, 之后你再提交的时候不会要求输入用户名和密码, 如果你使用的时候不是这样(Git版本太低或者服务器不支持<code>智能HTTP/S协议</code>), 那么可以参考<a href="https://www.jianshu.com/p/b5ec092fc1d1" target="_blank" rel="noopener">这里</a>配置<code>https</code>协议下的认证, 这样就不用每次提交的时候都要求输入用户名和密码.</p><h3 id="使用ssh协议"><a href="#使用ssh协议" class="headerlink" title="使用ssh协议"></a>使用ssh协议</h3><p>此时你就无法直接使用<code>git clone git@github.com:stkevintan/hexo-theme-material-flow.git</code>命令来clone上面那个项目到本地，会产生如下错误提示：</p><blockquote><p>fatal: Could not read from remote repository.<br>Please make sure you have the correct access rights and the repository exists.</p></blockquote><p>因为ssh的方式是需要进行认证的，你必须是这个项目的所有者或者管理者，才能有权限去使用ssh方式clone该项目，而上面的https方式则允许任何一个人在不需要验证的情况下去clone项目.</p><p><strong>那么接下来看一下对于一个我们有管理权限的仓库应该如何使用ssh方式去clone到本地</strong></p><p>ssh方式是基于不对称性加密来通信的，你需要使用不对称性算法来生成一对密钥，然后将私钥放置在你本机上，将公钥放置在github服务器上，之后在进行ssh通信时将会使用这对秘钥来完成认证登陆及加密和解密信息，<br>在window上和mac上我们都可以使用<code>ssh-keygen</code>这个命令行工具来生成我们需要的密钥，这是我们想要使用ssh通信的第一步</p><ol><li>生成一对密钥<br>打开你的命令行（window下使用<code>cmd.exe</code>，mac下使用<code>terminal.app</code>），然后按照如下命令来生成密钥</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br><span class="line"><span class="comment"># 参数说明：  </span></span><br><span class="line"><span class="comment"># ssh-keygen: 表示将要使用ssh-keygen这个工具来生成密钥</span></span><br><span class="line"><span class="comment"># -t: 指定要生成的密钥类型，有rsa1(SSH1),dsa(SSH2),ecdsa(SSH2),rsa(SSH2)等类型，较为常用的是rsa类型，此处指定为rsa类型</span></span><br><span class="line"><span class="comment"># -b: 指定要生成的密钥长度 (单位:bit)，对于RSA类型的密钥，最小长度768bits,默认长度为2048bits。DSA密钥必须是1024bits，此处指定为4096bits</span></span><br><span class="line"><span class="comment"># -C: 制定要生成的密钥的注释，这个可以自己随意填写，就相当于给这个密钥留个名，好分辨，比如此处可以用注册github的邮箱号</span></span><br></pre></td></tr></table></figure><p>之后会出现如下提示内容：</p><blockquote><p>Generating public/private rsa key pair.<br>Enter file in which to save the key (C:/Users/xxxxx/.ssh/id_rsa):</p></blockquote><p>意思是让你输入这个密钥文件的文件名，一般情况保存默认就可以，直接回车确认。<br>(如果你有多个git的账号需要配置，比如你自己在github上有账号需要提交代码，同时自己在公司也有git的账号，有时候需要提交代码到公司的仓库里，那么这时候你就需要额外的配置来保证提交的时候不会冲突，<a href="#多git账户配置">详见下面</a>)<br>然后会出现下一个提示内容：</p><blockquote><p>Enter passphrase (empty for no passphrase):</p></blockquote><p>意思是要不要对私钥设置口令（passphrase），如果担心私钥的安全，你可以设置一个，这里一般不设置，直接回车确认即可，最后会出现类似如下的提示内容：</p><blockquote><p>+—[RSA 4096]—-+<br>| o+o .. .o |<br>| oo… o … = |<br>|+ +.+ o.o.o.+ o |<br>|oB =.o..E.o* o |<br>|o = o.o Soo+= |<br>| . o .+++ . |<br>| o.o |<br>| .. |<br>| .. |<br>+—-[SHA256]—–+</p></blockquote><p>那么恭喜你，你已经生成了一对密钥文件，他们存储在<code>C:/Users/xxxxx/.ssh/</code>（windows）或者<code>~/.ssh</code>（mac）目录下，默认的文件是id_rsa（私钥文件名）和id_rsa.pub（公钥文件名），你可以去打开查看一下里面的内容。</p><ol start="2"><li><p>部署密钥<br>之前说过了你需要将私钥保存在本机，公钥放置在服务器上，这样之后才能用这对密钥建立ssh通信，那么在github上我们按照如下做法来部署密钥</p><ol><li>用文本编辑器打开刚才生成的公钥文件id_rsa.pub，拷贝里面的全部内容；</li><li>打开浏览器登陆你的github账户，依次打开你头像上的Settings &gt; SSH and GPG keys &gt; New SSH key;</li><li>填写相关信息，<strong>title</strong>可以类似之前生成密钥时填写的注释信息那样填写你的邮箱名，然后<strong>key</strong>里面填上刚才拷贝的公钥内容，点击<strong>Add SSH key</strong>之后输入一次你的github账户密码进行确认，然后你的公钥就被保存部署到github服务器上了；</li></ol></li><li><p>测试连接，使用如下命令来测试是否能够通过ssh连接到github</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh git@github.com</span><br><span class="line"><span class="comment"># 参数说明：</span></span><br><span class="line"><span class="comment"># ssh: 使用ssh进行连接</span></span><br><span class="line"><span class="comment"># git@github.com: ssh连接时需要指定登陆用户名和远程主机名，这里的git就是github的远程服务器的用户名，github.com就是远程服务器的主机名，用'@'符号连接起来</span></span><br></pre></td></tr></table></figure></li></ol><p>当你是第一次连接的时候会提示你如下信息：</p><blockquote><p>The authenticity of host ‘github.com (52.74.223.119)’ can’t be established.<br>RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.<br>Are you sure you want to continue connecting (yes/no)?</p></blockquote><p>这是因为你是第一次连接该主机，该主机不在你本机的<code>known hosts</code>（已知主机）名单里面，所以询问你是否要继续连接这个陌生的主机，输入<code>yes</code>然后回车确认即可，之后再次连接的时候就不会有这个提示信息了。这里提示信息中的<code>RSA key fingerprint</code>代表的是公钥的md5摘要值, 因为<code>RSA</code>算法生成的公钥长度很长(一般为1024位或者2018位, 可以自己在生成时指定), 这里就用了对公钥进行摘要后的比较短的值来代表公钥.<br>如果你配置步骤没问题的话应该可以看到下面的连接上之后的欢迎信息(xxxxx代表你的github的账户名)：</p><blockquote><p>Warning: Permanently added ‘github.com,52.74.223.119’ (RSA) to the list of known hosts.<br>PTY allocation request failed on channel 0<br>Hi xxxxx! You’ve successfully authenticated, but GitHub does not provide shell access.<br>Connection to github.com closed.</p></blockquote><ol start="4"><li>使用ssh方式clone项目<br>之前说过了ssh方式只能操作我们有管理权限的项目，所以这里我拿自己做的一个<a href="https://github.com/kricsleo/vehicleKeyboard" target="_blank" rel="noopener">微信小程序的虚拟车牌键盘</a>的项目为例<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:kricsleo/vehicleKeyboard.git</span><br></pre></td></tr></table></figure></li></ol><p>这个时候我们就能顺利clone该项目到本机了，因为在我们上面这条命令请求数据的过程中，我们本机和github的服务器会使用我们之前生成的那对密钥来进行相互认证，从而使我们不需要手动输入github的账户名和密码信息来完成认证登陆，同时我们以后修改了项目代码在进行提交的时候也可直接进行提交等相关操作，无需再考虑登陆及连接的问题，git的使用可以参考我之前的一篇<a href="https//kricsleo.com/2018/08/22/git-workflow/">小总结</a></p><p>关于git使用https和ssh方式的区别你也可以查看<a href="https://blog.cuiyongjian.com/engineering/git-https-ssh/" target="_blank" rel="noopener">这里</a></p><h2 id="多git账户配置"><a href="#多git账户配置" class="headerlink" title="多git账户配置"></a>多git账户配置</h2><p>如果你需要生成多对密钥，比如你需要和两个不一样的服务器A和B进行ssh通信，那么这个时候你就可以生成两对密钥，一对用来和A通信，另一对用来和B通信，最常见的情况就是我们自己在github上面会有自己的github账户，自己平时会开发一些自己的项目，然后提交到github上面，在公司里面公司一般会有自己的gitlab服务器，然后给员工开通一个gitlab的账号，有关公司内部的项目就会让员工用gitlab的账户进行开发，然后提交代码到公司的gitlab上面，那么这时候我们可以按照如下的方法来配置一下，保证自己随时提交代码的时候都是能够提交到正确的地方，而不会混乱。</p><ol><li>再生成一对密钥<br>在上面的操作中你已经生成了一对密钥，名字叫做<code>id_rsa</code>和<code>id_rsa.pub</code>（如果你没有改名的话），这个密钥我们已经拿来和github进行通信了，此时我们要想和公司的gitlab通信就需要再生成一对密钥，为了避免这次生成的密钥覆盖我们之前的那对密钥，可以执行如下命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"youremail@yourcompany.com” -f ~/.ssh/id_rsa_xx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 参数说明</span></span><br><span class="line"><span class="string"># 这次我们生成密钥的命令只比之前多了一个参数： -f</span></span><br><span class="line"><span class="string"># -f: 表示将这次什么的密钥文件保存为id_rsa_xx，同样放在了之前的那个文件夹，这个文件名你可以自己随意指定，不过最好容易区分一些</span></span><br></pre></td></tr></table></figure></li></ol><p>后面你的操作就和之前生成密钥一样了，生成好密钥之后再看下一步</p><ol start="2"><li>部署新生成的密钥<br>和之前部署github密钥的步骤类似，你登录你公司的gitlab，找到添加<code>ssh-key</code>的地方，然后拷贝新生成的公钥id_rsa_xx.pub文件内容到gitlab里面去并且保存，这样你公司的gitlab服务器上的公钥信息就配置好了</li><li><p>新建配置文件<br>因为现在我们本机上有了两对密钥，提交代码到github时需要使用之前生成的那一对，提交代码到公司的gitlab上需要我们现在刚刚生成的这一对，那么我们就要写一个简单的配置文件来告诉git该如何再提交代码时选择正确的密钥，实际上就是编写SSH的用户配置文件config。<br>在目录<code>~/.ssh</code>(mac环境)或者<code>C:/Users/xxxxx/.ssh/</code>下新建文件<code>config</code>，注意<strong>没有后缀名</strong>的，然后在里面填写上如下内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#github</span></span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment">#yourcompany</span></span><br><span class="line">Host git.XXXXX.com</span><br><span class="line">    HostName git.XXXXX.com</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_XX</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明，此段内容不用拷贝，是为了加以说明</span></span><br><span class="line"><span class="comment"># Host: 别名，为了方便记忆和区分，可以任意填写</span></span><br><span class="line"><span class="comment"># HostName： 主机名 服务器的主机名，也可以是服务器的ip地址，需要准确填写</span></span><br><span class="line"><span class="comment"># User： 用户名，ssh登录服务器时的用户名，一般是git</span></span><br><span class="line"><span class="comment"># IdentityFile： 密钥文件的路径，填写上你要用来和这个服务器通信使用的密钥文件的路径</span></span><br><span class="line"><span class="comment"># PreferredAuthentications：可选值 'publickey'和'password',强制使用密钥验证或者密码认证，我这里没有要求这个，你也可以按自己需求加上</span></span><br></pre></td></tr></table></figure></li><li><p>测试连接<br>使用如下命令来分别测试能否连接到对应的服务器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试连接公司</span></span><br><span class="line">ssh git@git.XXXXX.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试连接github</span></span><br><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure></li></ol><p>如果能分别看到对应的欢迎信息，那么恭喜你配置正确了。</p><ol start="5"><li>配置个人信息<br>这次我们因为有不同的项目，提交时需要附加上的个人信息也不一样，你提交github时会用你自己的github账户名和邮箱信息，但是提交公司的gitlab时会使用公司给你的账户名和公司个人邮箱，那么我们就需要到具体的项目下面执行如下的命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.name <span class="string">"yourname"</span></span><br><span class="line">git config user.email <span class="string">"youremail@XXXXX.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment"># 与之前我们执行的那条配置个人信息命令相比，只是少了个'--global'参数，因为我们现在不是在全局配置，而是在个别项目中单独配置</span></span><br></pre></td></tr></table></figure></li></ol><p>到这里为止，你的多git账户依旧配置完毕了，后面就可以和平常一样使用git来提交代码了，ssh会为你选择正确的密钥来和服务器认证和通信。</p>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>markdown</title>
      <link href="/markdown/"/>
      <url>/markdown/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown语法整理"><a href="#markdown语法整理" class="headerlink" title="markdown语法整理"></a>markdown语法整理</h1><p>经常使用markdown来做笔记，这里把现在常用的语法先记录一下，万一老年人了记忆不好，也可以查一查<br><a id="more"></a></p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># h1</span></span><br><span class="line">......</span><br><span class="line"><span class="section">###### h6</span></span><br><span class="line"></span><br><span class="line">分隔符</span><br><span class="line">最少三个---或<span class="emphasis">***</span></span><br></pre></td></tr></table></figure><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">(部分markdown软件不支持)</span><br><span class="line">[TOC]</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; quote(每行最后添加两个空格即表示换行)  </span></span><br><span class="line">quote  </span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; quote(或者采取每行前面都添加引用标志)</span></span><br><span class="line"><span class="quote">&gt; quote</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; quote(多行嵌套引用)</span></span><br><span class="line">&gt;&gt; quote2</span><br><span class="line">&gt;&gt;&gt; quote3</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">行内代码<span class="code">`code`</span>行内代码</span><br><span class="line"></span><br><span class="line">多行代码，[<span class="string">支持高亮语言</span>](<span class="link">https://blog.csdn.net/qq_32126633/article/details/78838494#language_key</span>)</span><br></pre></td></tr></table></figure><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">个人博客</span>](<span class="link">https://kricsleo.github.io/ 'krics的个人博客'</span>)</span><br><span class="line">或者</span><br><span class="line">[<span class="symbol">blog</span>]: <span class="link">https://kricsleo.github.io/ 'krics的个人博客'</span></span><br><span class="line">[<span class="string">个人博客</span>][<span class="symbol">blog</span>]</span><br></pre></td></tr></table></figure><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">个人头像</span>](<span class="link">https://kricsleo.github.io/images/avatar.jpg 'krics的个人头像'</span>)</span><br><span class="line">或者</span><br><span class="line">[<span class="symbol">avatar</span>]: <span class="link">https://kricsleo.github.io/images/avatar.jpg 'krics的个人头像'</span></span><br><span class="line">![<span class="string">个人头像</span>][<span class="symbol">avatar</span>]</span><br><span class="line">图片带链接</span><br><span class="line">[<span class="string">![个人头像</span>](<span class="link">https://kricsleo.github.io/images/avatar.jpg 'krics的个人头像'</span>)](<span class="link">https://kricsleo.github.io/images/avatar.jpg</span>)</span><br></pre></td></tr></table></figure><h2 id="序表"><a href="#序表" class="headerlink" title="序表"></a>序表</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">有序节点</span><br><span class="line"><span class="bullet">1. </span>节点1</span><br><span class="line"><span class="code">    1. 节点1.1</span></span><br><span class="line"><span class="bullet">2. </span>节点2</span><br><span class="line">无序节点</span><br><span class="line"><span class="bullet">- </span>节点$</span><br><span class="line"><span class="code">    - 节点$.^</span></span><br><span class="line"><span class="bullet">- </span>节点#</span><br><span class="line"><span class="code">    - 节点#.&amp;</span></span><br></pre></td></tr></table></figure><h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>[ ] 未完成</span><br><span class="line"><span class="bullet">- </span>[x] 已完成</span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 附上[在线生成表格工具](https//www.tablesgenerator.com/markdown_tables)</span></span><br><span class="line">|    a    |       b       |      c     |</span><br><span class="line">|:-------:|:------------- | ----------:|</span><br><span class="line">|   居中   |      左对齐    |    右对齐   |</span><br></pre></td></tr></table></figure><h2 id="语义性"><a href="#语义性" class="headerlink" title="语义性"></a>语义性</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*斜体*</span> or <span class="xml"><span class="tag">&lt;<span class="name">i</span>&gt;</span></span>斜体<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="strong">**加粗**</span> or <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>加粗<span class="xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="strong">***斜体加粗**</span>* or <span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span></span>强调<span class="xml"><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span></span><br><span class="line">~~删除线~~</span><br><span class="line">上标<span class="xml"><span class="tag">&lt;<span class="name">sup</span>&gt;</span></span>u<span class="xml"><span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span></span><br><span class="line">下标<span class="xml"><span class="tag">&lt;<span class="name">sub</span>&gt;</span></span>d<span class="xml"><span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span></span><br><span class="line">键盘按键<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="格式化显示"><a href="#格式化显示" class="headerlink" title="格式化显示"></a>格式化显示</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span></span><br><span class="line"><span class="code">    ...</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><ul><li style="list-style:none"><input type="checkbox"> 目前还不常用，之后补齐<h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Markdown[^1]</span><br><span class="line">在页面底端注解</span><br><span class="line">[<span class="symbol">^1</span>]: <span class="link">Markdown是一种纯文本标记语言</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="定义型列表"><a href="#定义型列表" class="headerlink" title="定义型列表"></a>定义型列表</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Markdown</span><br><span class="line">:   Markdown是一种纯文本标记语言  (冒号后跟一个'Tab'或者四个空格)</span><br></pre></td></tr></table></figure><h2 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">xxx@163.com</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>markdown的代码绘制流程图个人感觉比较复杂，个人使用的在线绘制工具<a href="https://www.processon.com/diagrams" target="_blank" rel="noopener">ProcessOn</a></p>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git-workflow</title>
      <link href="/git-workflow/"/>
      <url>/git-workflow/</url>
      
        <content type="html"><![CDATA[<h3 id="git的日常使用流程记录"><a href="#git的日常使用流程记录" class="headerlink" title="git的日常使用流程记录"></a>git的日常使用流程记录</h3><p>内容参考于阮一峰老师的<a href="https//www.ruanyifeng.com/blog/2015/08/git-use-process.html">Git使用规范流程</a>，记录一下git的日常使用流程。<br><a id="more"></a><br><img src="" data-src="https//www.ruanyifeng.com/blogimg/asset/2015/bg2015080501.png" alt="常用流程图"></p><h4 id="1-新建分支"><a href="#1-新建分支" class="headerlink" title="1. 新建分支"></a>1. 新建分支</h4><p>开发新功能时都应该新建一个分支，在分支上开发，当功能开发完成时再合并到主分支，并销毁新建的分支。<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git checkout——检出，是我们的常用命令。最为常用的两种情形是创建分支和切换分支</span></span><br><span class="line"><span class="comment"># 先切换到主分支，获取最新代码</span></span><br><span class="line">git checkout master</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后新建分支，在这个分支上进行新功能开发</span></span><br><span class="line">git checkout -b myfeature</span><br></pre></td></tr></table></figure><p></p><h4 id="2-提交分支"><a href="#2-提交分支" class="headerlink" title="2. 提交分支"></a>2. 提交分支</h4><p>新功能开发完成以后提交代码<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认保存所有改动 --all</span></span><br><span class="line">git add</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看发生改动的地方</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交改动，也可以跟上 --verbose，然后就可以列出diff比较的结果，并且附上本次提交信息</span></span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><p></p><h4 id="3-同步代码"><a href="#3-同步代码" class="headerlink" title="3. 同步代码"></a>3. 同步代码</h4><p>开发过程中可以经常同步主分支的最新代码，保证一直在最新的基础上进行开发<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git fetch 表示取回最新代码</span></span><br><span class="line">git fetch origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将有更新的代码与当前分支合并</span></span><br><span class="line"><span class="comment"># 所取回的更新，在本地主机上要用"远程主机名/分支名"的形式读取。比如origin主机的master，就要用origin/master读取。</span></span><br><span class="line">git merge origin/masterdfdf</span><br></pre></td></tr></table></figure><p></p><h4 id="4-合并多个commit"><a href="#4-合并多个commit" class="headerlink" title="4. 合并多个commit"></a>4. 合并多个commit</h4><p>新功能开发过程中一般会多次commit，但是在功能开发完成以后需要合并到主干时，一般把之前的commit合并成一个或几个关键的commit<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git rebase命令的i参数表示互动（interactive），具体如何合并请参见原文</span></span><br><span class="line">git rebase -i origin/master</span><br></pre></td></tr></table></figure><p></p><h4 id="5-推送到远程仓库"><a href="#5-推送到远程仓库" class="headerlink" title="5. 推送到远程仓库"></a>5. 推送到远程仓库</h4><p>多个commit经过合理的处理以后就可以把当前分支推送到远程仓库了<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git push命令要加上force参数，因为rebase以后，分支历史改变了，跟远程分支不一定兼容，有可能要强行推送</span></span><br><span class="line">git push --force master myfeature</span><br></pre></td></tr></table></figure><p></p><h4 id="6-发出Pull-Request"><a href="#6-发出Pull-Request" class="headerlink" title="6. 发出Pull Request"></a>6. 发出Pull Request</h4><p>提交到远程仓库以后，就可以发出 Pull Request 到master分支，然后请求别人进行代码review，确认可以合并到master。</p><h2 id="常用-git-命令"><a href="#常用-git-命令" class="headerlink" title="常用 git 命令"></a>常用 git 命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地分支推送到远程</span></span><br><span class="line"><span class="comment"># 参数: [origin] 远程主机名, 一般为 origin</span></span><br><span class="line"><span class="comment"># [local-branch-name]: 本地创建的分支名</span></span><br><span class="line"><span class="comment"># [remote-branch-name]: 把本地分支推送到哪个远程分支(一般和本地保持一致, 如果远程分支名不存在会自动创建)</span></span><br><span class="line">git push [origin] [<span class="built_in">local</span>-brand-name]:[remote-branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地分支</span></span><br><span class="line"><span class="comment"># 参数: -d 删除 -D 强制删除</span></span><br><span class="line">git branch -[d|D] [<span class="built_in">local</span>-branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push [origin] --delete [remote-branch-name]</span><br></pre></td></tr></table></figure><p>参考文档: https//<a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="noopener">www.ruanyifeng.com/blog/2014/06/git_remote.html</a></p><p>(end)</p>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
